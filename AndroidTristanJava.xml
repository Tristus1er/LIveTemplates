<templateSet group="AndroidTristanJava">
  <template name="and_test_log" value="$END$&#10;android.util.Log.v(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;Log.d(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;Log.i(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;Log.w(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;Log.e(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;Log.wtf(TAG, &quot;$enclosing_method$ $LOG_VALUE$&quot;);&#10;" description="Display the different kind of log levels." toReformat="true" toShortenFQNames="true">
    <variable name="enclosing_method" expression="methodName()" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_activity_new_intent_with_arguments" value="private static final String $EXTRA_PARAM$ = &quot;$CLASS_NAME$.$EXTRA_PARAM$&quot;;&#10;&#10;public static android.content.Intent newIntent(android.content.Context context, $EXTRA_CLASS$ $EXTRA_VAR$) {&#10;    Intent intent = new Intent(context, $CLASS_NAME$.class);&#10;    intent.putExtra($EXTRA_PARAM$, $EXTRA_VAR$);$END$&#10;    return intent;&#10;}&#10;&#10;@Override&#10;protected android.support.v4.app.Fragment getFragment() {&#10;    $EXTRA_CLASS$ $EXTRA_VAR$ = getIntent().get$EXTRA_CLASS$Extra($EXTRA_PARAM$);&#10;    return $FRAGMENT_CLASS$.newInstance($EXTRA_VAR$);&#10;}" description="Activity New Intent with Arguments." toReformat="true" toShortenFQNames="true">
    <variable name="EXTRA_PARAM" expression="capitalizeAndUnderscore(EXTRA_VAR)" defaultValue="" alwaysStopAt="false" />
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="EXTRA_CLASS" expression="typeOfVariable(VAR)" defaultValue="" alwaysStopAt="true" />
    <variable name="EXTRA_VAR" expression="suggestFirstVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="FRAGMENT_CLASS" expression="groovyScript(&quot;_1.replaceAll('Activity','Fragment')&quot;, CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_tag" value="private static final String TAG = &quot;$className$&quot;;&#10;" description="Define the TAG used in the Log method." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_fragment_new_instance_with_arguments" value="private static final String $ARG_PARAM$ = &quot;$CLASS_NAME$.$ARG_PARAM$&quot;;&#10;&#10;private $ARG_CLASS_DITTO$ m$INST_VAR$;&#10;&#10;public static $CLASS_NAME$ newInstance($ARG_CLASS$ $ARG_VAR$) {&#10;    $CLASS_NAME$ fragment = new $CLASS_NAME$();&#10;    android.os.Bundle args = new Bundle();&#10;    args.put$ARG_CLASS$($ARG_PARAM$, $ARG_VAR$);&#10;    fragment.setArguments(args);&#10;    return fragment;&#10;}&#10;&#10;@Override&#10;public void onCreate(Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;    m$INST_VAR$ = getArguments().get$ARG_CLASS$($ARG_PARAM$);&#10;}" description="Fragment New Instance with Arguments." toReformat="true" toShortenFQNames="true">
    <variable name="ARG_PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="ARG_CLASS_DITTO" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INST_VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ARG_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ARG_VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_test_asyncTask" value="private class LongRunTask extends android.os.AsyncTask&lt;String, Integer, Long&gt; {&#10;&#10;&#9;protected void onPreExecute(){&#10;&#9;&#9;// TODO : Launched UI thread before the task is executed =&gt; Display a progress bar&#10;&#9;}&#10;&#10;&#9;protected Long doInBackground(String... params) {&#10;&#9;&#9;int count = params.length;&#10;&#9;&#9;long totalSize = 0;&#10;&#9;&#9;for (int i = 0; i &lt; count; i++) {&#10;&#10;            // FIXME : Do the long work here&#10;            try {&#10;                Thread.sleep(1000);&#10;            } catch (InterruptedException e) {&#10;                // TODO Auto-generated catch block&#10;                e.printStackTrace();&#10;            }&#10;&#10;            android.util.Log.d(TAG, params[i]);&#10;            &#10;            publishProgress((int) ((i / (float) count) * 100));&#10;&#9;&#9;&#9;// Escape early if cancel() is called&#10;&#9;&#9;&#9;if (isCancelled()) break;&#10;&#9;&#9;}&#10;&#9;&#9;return totalSize;&#10;&#9;}&#10;&#10;&#9;protected void onProgressUpdate(Integer... progress) {&#10;&#9;&#9;// invoked on the UI thread after a call to publishProgress(Progress...)&#10;&#9;&#9;// TODO setProgressPercent(progress[0]);&#10;        android.widget.Toast.makeText(getApplicationContext(), getText(R.string.app_name) + &quot; &quot; + Integer.toString(progress[0]), Toast.LENGTH_SHORT).show();&#10;&#9;}&#10;&#10;&#9;protected void onPostExecute(Long result) {&#10;&#9;&#9;// TODO invoked on the UI thread after the background computation finishes&#10;&#9;}&#10;}&#10;&#9; &#10;// Once created, a task is executed very simply:&#10;// TODO : put in onCreate for example&#10;// new LongRunTask().execute(&quot;String1&quot;, &quot;String2&quot;, &quot;String3&quot;);" description="AsyncTaskTemplate." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_toast" value="android.widget.Toast.makeText($context$, getText(R.string.$text$), Toast.LENGTH_SHORT).show();" description="Display a Toast." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="variableOfType(&quot;android.content.Context&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_sleep" value="// Execute delayed code&#10;android.os.Handler handler = new Handler(); &#10;    handler.postDelayed(new Runnable() {&#10;         @Override &#10;         public void run() { &#10;              $END$ &#10;         } &#10;    }, $time_to_sleep$);" description="Sleep for some time." toReformat="true" toShortenFQNames="true">
    <variable name="time_to_sleep" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_async_task" value="// AsyncTask&lt;Params, Progress, Result&gt;&#10;private class $taskName$Task extends android.os.AsyncTask&lt;$typeParams$, $typeProgress$, $typeResult$&gt; {&#10;&#10;    protected void onPreExecute(){&#10;        // TODO : Launched UI thread before the task is executed =&gt; Display a progress bar&#10;    }&#10;&#10;    protected $typeResult$ doInBackground($typeParams$... params) {&#10;        int count = params.length;&#10;        long totalSize = 0;&#10;        for (int i = 0; i &lt; count; i++) {&#10;&#10;            android.util.Log.d(TAG, params[i]);&#10;&#10;            publishProgress(($typeProgress$) $valueProgress$);&#10;&#10;            // Escape early if cancel() is called&#10;            if (isCancelled()) break;&#10;        }&#10;        return totalSize;&#10;    }&#10;&#10;    protected void onProgressUpdate($typeProgress$... progress) {&#10;        // invoked on the UI thread after a call to publishProgress(Progress...)&#10;        // TODO : Do something with the $typeProgress$ progress[0]&#10;    }&#10;&#10;    protected void onPostExecute($typeResult$ result) {&#10;        // TODO invoked on the UI thread after the background computation finishes&#10;    }&#10;}&#10;&#10;// Once created, a task is executed very simply:&#10;// TODO : put in onCreate for example&#10;// new $taskName$Task().execute( ($typeParams$) value1, ($typeParams$) value2, ($typeParams$) value3 );" description="AsyncTaskTemplate." toReformat="true" toShortenFQNames="true">
    <variable name="taskName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="typeParams" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="typeProgress" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="typeResult" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="valueProgress" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_bitmap_crop_square" value="private android.graphics.Bitmap cropSquare(Bitmap srcBmp) {&#10;    Bitmap dstBmp;&#10;&#10;    if (srcBmp.getWidth() &gt;= srcBmp.getHeight()){&#10;&#10;        dstBmp = Bitmap.createBitmap(&#10;                srcBmp,&#10;                srcBmp.getWidth()/2 - srcBmp.getHeight()/2,&#10;                0,&#10;                srcBmp.getHeight(),&#10;                srcBmp.getHeight()&#10;        );&#10;&#10;    }else{&#10;&#10;        dstBmp = Bitmap.createBitmap(&#10;                srcBmp,&#10;                0,&#10;                srcBmp.getHeight()/2 - srcBmp.getWidth()/2,&#10;                srcBmp.getWidth(),&#10;                srcBmp.getWidth()&#10;        );&#10;    }&#10;    return dstBmp;&#10;}" description="Write a method that crop a bitmap into square bitmap." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_bitmap_file_open" value="//The new size we want to scale to&#10;// TODO : move to the field class &#10;final int REQUIRED_SIZE=70;&#10;&#10;/**&#10;* Method to decode image and scales it to reduce memory consumption&#10;*/&#10;private android.graphics.Bitmap decodeFile(java.io.File f){&#10;    try {&#10;        //Decode image size&#10;        android.graphics.BitmapFactory.Options o = new BitmapFactory.Options();&#10;        o.inJustDecodeBounds = true;&#10;        BitmapFactory.decodeStream(new java.io.FileInputStream(f),null,o);&#10;&#10;        //Find the correct scale value. It should be the power of 2.&#10;        int scale=1;&#10;        while(o.outWidth/scale/2&gt;=REQUIRED_SIZE &amp;&amp; o.outHeight/scale/2&gt;=REQUIRED_SIZE)&#10;            scale*=2;&#10;&#10;        //Decode with inSampleSize&#10;        BitmapFactory.Options o2 = new BitmapFactory.Options();&#10;        o2.inSampleSize=scale;&#10;        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);&#10;    } catch (java.io.FileNotFoundException e) {}&#10;    return null;&#10;}" description="Open and decode a bitmap file saving memory." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_bitmap_get_file_size" value="android.graphics.BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();&#10;bitmapOptions.inJustDecodeBounds = true;&#10;// BitmapFactory.decodeFile(String pathName, BitmapFactory.Options opts)&#10;BitmapFactory.decodeFile($pathName$ , bitmapOptions);&#10;int imageWidth = bitmapOptions.outWidth;&#10;int imageHeight = bitmapOptions.outHeight;&#10;&#10;$END$" description="Get bitmap file size without loading it." toReformat="true" toShortenFQNames="true">
    <variable name="pathName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_button" value="android.widget.Button m$buttonname$Button = (Button) findViewById(R.id.$buttonId$);&#10;m$buttonname$Button.setOnClickListener(new android.view.View.OnClickListener() {&#10;    public void onClick(View v) {&#10;        // TODO : write onClick method &#10;        $END$&#10;    }&#10;});" description="Short way to manage button." toReformat="true" toShortenFQNames="true">
    <variable name="buttonId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="buttonname" expression="capitalize(underscoresToCamelCase(buttonId))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_crypto_md5" value="public static final String md5(final String s) {&#10;    final String MD5 = &quot;MD5&quot;;&#10;    try {&#10;        // Create MD5 Hash&#10;        java.security.MessageDigest digest = java.security.MessageDigest.getInstance(MD5);&#10;        digest.update(s.getBytes());&#10;        byte messageDigest[] = digest.digest();&#10;&#10;        // Create Hex String&#10;        StringBuilder hexString = new StringBuilder();&#10;        for (byte aMessageDigest : messageDigest) {&#10;            String h = Integer.toHexString(0xFF &amp; aMessageDigest);&#10;            while (h.length() &lt; 2)&#10;                h = &quot;0&quot; + h;&#10;            hexString.append(h);&#10;        }&#10;        return hexString.toString();&#10;&#10;    } catch (java.security.NoSuchAlgorithmException e) {&#10;        e.printStackTrace();&#10;    }&#10;    return &quot;&quot;;&#10;}" description="Method to calculate MD5." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_equals" value="@Override&#10;public boolean equals(Object object) {&#10;&#9;boolean sameSame = false;&#10;&#10;&#9;if (object != null &amp;&amp; object instanceof $primary_type_name$) {&#10;&#9;&#9;sameSame = this.field == (($primary_type_name$) object).field;&#10;&#9;}&#10;&#9;return sameSame;&#10;}" description="Define the equals method (to compare 2 objects)." toReformat="true" toShortenFQNames="true">
    <variable name="primary_type_name" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_eventbus_myfragment" value="@Override&#10;public void onCreate(android.os.Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;    org.greenrobot.eventbus.EventBus.getDefault().register($className$.this);&#10;}&#10;&#10;@Override&#10;public void onDestroy () {&#10;    EventBus.getDefault().unregister($className$.this);&#10;    super.onDestroy();&#10;}" description="Handle EventBus in the MyFragment class." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_copy" value="public void copy(java.io.File src, File dst) throws java.io.IOException {&#10;    java.io.InputStream in = new java.io.FileInputStream(src);&#10;    java.io.OutputStream out = new java.io.FileOutputStream(dst);&#10;&#10;    // Transfer bytes from in to out&#10;    byte[] buf = new byte[1024];&#10;    int len;&#10;    while ((len = in.read(buf)) &gt; 0) {&#10;        out.write(buf, 0, len);&#10;    }&#10;    in.close();&#10;    out.close();&#10;}" description="Method to copy files." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_external_read" value="private void readFileFromSDCard() {&#10;    java.io.File directory = android.os.Environment.getExternalStorageDirectory();&#10;  // Assumes that a file article.rss is available on the SD card&#10;  File file = new File(directory + &quot;/article.rss&quot;);&#10;  if (!file.exists()) {&#10;    throw new RuntimeException(&quot;File not found&quot;);&#10;  }&#10;  android.util.Log.d(&quot;Testing&quot;, &quot;Starting to read&quot;);&#10;    java.io.BufferedReader reader = null;&#10;  try {&#10;    reader = new BufferedReader(new java.io.FileReader(file));&#10;    StringBuilder builder = new StringBuilder();&#10;    String line;&#10;    while ((line = reader.readLine()) != null) {&#10;      builder.append(line);&#10;    }&#10;  } catch (Exception e) {&#10;    e.printStackTrace();&#10;  } finally {&#10;    if (reader != null) {&#10;      try {&#10;        reader.close();&#10;      } catch (java.io.IOException e) {&#10;        e.printStackTrace();&#10;      }&#10;    }&#10;  }&#10;}" description="Read a file from an external storage." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_read" value="private void readFileFromInternalStorage() {&#10;    String eol = System.getProperty(&quot;line.separator&quot;);&#10;    BufferedReader input = null;&#10;    try {&#10;        input = new java.io.BufferedReader(new java.io.InputStreamReader(openFileInput(&quot;myfile&quot;)));&#10;        String line;&#10;        StringBuffer buffer = new StringBuffer();&#10;        while ((line = input.readLine()) != null) {&#10;            buffer.append(line + eol);&#10;        }&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    } finally {&#10;        if (input != null) {&#10;            try {&#10;                input.close();&#10;            } catch (java.io.IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;}" description="Read a file." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_temp_create" value="java.io.File outputDir = getApplicationContext().getCacheDir(); // context being the Activity pointer&#10;File outputFile = File.createTempFile(&quot;prefix&quot;, &quot;extension&quot;, outputDir);" description="Create a temporary file that will be deleted when application exit." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_write" value="private void writeFileToInternalStorage() {&#10;    String eol = System.getProperty(&quot;line.separator&quot;);&#10;    java.io.BufferedWriter writer = null;&#10;    try {&#10;        writer =&#10;                new BufferedWriter(new java.io.OutputStreamWriter(openFileOutput(&quot;myfile&quot;,&#10;                        MODE_WORLD_WRITEABLE)));&#10;        writer.write(&quot;This is a test1.&quot; + eol);&#10;        writer.write(&quot;This is a test2.&quot; + eol);&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    } finally {&#10;        if (writer != null) {&#10;            try {&#10;                writer.close();&#10;            } catch (java.io.IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;}" description="Write a file." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_file_write_bitmap" value="try {&#10;    java.io.FileOutputStream out = new FileOutputStream($fileName$);&#10;    $bmp$.compress(Bitmap.CompressFormat.PNG, 90, out);&#10;} catch (Exception e) {&#10;       e.printStackTrace();&#10;}" description="Write a Bitmap to a file." toReformat="true" toShortenFQNames="true">
    <variable name="fileName" expression="suggestFirstVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="bmp" expression="suggestFirstVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_fragment" value="private $className$Listener mListener;&#10;&#10;public static interface $className$Listener {&#10;&#9;public abstract void onActionDone();&#10;}&#10;&#10;/**&#10;* Usage in activity : $className$.newInstance(10);&#10;*/&#10;public static $className$ newInstance(int someInt) {&#10;    $className$ myFragment = new $className$();&#10;&#10;    android.os.Bundle args = new Bundle();&#10;    args.putInt(&quot;someInt&quot;, someInt);&#10;    myFragment.setArguments(args);&#10;&#10;&#9;// USAGE in the fragment :&#10;&#9;// getArguments().getInt(&quot;someInt&quot;, 0);&#10;&#9;&#10;    return myFragment;&#10;}&#10;&#10;// Check that the calling activity is handeling this kind of fragment.&#10;@Override&#10;public void onAttach(android.app.Activity activity) {&#10;&#9;try {&#10;&#9;&#9;this.mListener = ($className$Listener)activity;&#10;&#9;}&#10;&#9;catch (final ClassCastException e) {&#10;&#9;&#9;throw new ClassCastException(activity.toString() + &quot; must implement $className$Listener&quot;);&#10;&#9;}&#10;&#9;super.onAttach(activity);&#10;}&#10;&#10;// USAGE in the calling activity:&#10;// ADD implements $className$Listener&#10;// It'll add the method :&#10;// @Override&#10;// public void onActionDone() {&#10;// }" description="Add the needed method for good fragments." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_hide_keyboard" value="// Remove the soft keyboard&#10;android.view.inputmethod.InputMethodManager mgr = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);&#10;// TODO : Provide view from layout&#10;mgr.hideSoftInputFromWindow($viewName$.getWindowToken(), 0);&#10;" description="Hide the soft keyboard." toReformat="true" toShortenFQNames="true">
    <variable name="viewName" expression="suggestFirstVariableName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_icon_application_badge" value="// FOR SONY DEVIVES&#10;// Source : http://marcusforsberg.net/blog/android-notification-badge-app-icon-sony/&#10;// Sony devices use a class named BadgeReciever.&#10;// Declare the com.sonyericsson.home.permission.BROADCAST_BADGE permission in your manifest file:&#10;//&#10;// Broadcast an Intent to the BadgeReceiver:&#10;&#10;Intent intent = new Intent();&#10;&#10;intent.setAction(&quot;com.sonyericsson.home.action.UPDATE_BADGE&quot;);&#10;intent.putExtra(&quot;com.sonyericsson.home.intent.extra.badge.ACTIVITY_NAME&quot;, &quot;com.yourdomain.yourapp.MainActivity&quot;);&#10;intent.putExtra(&quot;com.sonyericsson.home.intent.extra.badge.SHOW_MESSAGE&quot;, true);&#10;intent.putExtra(&quot;com.sonyericsson.home.intent.extra.badge.MESSAGE&quot;, &quot;99&quot;);&#10;intent.putExtra(&quot;com.sonyericsson.home.intent.extra.badge.PACKAGE_NAME&quot;, &quot;com.yourdomain.yourapp&quot;);&#10;&#10;sendBroadcast(intent);&#10;&#10;// Done. Once this Intent is broadcast the launcher should show a badge on your application icon.&#10;&#10;//To remove the badge again, simply send a new broadcast, this time with SHOW_MESSAGE set to false:&#10;&#10;intent.putExtra(&quot;com.sonyericsson.home.intent.extra.badge.SHOW_MESSAGE&quot;, false);&#10;&#10;&#10;// FOR SAMSUNG DEVICES&#10;// Source : https://github.com/shafty023/AndroidBadger&#10;//First you'll need to add the following permissions to your AndroidManifest.xml file.&#10;&#10;&lt;uses-permission android:name=&quot;com.sec.android.provider.badge.permission.READ&quot; /&gt;&#10;&lt;uses-permission android:name=&quot;com.sec.android.provider.badge.permission.WRITE&quot; /&gt;&#10;&#10;//In order to query ALL results from the BadgeProvider do the following:&#10;&#10;// This is the content uri for the BadgeProvider&#10;Uri uri = Uri.parse(&quot;content://com.sec.badge/apps&quot;);&#10;&#10;Cursor c = getContentResolver().query(uri, null, null, null, null);&#10;&#10;// This indicates the provider doesn't exist and you probably aren't running&#10;// on a Samsung phone running TWLauncher. This has to be outside of try/finally block&#10;if (c == null) {&#10;    return;&#10;}&#10;&#10;try {&#10;    if (!c.moveToFirst()) {&#10;        // No results. Nothing to query&#10;        return;&#10;    }&#10;&#10;    c.moveToPosition(-1);&#10;    while (c.moveToNext()) {&#10;        String pkg = c.getString(1);&#10;        String clazz = c.getString(2);&#10;        int badgeCount = c.getInt(3);&#10;        Log.d(&quot;BadgeTest&quot;, &quot;package: &quot; + pkg + &quot;, class: &quot; + clazz + &quot;, count: &quot; + String.valueOf(cnt));&#10;    }&#10;} finally {&#10;    c.close();&#10;}&#10;&#10;// In order to add a badge count to your application icon&#10;&#10;ContentValues cv = new ContentValues();&#10;cv.put(&quot;package&quot;, getPackageName());&#10;// Name of your activity declared in the manifest as android.intent.action.MAIN.&#10;// Must be fully qualified name as shown below&#10;cv.put(&quot;class&quot;, &quot;com.example.badge.activity.Test&quot;);&#10;cv.put(&quot;badgecount&quot;, 1); // integer count you want to display&#10;&#10;// Execute insert&#10;getContentResolver().insert(Uri.parse(&quot;content://com.sec.badge/apps&quot;), cv);&#10;&#10;// If you want to clear the badge count on your icon&#10;&#10;ContentValues cv = new ContentValues();&#10;cv.put(&quot;badgecount&quot;, 0);&#10;getContentResolver().update(Uri.parse(&quot;content://com.sec.badge/apps&quot;), cv, &quot;package=?&quot;, new String[] {getPackageName()});" description="Add a badge on the application icon." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="and_intent_activity" value="android.content.Intent intent = new Intent($context$, $target$.class );&#10;//        Bundle b = new Bundle();&#10;//&#10;// First way to do&#10;// b.putByte(Constants.INTENT_PARAMS_BYTE, (byte) 1);&#10;// b.putByteArray(Constants.INTENT_PARAMS_BYTE_ARRAY, new byte[1]);&#10;// b.putBoolean(Constants.INTENT_PARAMS_BOOLEAN, true);&#10;// b.putBooleanArray(Constants.INTENT_PARAMS_BOOLEAN_ARRAY, new boolean[1]);&#10;// b.putChar(Constants.INTENT_PARAMS_CHAR, 'c');&#10;// b.putCharArray(Constants.INTENT_PARAMS_CHAR_ARRAY, new char[1]);&#10;// b.putCharSequence(Constants.INTENT_PARAMS_CHAR_SEQUENCE, &quot;&quot;);&#10;// b.putCharSequenceArray(Constants.INTENT_PARAMS_CHAR_SEQUENCE_ARRAY, new CharSequence[1]);&#10;// b.putCharSequenceArrayList(Constants.INTENT_PARAMS_CHAR_SEQUENCE_ARRAY_LIST, new ArrayList&lt;CharSequence&gt;());&#10;// b.putDouble(Constants.INTENT_PARAMS_DOUBLE, (double) 1);&#10;// b.putDoubleArray(Constants.INTENT_PARAMS_DOUBLE_ARRAY, new double[1]);&#10;// b.putFloat(Constants.INTENT_PARAMS_FLOAT, (float) 1);&#10;// b.putFloatArray(Constants.INTENT_PARAMS_FLOAT_ARRAY, new float[1]);&#10;// b.putInt(Constants.INTENT_PARAMS_INT, 1);&#10;// b.putIntArray(Constants.INTENT_PARAMS_INT_ARRAY, new int[1]);&#10;// b.putIntegerArrayList(Constants.INTENT_PARAMS_INT_ARRAY_LIST, new ArrayList&lt;Integer&gt;());&#10;// b.putLong(Constants.INTENT_PARAMS_LONG, (long) 1);&#10;// b.putLongArray(Constants.INTENT_PARAMS_LONG_ARRAY, new long[1]);&#10;// b.putShort(Constants.INTENT_PARAMS_SHORT, (short) 1);&#10;// b.putShortArray(Constants.INTENT_PARAMS_SHORT_ARRAY, new short[1]);&#10;// b.putString(Constants.INTENT_PARAMS_STRING, &quot;&quot;);&#10;// b.putStringArray(Constants.INTENT_PARAMS_STRING_ARRAY, new String[1]);&#10;// b.putStringArrayList(Constants.INTENT_PARAMS_STRING_ARRAY_LIST, new ArrayList&lt;String&gt;());&#10;// intent.putExtras(b);&#10;&#10;// Second way to do&#10;// Put anything you want&#10;// intent.putExtra(Constants.INTENT_PARAMS_EXTRA_VALUE, &quot;&quot;);&#10;&#10;$launchContext$startActivity(intent);" description="Launch an intent to launch a news activity." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getApplicationContext()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="target" expression="" defaultValue="TargetActivity" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_is_available" value="public static boolean isIntentAvailable(android.content.Context ctx, android.content.Intent intent) {&#10;    final android.content.pm.PackageManager mgr = ctx.getPackageManager();&#10;    java.util.List&lt;android.content.pm.ResolveInfo&gt; list = mgr.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);&#10;    return list.size() &gt; 0;&#10;}&#10;" description="Function isIntentAvailable to check if the intent is available before using it." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_mail" value="String[] emailList = { &quot;$emailReceiver$&quot; };&#10;&#10;final android.content.Intent emailIntent = new Intent(Intent.ACTION_SEND);&#10;emailIntent.setType(&quot;plain/text&quot;);&#10;emailIntent.putExtra(Intent.EXTRA_SUBJECT, &quot;$subject$&quot;);&#10;emailIntent.putExtra(Intent.EXTRA_TEXT, &quot;$emailContent$&quot;);&#10;emailIntent.putExtra(Intent.EXTRA_EMAIL, emailList);&#10;// TODO : Choose the one you want : emailIntent.putExtra(Intent.EXTRA_CC, emailList);&#10;// TODO : Choose the one you want : emailIntent.putExtra(Intent.EXTRA_BCC, emailList);&#10;try {&#10;&#9;startActivity(Intent.createChooser(emailIntent, getResources().getString(R.string.$emailShareTitleId$)));&#10;} catch (android.content.ActivityNotFoundException ex) {&#10;    android.widget.Toast.makeText($context$, R.string.$emailShareErrorNoClientId$, Toast.LENGTH_SHORT).show();&#10;}&#10;&#10;" description="Launch an intent to send a mail." toReformat="true" toShortenFQNames="true">
    <variable name="emailReceiver" expression="" defaultValue="&quot;test@test.com&quot;" alwaysStopAt="true" />
    <variable name="subject" expression="" defaultValue="&quot;SUBJECT&quot;" alwaysStopAt="true" />
    <variable name="emailContent" expression="" defaultValue="&quot;TEXT MAIL&quot;" alwaysStopAt="true" />
    <variable name="emailShareTitleId" expression="" defaultValue="&quot;email_share_title&quot;" alwaysStopAt="true" />
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getApplicationContext()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="emailShareErrorNoClientId" expression="" defaultValue="&quot;email_share_error_no_client&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_map" value="// To display the map centered at the position&#10;// geo:latitude,longitude&#10;// geo:latitude,longitude?z=zoom&#10;// geo:0,0?q=my+street+address&#10;// geo:0,0?q=business+near+city&#10;// String uri = &quot;geo:0,0?q=&quot; + URLEncoder.encode(sb.toString(), &quot;UTF-8&quot;);&#10;&#10;// To display the marker&#10;String uri = &quot;http://maps.google.com/maps?q=&quot; + $latitude$ + ',' + $longitude$ + &quot;(&quot; + $description$ +&quot;)&amp;z=$zoonValue$&quot;;&#10;&#10;android.content.Intent intent = new Intent(Intent.ACTION_VIEW, android.net.Uri.parse(uri));&#10;intent.setClassName(&quot;com.google.android.apps.maps&quot;, &quot;com.google.android.maps.MapsActivity&quot;);&#10;startActivity(intent);&#10;&#10;" description="Launch an intent to open a goole map." toReformat="true" toShortenFQNames="true">
    <variable name="latitude" expression="" defaultValue="&quot;latitude&quot;" alwaysStopAt="true" />
    <variable name="longitude" expression="" defaultValue="&quot;longitude&quot;" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="&quot;description&quot;" alwaysStopAt="true" />
    <variable name="zoonValue" expression="" defaultValue="&quot;15&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_open_image" value="android.content.Intent intent = new Intent();&#10;intent.setAction(Intent.ACTION_VIEW);&#10;intent.setDataAndType(android.net.Uri.parse(&quot;file://&quot; + &quot;$filePath$&quot;), &quot;image/*&quot;);&#10;startActivity(intent);&#10;&#10;" description="Launch an intent to open an image in the gallery." toReformat="true" toShortenFQNames="true">
    <variable name="filePath" expression="" defaultValue="&quot;/sdcard/test.jpg&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_phone_call" value="// TODO : Add &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt; permission in the Manifest file.&#10;String url = &quot;tel:&quot;+&quot;$phoneNumber$&quot;;&#10;android.content.Intent callIntent = new Intent(Intent.ACTION_CALL, android.net.Uri.parse(url));&#10;startActivity(callIntent);&#10;&#10;" description="Launch an intent to make a phone call." toReformat="true" toShortenFQNames="true">
    <variable name="phoneNumber" expression="" defaultValue="&quot;0612345678&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_share_sound" value="String sharePath = $filePath$;&#10;android.net.Uri uri = Uri.parse(sharePath);&#10;android.content.Intent share = new Intent(Intent.ACTION_SEND);&#10;share.setType(&quot;audio/*&quot;);&#10;share.putExtra(Intent.EXTRA_STREAM, uri);&#10;startActivity(Intent.createChooser(share, &quot;$label$&quot;));&#10;&#10;" description="Launch an intent to share a sound." toReformat="true" toShortenFQNames="true">
    <variable name="filePath" expression="" defaultValue="&quot;android.os.Environment.getExternalStorageDirectory().getPath() + \&quot;/Soundboard/Ringtones/custom_ringtone.ogg\&quot;&quot;" alwaysStopAt="true" />
    <variable name="label" expression="" defaultValue="&quot;Share Sound File&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_sms" value="// Need android.permission.SEND_SMS permission&#10;android.net.Uri uri = Uri.parse(&quot;smsto:&quot; + $smsNumber$);&#10;android.content.Intent intent = new Intent(Intent.ACTION_SENDTO, uri);&#10;intent.putExtra(&quot;sms_body&quot;, $smsMessage$;  &#10;startActivity(intent);&#10;&#10;" description="Launch an intent to send a sms." toReformat="true" toShortenFQNames="true">
    <variable name="smsNumber" expression="" defaultValue="&quot;getResources().getText(R.string.sms_phone_number)&quot;" alwaysStopAt="true" />
    <variable name="smsMessage" expression="" defaultValue="&quot;getResources().getText(R.string.dedicasse_default_message))&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_web" value="android.content.Intent browserIntent = new Intent(Intent.ACTION_VIEW, android.net.Uri.parse(&quot;http://$urlValue$&quot;));&#10;startActivity(browserIntent);&#10;&#10;" description="Launch an intent to browse a website." toReformat="true" toShortenFQNames="true">
    <variable name="urlValue" expression="" defaultValue="&quot;google.com&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_lifecycle_activity" value="// START PROCESS&#10;@Override&#10;public void onStart() {&#10;    super.onStart();&#10;    if (BuildConfig.DEBUG) {&#10;        android.util.Log.d(TAG, &quot;onStart &quot;);&#10;    }&#10;}&#10;&#10;@Override&#10;public void onResume() {&#10;    super.onResume();&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onResume &quot;);&#10;    }&#10;}&#10;&#10;@Override&#10;protected void onRestart() {&#10;    super.onRestart();&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onRestart &quot;);&#10;    }&#10;};&#10;&#10;// DESTROY PROCESS&#10;@Override&#10;public void onPause() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onPause &quot;);&#10;    }&#10;    super.onPause();&#10;}&#10;&#10;&#10;@Override&#10;public void onStop() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onStop &quot;);&#10;    }&#10;    super.onStop();&#10;}&#10;&#10;@Override&#10;public void onDestroy() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onDestroy &quot;);&#10;    }&#10;    super.onDestroy();&#10;}" description="Implement all the methods of the life cycle of an Activity." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_lifecycle_fragment" value="// START PROCESS&#10;@Override&#10;public void onAttach(android.app.Activity activity) {&#10;    super.onAttach(activity);&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onAttach &quot;);&#10;    }&#10;};&#10;&#10;@Override&#10;public void onCreate(Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        android.util.Log.d(TAG, &quot;onCreate &quot;);&#10;    }&#10;};&#10;&#10;@Override&#10;public android.view.View onCreateView(android.view.LayoutInflater inflater, android.view.ViewGroup container, android.os.Bundle savedInstanceState) {&#10;    View rootView = super.onCreateView(inflater, container, savedInstanceState);&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onCreateView &quot;);&#10;    }&#10;&#10;    return rootView;&#10;}&#10;&#10;@Override&#10;public void onActivityCreated(Bundle savedInstanceState) {&#10;    super.onActivityCreated(savedInstanceState);&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onActivityCreated &quot;);&#10;    }&#10;};&#10;&#10;&#10;@Override&#10;public void onStart() {&#10;    super.onStart();&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onStart &quot;);&#10;    }&#10;};&#10;&#10;@Override&#10;public void onResume() {&#10;    super.onResume();&#10;&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onResume &quot;);&#10;    }&#10;};&#10;&#10;// DESTROY PROCESS&#10;&#10;@Override&#10;public void onPause() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onPause &quot;);&#10;    }&#10;    super.onPause();&#10;};&#10;&#10;@Override&#10;public void onStop() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onStop &quot;);&#10;    }&#10;    super.onStop();&#10;}&#10;&#10;@Override&#10;public void onDestroyView() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onDestroyView &quot;);&#10;    }&#10;    super.onDestroyView();&#10;}&#10;&#10;&#10;@Override&#10;public void onDestroy() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onDestroy &quot;);&#10;    }&#10;    super.onDestroy();&#10;}&#10;&#10;@Override&#10;public void onDetach() {&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onDetach &quot;);&#10;    }&#10;    super.onDetach();&#10;}&#10;" description="Implement all the methods of the life cycle of a Fragment." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_log" value="if(BuildConfig.DEBUG){&#10;    android.util.Log.d(TAG, &quot;$methodName$ $messageValue$&quot;);&#10;}&#10;" description="Debug log." toReformat="true" toShortenFQNames="true">
    <variable name="methodName" expression="methodName()" defaultValue="" alwaysStopAt="true" />
    <variable name="messageValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_menu_activity" value="@Override&#10;public boolean onCreateOptionsMenu(android.view.Menu menu) {&#10;    // Inflate the menu; this adds items to the action bar if it is present.&#10;    getMenuInflater().inflate(R.menu.$menuMainId$, menu);&#10;    return true;&#10;}&#10;&#10;@Override&#10;public boolean onOptionsItemSelected(android.view.MenuItem item) {&#10;    // Handle action bar item clicks here. The action bar will&#10;    // automatically handle clicks on the Home/Up button, so long&#10;    // as you specify a parent activity in AndroidManifest.xml.&#10;&#10;    switch (item.getItemId()) {&#10;        case R.id.$menuItemId$:&#10;&#10;            return true;&#10;        break;&#10;&#10;        default:&#10;            return super.onOptionsItemSelected(item);&#10;        break;&#10;    }&#10;}" description="Manage the menu in an activity." toReformat="true" toShortenFQNames="true">
    <variable name="menuMainId" expression="" defaultValue="&quot;main&quot;" alwaysStopAt="true" />
    <variable name="menuItemId" expression="" defaultValue="&quot;action_settings&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_network_policy_remove" value="// FIXME For debug only : should be removed in real application&#10;if (android.os.Build.VERSION.SDK_INT &gt; 9) {&#10;    android.os.StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();&#10;    StrictMode.setThreadPolicy(policy);&#10;}" description="Allow network access in main thread. FOR DEMO USE ONLY." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_onCreate" value="if(savedInstanceState != null){&#10;&#9;value = savedInstanceState.getInt(Constants.INTENT_PARAMS_EXTRA_VALUE);&#10;}else{&#10;&#9;//get the Bundle out of the Intent...&#10;&#9;Bundle extras = getIntent().getExtras();&#10;&#9;value = (extras != null) ? extras.getInt(Constants.INTENT_PARAMS_EXTRA_VALUE) : -1;&#10;}" description="Manage the Intent parameters." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_only_me" value="if (BuildConfig.DEBUG) {&#10;    android.util.Log.d(TAG, &quot;DEVICE ID = &quot; + android.provider.Settings.Secure.getString($context$.getContentResolver(), Settings.Secure.ANDROID_ID));&#10;}&#10;&#10;if( Settings.Secure.getString($context$.getContentResolver(), Settings.Secure.ANDROID_ID).equals(&quot;$deviceNId$&quot;)){&#10;&#9;$END$&#10;}" description="Execute code only for me (debug mode)." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getApplicationContext()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="deviceNId" expression="" defaultValue="&quot;aaaaaaaaaaaaaaaa&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_onSaveInstanceState" value="@Override&#10;protected void onSaveInstanceState(Bundle outState) {&#10;&#9;outState.putInt(Constants.INTENT_PARAMS_VALUE, value);&#10;&#9;super.onSaveInstanceState(outState);&#10;}" description="Generate a generic onSaveInstanceState function." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_SharedPreferences_load" value="android.content.SharedPreferences sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(getApplicationContext());&#10;int defaultValue = getResources().getInteger(R.string.saved_high_score_default);&#10;sharedPref.getInt(Constants.SHARED_PREFS_VALUE, defaultValue);" description="Load value from SharedPreferences." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_SharedPreferences_save" value="android.content.SharedPreferences sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(getApplicationContext());&#10;SharedPreferences.Editor editor = sharedPref.edit();&#10;editor.putString(Constants.SHARED_PREFS_CURRENT_USER,&quot;Value&quot;);&#10;editor.commit();" description="Save key-value into SharedPreferences." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_simple_date_format" value="java.text.SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMdd_HHmmss&quot;, java.util.Locale.FRANCE);&#10;String dateString = sdf.format(new java.util.Date());&#10;" description="Exemple of how to use SimpleDateFormat class." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_singleton" value="// Instance of the current class&#10;private static $className$ instance;&#10;&#10;// Default constructor made private&#10;private $className$(){&#10;    // TODO Auto-generated method stub&#10;}&#10;&#10;public static $className$ getInstance(){&#10;    if(instance == null){&#10;        instance = new $className$();&#10;    }&#10;    return instance;&#10;}&#10;&#10;" description="Code to insert in a class to transform it to a Singleton Class." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_spinner_array" value="/* TODO: In the layout: add:&#10;&lt;Spinner&#10;android:id=&quot;@+id/spinner&quot;&#10;android:layout_width=&quot;match_parent&quot;&#10;android:layout_height=&quot;wrap_content&quot;/&gt;&#10; */&#10;&#10;String[] itemList = {&quot;String 1&quot;, &quot;String 2&quot;, &quot;String 3&quot;};&#10;&#10;android.widget.Spinner spinner = (Spinner) findViewById(R.id.spinner);&#10;// Create an ArrayAdapter using the string array and a default spinner layout&#10;android.widget.ArrayAdapter&lt;CharSequence&gt; adapter = new ArrayAdapter&lt;CharSequence&gt;(this, android.R.layout.simple_spinner_item, itemList);&#10;// TODO : For custom layout : define layout : spinner_item_text&#10;// ArrayAdapter&lt;CharSequence&gt; adapter = new ArrayAdapter&lt;CharSequence&gt;(this, R.layout.spinner_item_text, itemList);&#10;&#10;// Specify the layout to use when the list of choices appears&#10;adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;// TODO : For custom layout : define layout : spinner_dropdown_item&#10;//adapter.setDropDownViewResource(R.layout.spinner_dropdown_item);&#10;&#10;// Apply the adapter to the spinner&#10;spinner.setAdapter(adapter);&#10;&#10;spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener() {&#10;&#10;    @Override&#10;    public void onItemSelected(AdapterView&lt;?&gt; parent, android.view.View view, int pos, long id) {&#10;        // TODO Auto-generated method stub&#10;        android.util.Log.v(TAG, &quot;$enclosing_method$ &quot; + pos + &quot; =&gt; &quot; + itemList[pos]);&#10;    }&#10;});&#10;" description="Manage a spinner from a String[]." toReformat="true" toShortenFQNames="true">
    <variable name="enclosing_method" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_spinner_string_array" value="/* TODO: In the layout: add:&#10;&lt;Spinner&#10;android:id=&quot;@+id/spinner&quot;&#10;android:layout_width=&quot;match_parent&quot;&#10;android:layout_height=&quot;wrap_content&quot;/&gt;&#10; */&#10;&#10;/*&#10;TODO: In ressources file:&#10;In ressources file:&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string-array name=&quot;planets_array&quot;&gt;&#10;        &lt;item&gt;Mercury&lt;/item&gt;&#10;        &lt;item&gt;Venus&lt;/item&gt;&#10;        &lt;item&gt;Earth&lt;/item&gt;&#10;        &lt;item&gt;Mars&lt;/item&gt;&#10;        &lt;item&gt;Jupiter&lt;/item&gt;&#10;        &lt;item&gt;Saturn&lt;/item&gt;&#10;        &lt;item&gt;Uranus&lt;/item&gt;&#10;        &lt;item&gt;Neptune&lt;/item&gt;&#10;    &lt;/string-array&gt;&#10;&lt;/resources&gt;&#10;*/&#10;&#10;android.widget.Spinner spinner = (Spinner) findViewById(R.id.spinner);&#10;// Create an ArrayAdapter using the string array and a default spinner layout&#10;android.widget.ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(this, R.array.planets_array, android.R.layout.simple_spinner_item);&#10;// Specify the layout to use when the list of choices appears&#10;adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;// Apply the adapter to the spinner&#10;spinner.setAdapter(adapter);&#10;&#10;spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener() {&#10;&#10;    @Override&#10;    public void onItemSelected(AdapterView&lt;?&gt; parent, android.view.View view, int pos, long id) {&#10;        // TODO Auto-generated method stub&#10;        android.util.Log.v(TAG, &quot;$enclosing_method$ &quot; + pos);&#10;    }&#10;});&#10;" description="Manage a spinner from a string array exemple." toReformat="true" toShortenFQNames="true">
    <variable name="enclosing_method" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_tempate_destructor" value="&#9;if(BuildConfig.DEBUG){&#10;&#9;&#9;Log.d(TAG, &quot;$methodName$&quot;);&#10;&#9;}&#10;&#9;super.$methodName$($methodParameters$);" description="Template code to add to desctructor methods like on pause, on stop ..." toReformat="true" toShortenFQNames="true">
    <variable name="methodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodParameters" expression="groovyScript(_1.join(', '), methodParameters())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_template_constructor" value="    super.$methodName$($methodParameters$);&#10;    &#10;    if(BuildConfig.DEBUG){&#10;        Log.d(TAG, &quot;$methodName$&quot;);&#10;    }&#10;" description="Template code to add to constructor methods like onResume, onStart, ..." toReformat="true" toShortenFQNames="true">
    <variable name="methodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodParameters" expression="groovyScript(_1.join(', '), methodParameters())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_time_current_display" value="String currentDateTimeString = java.text.DateFormat.getDateTimeInstance().format(new java.util.Date());&#10;&#10;// textView is the TextView view that should display it&#10;$textView$.setText(currentDateTimeString);&#10;" description="Display the current date in a textView." toReformat="true" toShortenFQNames="true">
    <variable name="textView" expression="suggestFirstVariableName()" defaultValue="&quot;textView&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_titleBar_fullScreen" value="// PUT in Constants Class&#10;&#9;public final static String SHARED_PREFS_DISPLAY_TITLE_BAR = &quot;settings_display_title_bar&quot;;&#10;&#9;public final static String SHARED_PREFS_DISPLAY_NOTIFICATION_BAR = &quot;settings_display_notification_bar&quot;;&#10;&#9;&#10;&#9;public final static boolean SHARED_PREFS_DISPLAY_TITLE_BAR_DEFAULT_VALUE = true;&#10;&#9;public final static boolean SHARED_PREFS_DISPLAY_NOTIFICATION_BAR_DEFAULT_VALUE = true;&#10;&#9;&#9;&#10;&#9;&#9;SharedPreferences mPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());&#10;&#10;&#9;&#9;//Remove title bar&#10;&#9;&#9;if(!mPreferences.getBoolean(Constants.SHARED_PREFS_DISPLAY_TITLE_BAR, Constants.SHARED_PREFS_DISPLAY_TITLE_BAR_DEFAULT_VALUE )){&#10;&#9;&#9;&#9;this.requestWindowFeature(Window.FEATURE_NO_TITLE);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;//Remove notification bar&#10;&#9;&#9;if(!mPreferences.getBoolean(Constants.SHARED_PREFS_DISPLAY_NOTIFICATION_BAR, Constants.SHARED_PREFS_DISPLAY_NOTIFICATION_BAR_DEFAULT_VALUE )){&#10;&#9;&#9;&#9;this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;&#9;&#9;}" description="Full screen and title bar management." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_full_screen_method" value="// Call with the following code&#10;// if (Build.VERSION.SDK_INT &gt;= 16) {&#10;//    hideSystemUI();&#10;//}&#10;&#10;@android.annotation.SuppressLint(&quot;NewApi&quot;)&#10;private void hideSystemUI() {&#10;    // Set the IMMERSIVE flag.&#10;    // Set the content to appear under the system bars so that the content&#10;    // doesn't resize when the system bars hide and show.&#10;    getWindow().getDecorView().setSystemUiVisibility(&#10;            android.view.View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar&#10;                    | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar&#10;                    | View.SYSTEM_UI_FLAG_IMMERSIVE);&#10;}&#10;" description="Write the method to display fullscreen activity." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_test_formation" value="// Test des variables&#10;// User name $userName$&#10;// className =&gt; $className$" description="Template with variables." toReformat="true" toShortenFQNames="true">
    <variable name="userName" expression="user()" defaultValue="" alwaysStopAt="false" />
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_returnValue" value="android.content.Intent resultIntent = new Intent();&#10;// TODO Add extras or a data URI to this intent as appropriate.&#10;resultIntent.putExtra(&quot;some_key&quot;, &quot;some_value&quot;);&#10;setResult(android.app.Activity.RESULT_OK, resultIntent);&#10;finish();" description="Return value in intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert" value="android.support.v7.app.AlertDialog.Builder builder = new AlertDialog.Builder($context$);&#10;builder.setMessage(&quot;$messageText$&quot;).setCancelable(false)&#10;        .setPositiveButton(&quot;$messagePositive$&quot;, new DialogInterface.OnClickListener() {&#10;            @Override&#10;            public void onClick(android.content.DialogInterface dialog, int which) {&#10;                // TODO : implements your code here.&#10;                $END$&#10;            }&#10;        }).setNegativeButton(&quot;$messageNegative$&quot;, new DialogInterface.OnClickListener() {&#10;&#10;    @Override&#10;    public void onClick(android.content.DialogInterface dialog, int which) {&#10;        dialog.cancel();&#10;    }&#10;});&#10;builder.create().show();" description="Display an alert Dialog." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="variableOfType(&quot;android.content.Context&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="messageText" expression="" defaultValue="&quot;Hello world!&quot;" alwaysStopAt="true" />
    <variable name="messagePositive" expression="" defaultValue="&quot;Yes&quot;" alwaysStopAt="true" />
    <variable name="messageNegative" expression="" defaultValue="&quot;Cancel&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_class_uuid" value="private static final String TAG = &quot;$className$&quot;;&#10;private static final String SHARED_PREFS_UUID = &quot;$className$&quot;;&#10;&#10;private static final $className$ ourInstance = new $className$();&#10;private String uuid;&#10;&#10;public static $className$ getInstance() {&#10;    return ourInstance;&#10;}&#10;&#10;    private $className$() {}&#10;&#10;public String getUuid(android.content.Context ctx) {&#10;    if(uuid == null || uuid.isEmpty()){ // UUID lod loaded (or not created) yet.&#10;        android.content.SharedPreferences sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(ctx);&#10;        uuid = sharedPref.getString(SHARED_PREFS_UUID, &quot;&quot;);&#10;&#10;        if(uuid == null || uuid.isEmpty()){ // If UUID never been created, then create and store&#10;            uuid = java.util.UUID.randomUUID().toString();&#10;&#10;            SharedPreferences.Editor editor = sharedPref.edit();&#10;            editor.putString(SHARED_PREFS_UUID,uuid);&#10;            editor.commit();&#10;        }&#10;    }&#10;    return uuid;&#10;}" description="Generate the code for a UniqueUUID class." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_class_FileOpen" value="public static void openFile(android.content.Context context, java.io.File url) throws java.io.IOException {&#10;&#10;    // Exemple of call :&#10;    // File myFile = new File(&quot;your any type of file url&quot;);&#10;    // FileOpen.openFile(mContext, myFile);&#10;&#10;    // Create URI&#10;    File file = url;&#10;    android.net.Uri uri = Uri.fromFile(file);&#10;&#10;    android.content.Intent intent = new Intent(Intent.ACTION_VIEW);&#10;    // Check what kind of file you are trying to open, by comparing the url with extensions.&#10;    // When the if condition is matched, plugin sets the correct intent (mime) type, &#10;    // so Android knew what application to use to open the file&#10;    if (url.toString().contains(&quot;.doc&quot;) || url.toString().contains(&quot;.docx&quot;)) {&#10;        // Word document&#10;        intent.setDataAndType(uri, &quot;application/msword&quot;);&#10;    } else if (url.toString().contains(&quot;.pdf&quot;)) {&#10;        // PDF file&#10;        intent.setDataAndType(uri, &quot;application/pdf&quot;);&#10;    } else if (url.toString().contains(&quot;.ppt&quot;) || url.toString().contains(&quot;.pptx&quot;)) {&#10;        // Powerpoint file&#10;        intent.setDataAndType(uri, &quot;application/vnd.ms-powerpoint&quot;);&#10;    } else if (url.toString().contains(&quot;.xls&quot;) || url.toString().contains(&quot;.xlsx&quot;)) {&#10;        // Excel file&#10;        intent.setDataAndType(uri, &quot;application/vnd.ms-excel&quot;);&#10;    } else if (url.toString().contains(&quot;.zip&quot;) || url.toString().contains(&quot;.rar&quot;)) {&#10;        // ZIP Files&#10;        intent.setDataAndType(uri, &quot;application/zip&quot;);&#10;    } else if (url.toString().contains(&quot;.rtf&quot;)) {&#10;        // RTF file&#10;        intent.setDataAndType(uri, &quot;application/rtf&quot;);&#10;    } else if (url.toString().contains(&quot;.wav&quot;) || url.toString().contains(&quot;.mp3&quot;)) {&#10;        // WAV audio file&#10;        intent.setDataAndType(uri, &quot;audio/x-wav&quot;);&#10;    } else if (url.toString().contains(&quot;.gif&quot;)) {&#10;        // GIF file&#10;        intent.setDataAndType(uri, &quot;image/gif&quot;);&#10;    } else if (url.toString().contains(&quot;.jpg&quot;) || url.toString().contains(&quot;.jpeg&quot;) || url.toString().contains(&quot;.png&quot;)) {&#10;        // JPG file&#10;        intent.setDataAndType(uri, &quot;image/jpeg&quot;);&#10;    } else if (url.toString().contains(&quot;.txt&quot;)) {&#10;        // Text file&#10;        intent.setDataAndType(uri, &quot;text/plain&quot;);&#10;    } else if (url.toString().contains(&quot;.3gp&quot;) || url.toString().contains(&quot;.mpg&quot;) || url.toString().contains(&quot;.mpeg&quot;) || url.toString().contains(&quot;.mpe&quot;) || url.toString().contains(&quot;.mp4&quot;) || url.toString().contains(&quot;.avi&quot;)) {&#10;        // Video files&#10;        intent.setDataAndType(uri, &quot;video/*&quot;);&#10;    } else {&#10;        //if you want you can also define the intent type for any other file&#10;&#10;        //additionally use else clause below, to manage other unknown extensions&#10;        //in this case, Android will show all applications installed on the device&#10;        //so you can choose which application to use&#10;        intent.setDataAndType(uri, &quot;*/*&quot;);&#10;    }&#10;&#10;    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&#10;    context.startActivity(intent);&#10;}" description="FileOpen : class tools to open files." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_permission_single" value="// TODO : put at the top of the class code&#10;/**&#10; * Id to identify a request $permission_description$.&#10; */&#10;private static final int REQUEST_$permission$ = 1000; // Any value can be used here&#10;&#10;private void callAction(){&#10;    if (androidx.core.content.ContextCompat.checkSelfPermission($context$,&#10;            android.Manifest.permission.$permission$)&#10;            != android.content.pm.PackageManager.PERMISSION_GRANTED) {&#10;&#10;        // Permission is not granted&#10;        // Should we show an explanation?&#10;        if (androidx.core.app.ActivityCompat.shouldShowRequestPermissionRationale($context$,&#10;                Manifest.permission.$permission$)) {&#10;            // Show an explanation to the user *asynchronously* -- don't block&#10;            // this thread waiting for the user's response! After the user&#10;            // sees the explanation, try again to request the permission.&#10;        } else {&#10;            // No explanation needed; request the permission&#10;            ActivityCompat.requestPermissions($context$,&#10;                    new String[]{Manifest.permission.$permission$},&#10;                    REQUEST_$permission$);&#10;&#10;            // REQUEST_$permission$ is an&#10;            // app-defined int constant. The callback method gets the&#10;            // result of the request.&#10;        }&#10;    } else {&#10;        // Permission has already been granted, do to the job/&#10;        actionToBeCalled();&#10;    }&#10;}&#10;&#10;&#10;@Override&#10;public void onRequestPermissionsResult(int requestCode,&#10;String permissions[], int[] grantResults) {&#10;    switch (requestCode) {&#10;        case REQUEST_$permission$: {&#10;            // If request is cancelled, the result arrays are empty.&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                // permission was granted, great! Do the job that need permission.&#10;                actionToBeCalled();&#10;            } else {&#10;                // permission denied, boo!&#10;                // TODO : Disable the functionality that depends on this permission.&#10;            }&#10;            return;&#10;        }&#10;&#10;        // other 'case' lines to check for other&#10;        // permissions this app might request.&#10;&#10;        default :&#10;            super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;    }&#10;}&#10;&#10;private void actionToBeCalled(){&#10;    // FIXME : implement the method&#10;}&#10;&#10;// FIXME : For fragments, add the following code, so the onRequestPermissionsResult will be called&#10;// in the Fragment and not only in the parent Activity&#10;&#10;//@Override&#10;//public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {&#10;//    super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;//    if(BuildConfig.DEBUG){&#10;//        Log.d(TAG, &quot;onRequestPermissionsResult&quot;);&#10;//    }&#10;//    if (mAdapter.getCount() &gt; 0) {&#10;//        for (int i = 0; i &lt; mAdapter.getCount(); i++) {&#10;//            mAdapter.getItem(i).onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;//        }&#10;//    }&#10;//}" description="Handle Permission for Android 6.0+." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getActivity()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="permission" expression="enum(&quot;READ_CALENDAR&quot;,&quot;WRITE_CALENDAR&quot;,&quot;READ_CALL_LOG&quot;,&quot;WRITE_CALL_LOG&quot;,&quot;PROCESS_OUTGOING_CALLS&quot;,&quot;CAMERA&quot;,&quot;READ_CONTACTS&quot;,&quot;WRITE_CONTACTS&quot;,&quot;GET_ACCOUNTS&quot;,&quot;ACCESS_FINE_LOCATION&quot;,&quot;ACCESS_COARSE_LOCATION&quot;,&quot;RECORD_AUDIO&quot;,&quot;READ_PHONE_STATE&quot;,&quot;READ_PHONE_NUMBERS&quot;,&quot;CALL_PHONE&quot;,&quot;ANSWER_PHONE_CALLS&quot;,&quot;ADD_VOICEMAIL&quot;,&quot;USE_SIP&quot;,&quot;BODY_SENSORS&quot;,&quot;SEND_SMS&quot;,&quot;RECEIVE_SMS&quot;,&quot;READ_SMS&quot;,&quot;RECEIVE_WAP_PUSH&quot;,&quot;RECEIVE_MMS&quot;,&quot;READ_EXTERNAL_STORAGE&quot;,&quot;WRITE_EXTERNAL_STORAGE&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="permission_description" expression="groovyScript(&quot;def result=''; if(_1 == 'READ_CALENDAR') { result='to allows the application to read the user\\'s calendar data'} else if(_1 == 'WRITE_CALENDAR') {result='to allows the application to write the user\\'s calendar data'} else if(_1 == 'READ_CALL_LOG') { result='to allows the application to read the user\\'s call log'} else if(_1 == 'WRITE_CALL_LOG') { result='to allows the application to write (but not read) the user\\'s call log data'} else if(_1 == 'PROCESS_OUTGOING_CALLS') { result='to allows the application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether'} else if(_1 == 'CAMERA') { result='to allows the application to access the camera device'} else if(_1 == 'READ_CONTACTS') { result='to allows the application to read the user\\'s contacts data'} else if(_1 == 'WRITE_CONTACTS') { result='to allows the application to write the user\\'s contacts data'} else if(_1 == 'GET_ACCOUNTS') { result='to allows the application to access to the list of accounts in the Accounts Service'} else if(_1 == 'ACCESS_FINE_LOCATION') { result='to allows the application to access precise location'} else if(_1 == 'ACCESS_COARSE_LOCATION') { result='to allows the application to access approximate location'} else if(_1 == 'RECORD_AUDIO') { result='to allows the application to record audio'} else if(_1 == 'READ_PHONE_STATE') { result='to allows the application to read only access to phone state, including the phone number of the device, current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device'} else if(_1 == 'READ_PHONE_NUMBERS') { result='to allows the application to read access to the device\\'s phone number(s). This is a subset of the capabilities granted by READ_PHONE_STATE but is exposed to instant applications'} else if(_1 == 'CALL_PHONE') { result='to allows the application to initiate a phone call without going through the Dialer user interface for the user to confirm the call'} else if(_1 == 'ANSWER_PHONE_CALLS') { result='to allows the application to answer an incoming phone call'} else if(_1 == 'ADD_VOICEMAIL') { result='to allows the application to add voicemails into the system'} else if(_1 == 'USE_SIP') { result='to allows the application to use SIP service'} else if(_1 == 'BODY_SENSORS') { result='to allows the application to access data from sensors that the user uses to measure what is happening inside his/her body, such as heart rate'} else if(_1 == 'SEND_SMS') { result='to allows the application to send SMS messages'} else if(_1 == 'RECEIVE_SMS') { result='to allows the application to receive SMS messages'} else if(_1 == 'READ_SMS') { result='to allows the application to read SMS messages'} else if(_1 == 'RECEIVE_WAP_PUSH') { result='to allows the application to receive WAP push messages'} else if(_1 == 'RECEIVE_MMS') { result='to allows the application to monitor incoming MMS messages'} else if(_1 == 'READ_EXTERNAL_STORAGE') { result='to allows the application to read from external storage'} else if(_1 == 'WRITE_EXTERNAL_STORAGE') { result='to allows the application to write to external storage'}; return result&quot;, permission)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_permission_multiple" value="// TODO : put at the top of the class code&#10;/**&#10; * Id to identify the request to the bunch of permissions.&#10; */&#10;private static final int REQUEST_ALL_PERMISSIONS = 2000; // Any value can be used here&#10;&#10;&#10;private void callAction(){&#10;    // TODO : Fill the needed permissions to check&#10;    String[] PERMISSIONS = {android.Manifest.permission.WRITE_EXTERNAL_STORAGE, android.Manifest.permission.READ_PHONE_STATE};&#10;&#10;    if (!hasPermissions($context$, PERMISSIONS)) {&#10;&#10;        // Permissions are not all granted&#10;        // Should we show an explanation?&#10;        if (shouldShowRequestPermissionRationale($context$,PERMISSIONS)) {&#10;            // Show an explanation to the user *asynchronously* -- don't block&#10;            // this thread waiting for the user's response! After the user&#10;            // sees the explanation, try again to request the permission.&#10;        } else {&#10;            // No explanation needed; request the permission&#10;            ActivityCompat.requestPermissions($context$,&#10;                    PERMISSIONS,&#10;                    REQUEST_ALL_PERMISSIONS);&#10;&#10;            // REQUEST_ALL_PERMISSIONS is an&#10;            // app-defined int constant. The callback method gets the&#10;            // result of the request.&#10;        }&#10;    } else {&#10;        // Permission has already been granted&#10;    }&#10;}&#10;&#10;&#10;@Override&#10;public void onRequestPermissionsResult(int requestCode,&#10;String permissions[], int[] grantResults) {&#10;    switch (requestCode) {&#10;        case REQUEST_ALL_PERMISSIONS: {&#10;            // If request is cancelled, the result arrays are empty.&#10;            if (verifyPermissions(grantResults)) {&#10;                // permission was granted, yay! Do the&#10;                // contacts-related task you need to do.&#10;            } else {&#10;                // permission denied, boo! Disable the&#10;                // functionality that depends on this permission.&#10;            }&#10;            return;&#10;        }&#10;&#10;        // other 'case' lines to check for other&#10;        // permissions this app might request.&#10;&#10;        default :&#10;            super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;    }&#10;}&#10;&#10;/**&#10; * Check that all permissions have already been granted by verifying each entry in the given array.&#10; */&#10;public static boolean hasPermissions(Context context, String... permissions) {&#10;    if (context != null &amp;&amp; permissions != null) {&#10;        for (String permission : permissions) {&#10;            if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;    return true;&#10;}&#10;&#10;/**&#10; * Check if we should display more informations to the user by verifying each entry in the given array.&#10; */&#10;public static boolean shouldShowRequestPermissionRationale(Context context, String... permissions) {&#10;    if (context != null &amp;&amp; permissions != null) {&#10;        for (String permission : permissions) {&#10;            if (ActivityCompat.shouldShowRequestPermissionRationale(context, permission)) {&#10;                return true;&#10;            }&#10;        }&#10;    }&#10;    return false;&#10;}&#10;&#10;/**&#10; * Check that all given permissions have been granted by verifying that each entry in the&#10; * given array is of the value {@link PackageManager#PERMISSION_GRANTED}.&#10; *&#10; * @see Activity#onRequestPermissionsResult(int, String[], int[])&#10; */&#10;public static boolean verifyPermissions(int[] grantResults) {&#10;    // At least one result must be checked.&#10;    if (grantResults.length &lt; 1) {&#10;        return false;&#10;    }&#10;&#10;    // Verify that each required permission has been granted, otherwise return false.&#10;    for (int result : grantResults) {&#10;        if (result != Pac kageManager.PERMISSION_GRANTED) {&#10;            return false;&#10;        }&#10;    }&#10;    return true;&#10;}&#10;&#10;// FIXME : For fragments, add the following code, so the onRequestPermissionsResult will be called&#10;// in the Fragment and not only in the parent Activity&#10;&#10;//@Override&#10;//public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {&#10;//    super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;//    if(BuildConfig.DEBUG){&#10;//        Log.d(TAG, &quot;onRequestPermissionsResult&quot;);&#10;//    }&#10;//    if (mAdapter.getCount() &gt; 0) {&#10;//        for (int i = 0; i &lt; mAdapter.getCount(); i++) {&#10;//            mAdapter.getItem(i).onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;//        }&#10;//    }&#10;//}" description="Handle Multi Permission for Android 6.0+." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getActivity()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_version" value="android.util.Log.i(TAG, &quot;Build.VERSION.SDK_INT = &quot; + android.os.Build.VERSION.SDK_INT);&#10;Log.i(TAG, &quot;Build.VERSION.CODENAME = &quot; + Build.VERSION.CODENAME);&#10;Log.i(TAG, &quot;Build.VERSION.INCREMENTAL = &quot; + Build.VERSION.INCREMENTAL);&#10;Log.i(TAG, &quot;Build.VERSION.RELEASE = &quot; + Build.VERSION.RELEASE);&#10;if(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.M){&#10;    Log.i(TAG, &quot;Build.VERSION.BASE_OS = &quot; + Build.VERSION.BASE_OS);&#10;    Log.i(TAG, &quot;Build.VERSION.SECURITY_PATCH = &quot; + Build.VERSION.SECURITY_PATCH);    &#10;}&#10;Log.i(TAG, &quot;Build.BOARD = &quot; + Build.BOARD);&#10;Log.i(TAG, &quot;Build.BOOTLOADER = &quot; + Build.BOOTLOADER);&#10;Log.i(TAG, &quot;Build.BRAND = &quot; + Build.BRAND);&#10;Log.i(TAG, &quot;Build.DEVICE = &quot; + Build.DEVICE);&#10;Log.i(TAG, &quot;Build.DISPLAY = &quot; + Build.DISPLAY);&#10;Log.i(TAG, &quot;Build.VERSFINGERPRINTION = &quot; + Build.FINGERPRINT);&#10;Log.i(TAG, &quot;Build.HARDWARE = &quot; + Build.HARDWARE);&#10;Log.i(TAG, &quot;Build.HOST = &quot; + Build.HOST);&#10;Log.i(TAG, &quot;Build.ID = &quot; + Build.ID);&#10;Log.i(TAG, &quot;Build.MANUFACTURER = &quot; + Build.MANUFACTURER);&#10;Log.i(TAG, &quot;Build.MODEL = &quot; + Build.MODEL);&#10;Log.i(TAG, &quot;Build.PRODUCT = &quot; + Build.PRODUCT);&#10;Log.i(TAG, &quot;Build.TYPE = &quot; + Build.TYPE);" description="Display the version of the android, brand, model, ..." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_launch_first_time" value="private static final String SHARED_PREFS_FIRST_TIME = &quot;first_time&quot;;&#10;&#10;private void runFirstTime() {&#10;    android.content.SharedPreferences sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(getApplicationContext());&#10;    boolean isFirstTime = sharedPref.getBoolean(SHARED_PREFS_FIRST_TIME, true);&#10;&#10;    if (isFirstTime) {&#10;        SharedPreferences.Editor editor = sharedPref.edit();&#10;        editor.putBoolean(SHARED_PREFS_FIRST_TIME, false);&#10;        editor.commit();&#10;&#10;        // TODO : Add here the job you have to do the first time we launch the activity.&#10;        // For example : launch an activity to display a tutorial.&#10;&#10;    }&#10;}" description="Launch an action, only the first time, ever, the code is launched (Use SharedPreferences)." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_get_application_name_from_package_method" value="public static String getAppNameFromPackageName(Context context, String Packagename) {&#10;    android.content.pm.PackageManager packageManager;&#10;    android.content.pm.ApplicationInfo info;&#10;    try {&#10;        packageManager = context.getPackageManager();&#10;        info = packageManager.getApplicationInfo(Packagename, PackageManager.GET_META_DATA);&#10;        if(info != null){&#10;            String appName = (String) packageManager.getApplicationLabel(info);&#10;            return appName;&#10;        } else {&#10;            return &quot;&quot;;&#10;        }&#10;    } catch (PackageManager.NameNotFoundException e) {&#10;        e.printStackTrace();&#10;        return &quot;&quot;;&#10;    } finally {&#10;        // Cleanup&#10;        packageManager = null;&#10;        info = null;&#10;    }&#10;}" description="Get the application name using the package name." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_get_application_icon_from_package_method" value="public static android.graphics.drawable.Drawable getAppIconFromPackageName(Context context, String Packagename) {&#10;&#9;android.content.pm.PackageManager packageManager;&#10;&#9;android.content.pm.ApplicationInfo info;&#10;&#9;try {&#10;&#9;&#9;packageManager = context.getPackageManager();&#10;&#9;&#9;info = packageManager.getApplicationInfo(Packagename, PackageManager.GET_META_DATA);&#10;&#9;&#9;if(info != null){&#10;&#9;&#9;&#9;Drawable icon = packageManager.getApplicationIcon(info);&#10;&#9;&#9;&#9;return icon;&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;return null;&#10;&#9;&#9;}&#10;&#9;} catch (PackageManager.NameNotFoundException e) {&#10;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;return null;&#10;&#9;} finally {&#10;&#9;&#9;// Cleanup&#10;&#9;&#9;packageManager = null;&#10;&#9;&#9;info = null;&#10;&#9;}&#10;}" description="Get the application icon using the package name." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_launch_application_with_package" value="android.content.Intent launchIntent = $context$getPackageManager().getLaunchIntentForPackage(&quot;$packageName$&quot;);&#10;$context$startActivity( launchIntent );" description="Launch an intent to launch an application knowing it's package name." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="packageName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_extended" value="// TODO : to finalize&#10;LayoutInflater inflater = getLayoutInflater();&#10;View view = inflater.inflate(R.layout.$dialogLayoutId$, null);&#10;TextView tvMessage = view.findViewById(R.id.$dialogLayoutTextId$);&#10;tvMessage.setText(R.string.$dialogMessageStringTextId$);&#10;tvMessage.setMovementMethod(new ScrollingMovementMethod());&#10;android.support.v7.app.AlertDialog.Builder builder = new AlertDialog.Builder($context$);&#10;builder&#10;        .setTitle(R.string.$dialogTitleStringTextId$)&#10;        .setView(view)&#10;        .setCancelable(false)&#10;        .setPositiveButton(R.string.$dialogPositiveStringTextId$, new DialogInterface.OnClickListener() {&#10;            @Override&#10;            public void onClick(DialogInterface dialog, int which) {&#10;                dialog.cancel();&#10;            }&#10;        })&#10;        .setNegativeButton(R.string.$dialogNegativeStringTextId$, new DialogInterface.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(DialogInterface dialog, int which) {&#10;                dialog.cancel();&#10;            }&#10;        });&#10;builder.create().show();" description="Display an alert Dialog with custom view." toReformat="true" toShortenFQNames="true">
    <variable name="dialogLayoutId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dialogLayoutTextId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dialogMessageStringTextId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="context" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dialogTitleStringTextId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dialogPositiveStringTextId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dialogNegativeStringTextId" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_webview" value="// TODO : Add the bloc to the layout&#10;/*&#10;&lt;WebView&#10;android:id=&quot;@+id/webview&quot;&#10;android:layout_width=&quot;match_parent&quot;&#10;android:layout_height=&quot;match_parent&quot; /&gt;&#10;*/&#10;&#10;// TODO Put in class attribute&#10;// private android.webkit.WebView webView;&#10;// TODO : remove this line&#10;android.webkit.WebView webView;&#10;&#10;webView = findViewById(R.id.webview);&#10;&#10;// Avoid the click on a link open an external browser&#10;webView.setWebViewClient(new android.webkit.WebViewClient());&#10;&#10;// Extra set the Web Chrome Client&#10;// webView.setWebChromeClient(new android.webkit.WebChromeClient());&#10;&#10;// Optional settings&#10;// webView.getSettings().setBuiltInZoomControls(true);&#10;// webView.getSettings().setJavaScriptEnabled(true);&#10;// webView.getSettings().setDomStorageEnabled(true);&#10;// webView.getSettings().setDatabaseEnabled(true);&#10;// webView.getSettings().setCacheMode(android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK);&#10;// webView.getSettings().setAppCacheEnabled(true);&#10;&#10;// Exemple to handle the loading of the page&#10;//        webView.setWebChromeClient(new WebChromeClient() {&#10;//            @Override&#10;//            public void onProgressChanged(WebView view, int newProgress) {&#10;//                 activity.setTitle(&quot;Loading...&quot;);&#10;//                 activity.setProgress(progress * 100); // Method that update a progressView for example.&#10;//                 if(progress == 100) {&#10;//                     activity.setTitle(&quot;My title&quot;);&#10;//                 }&#10;//            }&#10;//        });&#10;&#10;// Exemple to load Base64 encoded content&#10;// https://developer.android.com/reference/android/webkit/WebView#loadData(java.lang.String,%20java.lang.String,%20java.lang.String)&#10;// String unencodedHtml = &quot;&lt;html&gt;&lt;body&gt;'%28' is the code for '('&lt;/body&gt;&lt;/html&gt;&quot;;&#10;// String encodedHtml = android.util.Base64.encodeToString(unencodedHtml.getBytes(), Base64.NO_PADDING);&#10;// webView.loadData(encodedHtml, &quot;text/html&quot;, &quot;base64&quot;);&#10;&#10;// Exemple to handle java injection&#10;// Doc : https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String)&#10;// if (android.os.Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {&#10;//     class JsObject {&#10;//         @android.webkit.JavascriptInterface&#10;//         public String toString() {&#10;//             return &quot;injectedObject&quot;;&#10;//         }&#10;//     }&#10;//     webView.getSettings().setJavaScriptEnabled(true);&#10;//     webView.addJavascriptInterface(new JsObject(), &quot;injectedObject&quot;);&#10;//     webView.loadData(&quot;&quot;, &quot;text/html&quot;, null);&#10;//     webView.loadUrl(&quot;javascript:alert(injectedObject.toString())&quot;);&#10;// }&#10;&#10;// TODO : see more on auto fill&#10;// https://developer.android.com/reference/android/webkit/WebView#onProvideAutofillVirtualStructure(android.view.ViewStructure,%20int)&#10;&#10;// TODO : see more on post HTML5 messages&#10;// https://developer.android.com/reference/android/webkit/WebView#postWebMessage(android.webkit.WebMessage,%20android.net.Uri)&#10;&#10;&#10;/* Exemple to catch the alert default Javascript dialog. WebChromeClient must be set BEFORE calling loadUrl! */&#10;// webView.setWebChromeClient(new WebChromeClient() {&#10;//     @Override&#10;//    public boolean onJsAlert(WebView view, String url, String message, final android.webkit.JsResult result) {&#10;//         new android.app.AlertDialog.Builder($context$)&#10;//                 .setTitle(&quot;javaScript dialog&quot;)&#10;//                 .setMessage(message)&#10;//                 .setPositiveButton(android.R.string.ok,&#10;//                         new AlertDialog.OnClickListener() {&#10;//                             public void onClick(android.content.DialogInterface dialog, int which) {&#10;//                                 result.confirm();&#10;//                             }&#10;//                         })&#10;//                 .setCancelable(false)&#10;//                 .create()&#10;//                 .show();&#10;// &#10;//         return true;&#10;//     }&#10;// });&#10;&#10;// Load the URL in the WebView&#10;webView.loadUrl(&quot;$url$&quot;);&#10;&#10;// Handle the back navigation button&#10;// TODO : put outside of the method&#10;// @Override&#10;// public void onBackPressed() {&#10;// &#9;if (webView.canGoBack()) {&#10;// &#9;&#9;webView.goBack();&#10;// &#9;} else {&#10;// &#9;&#9;finish();&#10;// &#9;}&#10;// }" description="Add a webview to the application." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getApplicationContext()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <variable name="url" expression="" defaultValue="https://tristan.salaun.free.fr" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_notification_fix" value="private static final String CHANNEL_ID = &quot;channel_name&quot;;&#10;&#10;/**&#10; * Method to create the required channel&#10; */&#10;private static void createNotificationChannel(Context context) {&#10;    // Create the NotificationChannel, but only on API 26+ because&#10;    // the NotificationChannel class is new and not in the support library&#10;    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;        CharSequence name = context.getString(R.string.$channel_name$);&#10;        String description = context.getString(R.string.$channel_description$);&#10;        int importance = NotificationManager.IMPORTANCE_DEFAULT;&#10;        android.app.NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);&#10;        channel.setDescription(description);&#10;        // Register the channel with the system; you can't change the importance&#10;        // or other notification behaviors after this&#10;        NotificationManager notificationManager = context.getSystemService(NotificationManager.class);&#10;        notificationManager.createNotificationChannel(channel);&#10;    }&#10;}&#10;&#10;// TODO : define the Strings in the string file like thos :&#10;//    &lt;string name=&quot;channel_name&quot;&gt;Channel name&lt;/string&gt;&#10;//    &lt;string name=&quot;channel_description&quot;&gt;Channel description for the user&lt;/string&gt;&#10;&#10;// TODO : Add the call to the notify method (the first line)&#10;// createNotificationChannel(context);&#10;&#10;// TODO : update the builder with the CHANNEL_ID parameter like this (in the notify method)&#10;//final NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID)" description="Fix to make the notification work for Android 8.0+." toReformat="true" toShortenFQNames="true">
    <variable name="channel_name" expression="" defaultValue="&quot;channel_name&quot;" alwaysStopAt="true" />
    <variable name="channel_description" expression="" defaultValue="&quot;channel_description&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_convert_dp_px" value="public static int dpToPx(int dp) {&#10;    return (int) (dp * android.content.res.Resources.getSystem().getDisplayMetrics().density);&#10;}&#10;&#10;public static int pxToDp(int px) {&#10;    return (int) (px / Resources.getSystem().getDisplayMetrics().density);&#10;}" description="Static methods to convert DP to PX, to use the values programatically." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_db_room_01_entity" value="// TODO : Add this in your build.gradle (Module: app)&#10;//ext {&#10;//    roomVersion = '2.2.5'&#10;//}&#10;&#10;// TODO : Add this in your build.gradle (Module: app), in the /// block&#10;// // Room components&#10;//implementation &quot;androidx.room:room-runtime:$roomVersion&quot;&#10;//annotationProcessor &quot;androidx.room:room-compiler:$roomVersion&quot;&#10;&#10;// TODO : to export schema, in the build.gradle (Module: app), add :&#10;// android {&#10;//     ...&#10;//     defaultConfig {&#10;//         ...&#10;//         javaCompileOptions {&#10;//             annotationProcessorOptions {&#10;//                 arguments = [&quot;room.schemaLocation&quot;: &quot;$projectDir/schemas&quot;.toString()]&#10;//             }&#10;//         }&#10;//     }&#10;// }&#10;&#10;&#10;// Add this just before the class declaration&#10;//@androidx.room.Entity(tableName = &quot;$table_name$_table&quot;)&#10;&#10;@androidx.room.PrimaryKey(autoGenerate = true)&#10;@androidx.annotation.NonNull&#10;@androidx.room.ColumnInfo(name = &quot;_ID&quot;)&#10;private Integer mId;&#10;" description="Add all needed to implements Room Database." toReformat="true" toShortenFQNames="true">
    <variable name="table_name" expression="snakeCase(className())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_json_parse" value="try {&#10;&#9;org.json.JSONObject jObject = new JSONObject($paramJSONString$);&#10;&#10;// Examples to get data from the JSON&#10;//&#9;String aJsonString = jObject.getString(&quot;STRINGNAME&quot;);&#10;//&#9;boolean aJsonBoolean = jObject.getBoolean(&quot;BOOLEANNAME&quot;);&#10;//&#9;int aJsonInteger = jObject.getInt(&quot;INTEGERNAME&quot;);&#10;//&#9;long aJsonLong = jObject.getLong(&quot;LONGNAME&quot;);&#10;//&#9;double aJsonDouble = jObject.getDouble(&quot;DOUBLENAME&quot;);&#10;//&#9;org.json.JSONArray jArray = jObject.getJSONArray(&quot;ARRAYNAME&quot;);&#10;//&#9;for (int i = 0; i &lt; jArray.length(); i++) {&#10;//&#9;&#9;try {&#10;//&#9;&#9;&#9;JSONObject oneObject = jArray.getJSONObject(i);&#10;//&#9;&#9;&#9;// Pulling items from the array&#10;//&#9;&#9;&#9;String oneObjectsItem = oneObject.getString(&quot;STRINGNAMEinTHEarray&quot;);&#10;//&#9;&#9;&#9;String oneObjectsItem2 = oneObject.getString(&quot;anotherSTRINGNAMEINtheARRAY&quot;);&#10;//&#9;&#9;} catch (JSONException e) {&#10;//&#9;&#9;&#9;// Oops&#10;//&#9;&#9;}&#10;//&#9;}&#10;} catch (org.json.JSONException e) {&#10;    // TODO Handle the error&#10;}" description="Example of parsing JSON String." toReformat="true" toShortenFQNames="true">
    <variable name="paramJSONString" expression="" defaultValue="&quot;JSONString&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_external_application" value="android.content.Intent intent = new Intent();&#10;intent.setAction(&quot;$intent_filter$&quot;);&#10;startActivity(intent);&#10;&#10;// TODO : In the other application, you have to add the following intent filter to the activity you would like to launch&#10;// &lt;activity android:name=&quot;.MyActivity&quot;&gt;&#10;//     &lt;intent-filter&gt;&#10;//         &lt;action android:name=&quot;$intent_filter$&quot; /&gt;&#10;//         &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;//     &lt;/intent-filter&gt;&#10;// &lt;/activity&gt;" description="Launch an external application." toReformat="true" toShortenFQNames="true">
    <variable name="intent_filter" expression="" defaultValue="&quot;package.name.ACTION_TO_LAUNCH&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_db_room_02_BaseDao" value="import androidx.room.Delete;&#10;import androidx.room.Insert;&#10;import androidx.room.Update;&#10;import java.util.List;&#10;&#10;public interface BaseDao&lt;T&gt; {&#10;    /**&#10;     * Insert an object in the database.&#10;     *&#10;     * @param obj the object to be inserted.&#10;     */&#10;    @Insert&#10;    long insert(T obj); // can return void&#10;&#10;    /**&#10;     * Insert an array of objects in the database.&#10;     *&#10;     * @param list the objects to be inserted.&#10;     */&#10;    @Insert&#10;    List&lt;Long&gt; insertAll(T... list); // Can return void, List&lt;Long&gt;, long[] or Long[]&#10;    &#10;    /**&#10;     * Update an object list of the database.&#10;     *&#10;     * @param list of objects to be updated&#10;     */&#10;    @Update&#10;    void update(T... list); // can return int (the number of item updated)&#10;&#10;    /**&#10;     * Delete an object list from the database&#10;     *&#10;     * @param list of objects to be deleted&#10;     */&#10;    @Delete&#10;    void delete(T... list); // can return int (the number of item updated)&#10;}" description="Generate the content of the BaseDao interface." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_db_room_03_objectDao" value="@androidx.room.Dao&#10;public interface $className$Dao extends BaseDao&lt;$className$&gt;{&#10;    @androidx.room.Query(&quot;SELECT * FROM $classNameLowerCase$_table&quot;)&#10;    java.util.List&lt;$className$&gt; getAll();&#10;&#10;    @androidx.room.Query(&quot;SELECT * FROM $classNameLowerCase$_table&quot;)&#10;    android.database.Cursor &lt;$className$&gt; getCursorAll();&#10;&#10;    @Query(&quot;DELETE FROM $classNameLowerCase$_table&quot;)&#10;    public void deleteAll();&#10;&#10;    //@Query(&quot;SELECT * from $classNameLowerCase$_table LIMIT 1&quot;)&#10;    //public $className[] getOne$className();&#10;&#10;    //@Query(&quot;SELECT * FROM $classNameLowerCase$_table WHERE PARAM &gt; :paramValue&quot;)&#10;    //public $className[] loadAll$classNameMoreThan(int paramValue);&#10;&#10;}" description="Generate the content of the ObjectDao interface." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="classNameLowerCase" expression="snakeCase($className$)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_db_room_04_AppDatabase" value="import androidx.room.Database;&#10;import androidx.room.Room;&#10;import androidx.room.RoomDatabase;&#10;&#10;@Database(entities = {$entity$.class}, version = 1)&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    private static AppDatabase INSTANCE;&#10;&#10;    public static AppDatabase getDatabase(android.content.Context context) {&#10;        if (INSTANCE == null) {&#10;            INSTANCE =&#10;                    Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, &quot;$database_name$&quot;)&#10;                            // Delete the database in case of upgrade :&#10;                            // .fallbackToDestructiveMigrationFrom()&#10;                            // .allowMainThreadQueries() // Not recommended&#10;                            .build();&#10;        }&#10;        return INSTANCE;&#10;    }&#10;    &#10;    // TODO : Handle the migrations: see examples below. Source : https://developer.android.com/training/data-storage/room/migrating-db-versions&#10;&#10;//    static final Migration MIGRATION_1_2 = new Migration(1, 2) {&#10;//        @Override&#10;//        public void migrate(SupportSQLiteDatabase database) {&#10;//            database.execSQL(&quot;CREATE TABLE `Fruit` (`id` INTEGER, &quot;&#10;//                    + &quot;`name` TEXT, PRIMARY KEY(`id`))&quot;);&#10;//        }&#10;//    };&#10;    &#10;//    static final Migration MIGRATION_2_3 = new Migration(2, 3) {&#10;//        @Override&#10;//        public void migrate(SupportSQLiteDatabase database) {&#10;//            database.execSQL(&quot;ALTER TABLE Book &quot;&#10;//                    + &quot; ADD COLUMN pub_year INTEGER&quot;);&#10;//        }&#10;//    };&#10;&#10;// Room.databaseBuilder(getApplicationContext(), MyDb.class, &quot;database-name&quot;).addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();&#10;    &#10;    public abstract UserDao userDao();&#10;}" description="Generate the content of the AppDatabase abstract class." toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="database_name" expression="" defaultValue="database_db" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_random_number" value="final int min = 20;&#10;final int max = 80;&#10;final int random = new java.util.Random().nextInt((max - min) + 1) + min;" description="Generate a random number between range." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_onActivityResult" value="@Override&#10;protected void onActivityResult(int requestCode, int resultCode, @android.support.annotation.Nullable Intent data) {&#10;&#10;&#9;switch (requestCode) {&#10;&#9;&#9;case REQUEST_$action_name$:&#10;&#9;&#9;&#9;if (resultCode == android.app.Activity.RESULT_OK) {&#10;&#9;&#9;&#9;&#9;// TODO : implement the OK case&#10;&#9;&#9;&#9;}else {&#10;&#9;&#9;&#9;&#9;// TODO : implement the KO case&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;break;&#10;&#10;&#9;&#9;default:&#10;&#9;&#9;&#9;super.onActivityResult(requestCode, resultCode, data);&#10;&#9;&#9;&#9;break;&#10;&#9;}&#10;}&#10;&#10;// TODO : Put the following to the top of the class&#10;private static final int REQUEST_$action_name$ = 1; // TODO : set a value (0 excluded)&#10;&#10;// Call with :  &#10;Intent intentToLaunch = new Intent(); // TODO : update the intent to launch&#10;startActivityForResult(intentToLaunch, REQUEST_$action_name$);" description="Template for the onActivityResult method." toReformat="true" toShortenFQNames="true">
    <variable name="action_name" expression="capitalize(_1)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_voice_recognition" value="final android.speech.SpeechRecognizer recognizer = SpeechRecognizer.createSpeechRecognizer(MainActivity.this);&#10;final android.content.Intent recognizerIntent = new Intent(android.speech.RecognizerIntent.ACTION_RECOGNIZE_SPEECH);&#10;recognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);&#10;recognizerIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getPackageName());&#10;recognizerIntent.putExtra(RecognizerIntent.EXTRA_PREFER_OFFLINE, true);&#10;&#10;recognizer.setRecognitionListener(new android.speech.RecognitionListener() {&#10;&#9;@Override&#10;&#9;public void onReadyForSpeech(Bundle params) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;            android.util.Log.d(TAG, &quot;onReadyForSpeech &quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onBeginningOfSpeech() {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onBeginningOfSpeech &quot;);&#10;&#9;&#9;}&#10;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onRmsChanged(float rmsdB) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onRmsChanged &quot; + rmsdB);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onBufferReceived(byte[] buffer) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onBufferReceived &quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onEndOfSpeech() {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onEndOfSpeech &quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onError(int error) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onError &quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onResults(Bundle results) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onResults &quot;);&#10;&#9;&#9;}&#10;        java.util.ArrayList&lt;String&gt; resultString = results.getStringArrayList(&quot;results_recognition&quot;);&#10;&#9;&#9;float[] resultConfidence = results.getFloatArray(&quot;confidence_scores&quot;);&#10;&#10;&#9;&#9;for (int i = 0; i &lt; resultString.size(); i++) {&#10;&#9;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;&#9;Log.d(TAG, &quot;result &quot; + resultString.get(i) + &quot; (&quot; + resultConfidence[i] + &quot;)&quot;);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onPartialResults(Bundle partialResults) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onPartialResults &quot;);&#10;&#9;&#9;}&#10;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public void onEvent(int eventType, Bundle params) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;Log.d(TAG, &quot;onEvent &quot;);&#10;&#9;&#9;}&#10;&#10;&#9;}&#10;});&#10;&#10;// Start listening&#10;recognizer.startListening(recognizerIntent);&#10;&#10;// Stop listening after 10 seconds &#10;new android.os.Handler().postDelayed(new Runnable() {&#10;&#9;@Override&#10;&#9;public void run() {&#10;&#9;&#9;recognizer.stopListening();&#10;&#9;}&#10;}, 10 * 1000);" description="Launch a voice recognition intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_tts" value="// TODO : move to the top of the class (instance variable)&#10;android.speech.tts.TextToSpeech myTTS;&#10;&#10;myTTS = new TextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {&#10;    @Override&#10;    public void onInit(int status) {&#10;        if (status != TextToSpeech.ERROR) {&#10;&#10;            // #####################################&#10;            // # Get information on the TTS engine #&#10;            // #####################################&#10;            // Get the engines available on the device&#10;            java.util.List&lt;TextToSpeech.EngineInfo&gt; enginesAvailable = myTTS.getEngines();&#10;            for (TextToSpeech.EngineInfo currentEngine : enginesAvailable) {&#10;                if (BuildConfig.DEBUG) {&#10;                    android.util.Log.d(TAG, &quot;onInit engine available &quot; + currentEngine.name + &quot; &quot; + currentEngine.label);&#10;                }&#10;            }&#10;&#10;            if (android.os.Build.VERSION.SDK_INT &gt; 21) {&#10;                java.util.Set&lt;java.util.Locale&gt; availableLanguagesList = myTTS.getAvailableLanguages();&#10;                for (Locale currentLocale : availableLanguagesList) {&#10;                    if (BuildConfig.DEBUG) {&#10;                        Log.d(TAG, &quot;onInit locale available &quot; + currentLocale.toString());&#10;                    }&#10;                }&#10;&#10;                Set&lt;android.speech.tts.Voice&gt; availablesVoices = myTTS.getVoices();&#10;                for (Voice currentVoice : availablesVoices) {&#10;                    if (BuildConfig.DEBUG) {&#10;                        Log.d(TAG, &quot;onInit voice available locale &quot; + currentVoice.getLocale());&#10;                        Log.d(TAG, &quot;onInit voice available name &quot; + currentVoice.getName());&#10;                        Log.d(TAG, &quot;onInit voice available feature &quot; + currentVoice.getFeatures());&#10;                        Log.d(TAG, &quot;onInit voice available latency &quot; + currentVoice.getLatency());&#10;                        Log.d(TAG, &quot;onInit voice available quality &quot; + currentVoice.getQuality());&#10;                    }&#10;                }&#10;            }&#10;&#10;&#10;            // Set the TTS language&#10;            if (myTTS.isLanguageAvailable(Locale.ENGLISH) &gt;= TextToSpeech.LANG_AVAILABLE) { // see TextToSpeech.LANG_AVAILABLE, ...&#10;                myTTS.setLanguage(Locale.ENGLISH);&#10;            }&#10;&#10;            if (myTTS.isSpeaking()) {&#10;                myTTS.stop();&#10;            }&#10;&#10;            // Optional&#10;            // myTTS.setPitch(0.2f); // 1.0 is normal&#10;            // myTTS.setSpeechRate(0.2f); // 1.0 is normal&#10;&#10;            String messageToBeTTS = &quot;Hello world&quot;;&#10;            myTTS.speak(messageToBeTTS, TextToSpeech.QUEUE_FLUSH, null);&#10;        }&#10;    }&#10;});&#10;&#10;        // TODO : move outside the method&#10;//        public void onPause() {&#10;//            if (myTTS != null) {&#10;//                myTTS.stop();&#10;//                myTTS.shutdown();&#10;//            }&#10;//            super.onPause();&#10;//        }" description="Example of TTS." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_content_provider_user_dictionary_read" value=" // A &quot;projection&quot; defines the columns that will be returned for each row&#10;String[] projection = {&#10;        android.provider.UserDictionary.Words._ID,    // Contract class constant for the _ID column name&#10;        UserDictionary.Words.WORD,   // Contract class constant for the word column name&#10;        UserDictionary.Words.LOCALE  // Contract class constant for the locale column name&#10;};&#10;&#10; // Defines a string to contain the selection clause&#10;String selectionClause = null;&#10;&#10; // Initializes an array to contain selection arguments&#10;String[] selectionArgs = null;&#10;&#10; // Defines a string to order the result&#10;String sortOrder = null;&#10;&#10; // Does a query against the table and returns a Cursor object&#10;android.database.Cursor mCursor = getContentResolver().query(&#10;        UserDictionary.Words.CONTENT_URI,  // The content URI of the words table&#10;        projection,                       // The columns to return for each row&#10;        selectionClause,                  // Either null, or the word the user entered&#10;        selectionArgs,                    // Either empty, or the string the user entered&#10;        sortOrder);                       // The sort order for the returned rows&#10;&#10; // Some providers return null if an error occurs, others throw an exception&#10;if (null == mCursor) {&#10;    /*&#10;     * Insert code here to handle the error. Be sure not to use the cursor! You may want to&#10;     * call android.util.Log.e() to log this error.&#10;     *&#10;     */&#10;    if (BuildConfig.DEBUG) {&#10;        android.util.Log.d(TAG, &quot;onCreate CURSOR NULL&quot;);&#10;    }&#10;    // If the Cursor is empty, the provider found no matches&#10;} else if (mCursor.getCount() &lt; 1) {&#10;&#10;    /*&#10;     * Insert code here to notify the user that the search was unsuccessful. This isn't necessarily&#10;     * an error. You may want to offer the user the option to insert a new row, or re-type the&#10;     * search term.&#10;     */&#10;    if (BuildConfig.DEBUG) {&#10;        Log.d(TAG, &quot;onCreate CURSOR EMPTY&quot;);&#10;    }&#10;&#10;} else {&#10;    // Insert code here to do something with the results&#10;    try {&#10;        while (mCursor.moveToNext()) {&#10;            if (BuildConfig.DEBUG) {&#10;                Log.d(TAG, &quot;onCreate &quot; +&#10;                        mCursor.getLong(0) + &quot; &quot; +&#10;                        mCursor.getString(1) + &quot; &quot; +&#10;                        mCursor.getString(2) + &quot; &quot;&#10;                );&#10;            }&#10;        }&#10;    } finally {&#10;        mCursor.close();&#10;    }&#10;}" description="Use the content provider UserDictionary and read it's content." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_content_provider_mediastore_read" value="android.net.Uri media = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;&#10;String[] projection = { MediaStore.Audio.Media._ID,           // 0&#10;        MediaStore.Audio.Media.ARTIST,        // 1&#10;        MediaStore.Audio.Media.TITLE,         // 2&#10;        MediaStore.Audio.Media.ALBUM_ID,      // 3&#10;        MediaStore.Audio.Media.ALBUM,         // 4&#10;        MediaStore.Audio.Media.DATA,          // 5&#10;        MediaStore.Audio.Media.DISPLAY_NAME,  // 6&#10;        MediaStore.Audio.Media.DURATION };    // 7&#10;&#10;String selection = MediaStore.Audio.Media.IS_MUSIC + &quot; != 0&quot;;&#10;&#10;android.database.Cursor cursor = getContentResolver().query(media,projection,selection,null,null);&#10;while(cursor.moveToNext()){&#10;    if(BuildConfig.DEBUG){&#10;        android.util.Log.d(TAG, &quot;onCreate &quot; +&#10;                cursor.getString(0) + &quot; &quot; +&#10;                cursor.getString(1) + &quot; &quot; +&#10;                cursor.getString(2) + &quot; &quot; +&#10;                cursor.getString(3) + &quot; &quot; +&#10;                cursor.getString(4) + &quot; &quot; +&#10;                cursor.getString(5) + &quot; &quot; +&#10;                cursor.getString(6) + &quot; &quot; +&#10;                cursor.getString(7) + &quot; &quot;);&#10;    }&#10;}" description="Display the list of the sounds on the device, using the content provider MediaStore." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_db_room_00_documentation" value="// Create an entity class, then use : android_db_room_01_entity&#10;// Create a file BaseDao and use : android_db_room_02_BaseDao&#10;// Create a file ObjectDao corresponding to the entity class, exemple UserDao and use : android_db_room_03_objectDao&#10;// Create a file AppDatabase use android_db_room_04_AppDatabase and customize the file with the Dao Objects." description="Display the process to use the LiveTemplate to setup Room Database." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="and_content_provider_user_dictionary_write" value="// Defines a new Uri object that receives the result of the insertion&#10;android.net.Uri newUri;&#10;&#10;// Defines an object to contain the new values to insert&#10;android.content.ContentValues newValues = new ContentValues();&#10;&#10;/*&#10; * Sets the values of each column and inserts the word. The arguments to the &quot;put&quot;&#10; * method are &quot;column name&quot; and &quot;value&quot;&#10; */&#10;newValues.put(android.provider.UserDictionary.Words.APP_ID, &quot;example.user&quot;);&#10;newValues.put(UserDictionary.Words.LOCALE, &quot;en_US&quot;);&#10;newValues.put(UserDictionary.Words.WORD, &quot;insert&quot;);&#10;newValues.put(UserDictionary.Words.FREQUENCY, &quot;100&quot;);&#10;&#10;newUri = getContentResolver().insert(&#10;        UserDictionary.Words.CONTENT_URI,   // the user dictionary content URI&#10;        newValues                          // the values to insert&#10;);&#10;if (BuildConfig.DEBUG) {&#10;    android.util.Log.d(TAG, &quot;onCreate &quot; + newUri);&#10;}" description="Use the content provider UserDictionary and write a new entry inside." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_content_provider_user_dictionary_update" value=" // Defines an object to contain the updated values&#10; android.content.ContentValues updateValues = new ContentValues();&#10;&#10; // Defines selection criteria for the rows you want to update&#10;String selectionClause = android.provider.UserDictionary.Words.LOCALE + &quot; LIKE ?&quot;;&#10;String[] selectionArgs = {&quot;en_%&quot;};&#10;&#10; // Defines a variable to contain the number of updated rows&#10;int rowsUpdated = 0;&#10;&#10;/*&#10; * Sets the updated value and updates the selected words.&#10; */&#10;updateValues.putNull(UserDictionary.Words.LOCALE);&#10;&#10;rowsUpdated = getContentResolver().update(&#10;        UserDictionary.Words.CONTENT_URI,   // the user dictionary content URI&#10;        updateValues,                      // the columns to update&#10;        selectionClause,                   // the column to select on&#10;        selectionArgs                      // the value to compare to&#10;);&#10;if (BuildConfig.DEBUG) {&#10;    android.util.Log.d(TAG, &quot;onCreate rowsUpdated=&quot; + rowsUpdated);&#10;}" description="Use the content provider UserDictionary and update values inside." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_content_provider_user_dictionary_delete" value=" // Defines selection criteria for the rows you want to delete&#10;String selectionClause = UserDictionary.Words.WORD + &quot; LIKE ?&quot;;&#10;String[] selectionArgs = {&quot;%insert%&quot;};&#10;&#10; // Defines a variable to contain the number of rows deleted&#10;int rowsDeleted = 0;&#10;&#10;&#10;// Deletes the words that match the selection criteria&#10;rowsDeleted = getContentResolver().delete(&#10;        UserDictionary.Words.CONTENT_URI,   // the user dictionary content URI&#10;        selectionClause,                   // the column to select on&#10;        selectionArgs                      // the value to compare to&#10;);&#10;if (BuildConfig.DEBUG) {&#10;    android.util.Log.d(TAG, &quot;onCreate rowsDeleted=&quot; + rowsDeleted);&#10;}" description="Use the content provider UserDictionary and deete values inside." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_service_lifecycle" value="@Override&#10;public void onCreate() {&#10;    // The service is being created&#10;    if(BuildConfig.DEBUG){&#10;        android.util.Log.d(TAG, &quot;onCreate&quot;);&#10;    }&#10;}&#10;&#10;@Override&#10;public int onStartCommand(Intent intent, int flags, int startId) {&#10;    if(BuildConfig.DEBUG){&#10;        Log.d(TAG, &quot;onStartCommand&quot;);&#10;    }&#10;&#10;    // The service is starting, due to a call to startService()&#10;    return Service.START_NOT_STICKY;&#10;}&#10;&#10;@Override&#10;public boolean onUnbind(Intent intent) {&#10;    if(BuildConfig.DEBUG){&#10;        Log.d(TAG, &quot;onUnbind&quot;);&#10;    }&#10;&#10;    // All clients have unbound with unbindService()&#10;    return true;&#10;}&#10;&#10;@Override&#10;public void onRebind(Intent intent) {&#10;    // A client is binding to the service with bindService(),&#10;    // after onUnbind() has already been called&#10;    if(BuildConfig.DEBUG){&#10;        Log.d(TAG, &quot;onRebind&quot;);&#10;    }&#10;&#10;}&#10;&#10;@Override&#10;public void onDestroy() {&#10;    // The service is no longer used and is being destroyed&#10;    if(BuildConfig.DEBUG){&#10;        Log.d(TAG, &quot;onDestroy &quot;);&#10;    }&#10;}" description="Implements the methods of the life cycle of a service." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_select_contact" value="// TODO : put this constant at the top of the class&#10;public final int PICK_CONTACT = 12345;&#10;&#10;android.content.Intent i = new Intent(Intent.ACTION_PICK, android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_URI);&#10;startActivityForResult(i, PICK_CONTACT);&#10;&#10;// Write the onActivityResult with the live template android_intent_select_contact_result (call it outside of a method)." description="Launch the contact picker." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_select_contact_result" value="@Override&#10;protected void onActivityResult(int requestCode, int resultCode, android.content.Intent data) {&#10;&#9;super.onActivityResult(requestCode, resultCode, data);&#10;&#10;&#9;if (requestCode == PICK_CONTACT &amp;&amp; resultCode == RESULT_OK) {&#10;&#9;&#9;android.net.Uri contactUri = data.getData();&#10;&#9;&#9;android.database.Cursor cursor = getContentResolver().query(contactUri, null, null, null, null);&#10;&#9;&#9;cursor.moveToFirst();&#10;&#9;&#9;int column = cursor.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER);&#10;&#9;&#9;&#10;&#9;&#9;// Remove the spaces in the phone numbers&#10;&#9;&#9;String phoneNumber = cursor.getString(column).replace(&quot; &quot;, &quot;&quot;);&#10;        android.util.Log.d(&quot;phone number&quot;, phoneNumber);&#10;&#9;&#9;&#10;&#9;&#9;// TODO : do what you want with the value.&#10;&#9;}&#10;}" description="Implement the onActivityResult corresponding to the intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_send_sms_01_method" value="// Send SMS&#10;/*&#10; * BroadcastReceiver mBrSend; BroadcastReceiver mBrReceive;&#10; */&#10;private void sendSMS(android.content.Context context, String phoneNumber, String message) {&#10;&#9;java.util.ArrayList&lt;android.app.PendingIntent&gt; sentPendingIntents = new ArrayList&lt;PendingIntent&gt;();&#10;&#9;ArrayList&lt;PendingIntent&gt; deliveredPendingIntents = new ArrayList&lt;PendingIntent&gt;();&#10;&#9;PendingIntent sentPI&#9;&#9;= PendingIntent.getBroadcast(context, 0, new android.content.Intent(context, SmsSentReceiver.class), 0);&#10;&#9;PendingIntent deliveredPI&#9;= PendingIntent.getBroadcast(context, 0, new Intent(context, SmsDeliveredReceiver.class), 0);&#10;&#9;try {&#10;&#9;&#9;android.telephony.SmsManager sms = SmsManager.getDefault();&#10;&#9;&#9;ArrayList&lt;String&gt; mSMSMessage = sms.divideMessage(message);&#10;&#9;&#9;for (int i = 0; i &lt; mSMSMessage.size(); i++) {&#10;&#9;&#9;&#9;sentPendingIntents.add(i, sentPI);&#10;&#9;&#9;&#9;deliveredPendingIntents.add(i, deliveredPI);&#10;&#9;&#9;}&#10;&#9;&#9;sms.sendMultipartTextMessage(phoneNumber, null, mSMSMessage, sentPendingIntents, deliveredPendingIntents);&#10;&#10;&#9;} catch (Exception e) {&#10;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;android.widget.Toast.makeText(getBaseContext(), &quot;SMS sending failed...&quot;, Toast.LENGTH_SHORT).show();&#10;&#9;}&#10;}&#10;&#10;// TODO : add the permission to the Manifest file : &lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot; /&gt;&#10;&#10;// TODO : create 2 classes :&#10;// SmsDeliveredReceiver and replace the code by the code in the LiveTemplate : android_send_sms_02_SmsDeliveredReceiver&#10;// SmsSentReceiver and replace the code by the code in the LiveTemplate : android_send_sms_03_SmsSentReceiver&#10;&#10;// TODO : Add the receivers declaration to the Manifest file (inside the application tag :&#10;// &lt;receiver android:name=&quot;.SmsSentReceiver&quot; /&gt;&#10;// &lt;receiver android:name=&quot;.SmsDeliveredReceiver&quot; /&gt;" description="Write the code to Send a SMS." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_send_sms_02_SmsDeliveredReceiver" value="public class SmsDeliveredReceiver extends android.content.BroadcastReceiver {&#10;    @Override&#10;    public void onReceive(android.content.Context context, android.content.Intent arg1) {&#10;        switch (getResultCode()) {&#10;            case android.app.Activity.RESULT_OK:&#10;                android.widget.Toast.makeText(context, &quot;SMS delivered&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case Activity.RESULT_CANCELED:&#10;                Toast.makeText(context, &quot;SMS not delivered&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;        }&#10;    }&#10;}" description="Write the code of the class SmsDeliveredReceiver" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_send_sms_03_SmsSentReceiver" value="public class SmsSentReceiver extends android.content.BroadcastReceiver {&#10;    @Override&#10;    public void onReceive(Context context, android.content.Intent arg1) {&#10;        switch (getResultCode()) {&#10;            case android.app.Activity.RESULT_OK:&#10;                android.widget.Toast.makeText(context, &quot;SMS Sent&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case android.telephony.SmsManager.RESULT_ERROR_GENERIC_FAILURE:&#10;                Toast.makeText(context, &quot;SMS generic failure&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case SmsManager.RESULT_ERROR_NO_SERVICE:&#10;                Toast.makeText(context, &quot;SMS no service&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case SmsManager.RESULT_ERROR_NULL_PDU:&#10;                Toast.makeText(context, &quot;SMS null PDU&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case SmsManager.RESULT_ERROR_RADIO_OFF:&#10;                Toast.makeText(context, &quot;SMS radio off&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;        }&#10;    }&#10;}" description="Write the code for the class SmsSentReceiver." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_share_text" value="String shareBody = &quot;Here is the share content body&quot;;&#10;android.content.Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);&#10;sharingIntent.setType(&quot;text/plain&quot;);&#10;sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, &quot;Subject Here&quot;);&#10;sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBody);&#10;startActivity(Intent.createChooser(sharingIntent, getResources().getString(R.string.share_using)));" description="Launch an intent to share a text." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_broadcastReceiver_power_plugg" value="android.content.BroadcastReceiver mBroadcastReceiverPower = new BroadcastReceiver() {&#10;&#9;@Override&#10;&#9;public void onReceive(android.content.Context context, android.content.Intent intent) {&#10;&#9;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;&#9;android.util.Log.d(TAG, &quot;onReceive &quot; + intent.getAction());&#10;&#9;&#9;}&#10;&#9;}&#10;};&#10;&#10; // START PROCESS&#10;@Override&#10;public void onStart() {&#10;&#9;super.onStart();&#10;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;Log.d(TAG, &quot;onStart &quot;);&#10;&#9;}&#10;&#9;android.content.IntentFilter filter = new IntentFilter();&#10;&#9;filter.addAction(Intent.ACTION_POWER_DISCONNECTED);&#10;&#9;filter.addAction(Intent.ACTION_POWER_CONNECTED);&#10;&#9;this.registerReceiver(mBroadcastReceiverPower, filter); // using activity context.&#10;}&#10;&#10;@Override&#10;public void onStop() {&#10;&#9;if (BuildConfig.DEBUG) {&#10;&#9;&#9;Log.d(TAG, &quot;onStop &quot;);&#10;&#9;}&#10;&#9;this.unregisterReceiver(mBroadcastReceiverPower);&#10;&#9;super.onStop();&#10;}" description="Receive an event when the power is plugged or unplugged." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_gms_google_services_get_position" value="// TODO : Add to the graddle :&#10;// implementation 'com.google.android.gms:play-services-maps:17.0.0'&#10;// implementation 'com.google.android.gms:play-services-location:17.0.0'&#10;&#10;com.google.android.gms.location.FusedLocationProviderClient client = com.google.android.gms.location.LocationServices.getFusedLocationProviderClient(this);&#10;&#10;// Get the last known location&#10;client.getLastLocation()&#10;&#9;&#9;.addOnCompleteListener(this, new com.google.android.gms.tasks.OnCompleteListener&lt;android.location.Location&gt;() {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public void onComplete(@NonNull com.google.android.gms.tasks.Task&lt;Location&gt; task) {&#10;&#9;&#9;&#9;&#9;com.google.android.gms.maps.model.LatLng currentLocation = new LatLng(task.getResult().getLatitude(), task.getResult().getLongitude());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});" description="Get the last known position using Google Services." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_input_text_action_edittext" value="// TODO : add to EditText attribute&#10;// android:imeOptions=&quot;actionSend&quot; &#10;&#10;// TODO : add to EditText attribute&#10;// android:imeOptions=&quot;actionSend&quot; &#10;&#10;EditText editText = (EditText) findViewById(R.id.search);&#10;editText.setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {&#10;    @Override&#10;    public boolean onEditorAction(TextView v, int actionId, android.view.KeyEvent event) {&#10;        boolean handled = false;&#10;        if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEND) {&#10;            sendMessage();&#10;            handled = true;&#10;        }&#10;        return handled;&#10;    }&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_pip" value="private void enterPIP() {&#10;    // $END$TODO: In the manifest, in the class, add:&#10;    // android:supportsPictureInPicture=&quot;true&quot;&#10;    // More details : https://github.com/googlearchive/android-PictureInPicture&#10;    if (android.os.Build.VERSION.SDK_INT &gt;= 24) {&#10;        if ($context$.getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_PICTURE_IN_PICTURE)) {&#10;            $context$.enterPictureInPictureMode();&#10;        }&#10;    }&#10;}" description="Launch Picture in Picture mode." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? _1+'.this' : 'getApplicationContext()'&quot;, className())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_intent_select_picture_in_gallery" value="// TODO add this at the top, inside the class $className$&#10;// private static final Integer REQUEST_CODE_SELECT_PICTURE = 2345; // Arbitrary value&#10;&#10;Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#10;startActivityForResult(intent, REQUEST_CODE_SELECT_PICTURE);&#10;&#10;// TODO : Run the &quot;android_intent_select_picture_in_gallery_result&quot; live template, outside of a method, but inside of the $className$ class." description="Select a picture in the gallery." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="and_intent_select_picture_in_gallery_result" value="@Override&#10;protected void onActivityResult(int requestCode, int resultCode, @androidx.annotation.Nullable android.content.Intent data) {&#10;    super.onActivityResult(requestCode, resultCode, data);&#10;    if (requestCode == REQUEST_CODE_SELECT_PICTURE) {&#10;        if (resultCode == android.app.Activity.RESULT_OK) {&#10;            if (data != null) {&#10;                imageView.setImageURI(data.getData());&#10;            }&#10;        }&#10;    }&#10;}" description="Implement the onActivityResult to handle the selected picture." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_fullscreen_immersive" value="@Override&#10;public void onWindowFocusChanged(boolean hasFocus) {&#10;    super.onWindowFocusChanged(hasFocus);&#10;    if (hasFocus) {&#10;        hideSystemUI();&#10;    }&#10;}&#10;&#10;private void hideSystemUI() {&#10;    // Enables regular immersive mode.&#10;    // For &quot;lean back&quot; mode, remove SYSTEM_UI_FLAG_IMMERSIVE.&#10;    // Or for &quot;sticky immersive,&quot; replace it with SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;    android.view.View decorView = getWindow().getDecorView();&#10;    decorView.setSystemUiVisibility(&#10;            View.SYSTEM_UI_FLAG_IMMERSIVE&#10;                    // Set the content to appear under the system bars so that the&#10;                    // content doesn't resize when the system bars hide and show.&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                    // Hide the nav bar and status bar&#10;                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;                    | View.SYSTEM_UI_FLAG_FULLSCREEN);&#10;}&#10;&#10;// Shows the system bars by removing all the flags&#10;// except for the ones that make the content appear under the system bars.&#10;private void showSystemUI() {&#10;    View decorView = getWindow().getDecorView();&#10;    decorView.setSystemUiVisibility(&#10;            View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);&#10;}" description="Display activity in full screen, hiding all menu, ..." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="and_copy_to_clipboard" value="private void copyContentToClipboard(String label, String content){&#10;    android.content.ClipboardManager clipboard = (ClipboardManager) getSystemService(android.content.Context.CLIPBOARD_SERVICE);&#10;    ClipData clip = android.content.ClipData.newPlainText(label, content);&#10;    clipboard.setPrimaryClip(clip);&#10;}" description="Write a function to copy content to clipboard." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>