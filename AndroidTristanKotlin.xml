<templateSet group="AndroidTristanKotlin">
  <template name="and_intent_activity" value="    val intent = android.content.Intent($context$, $target$::class.java)&#10;    &#10;    //        // First way to do&#10;    //        val b = Bundle()&#10;    //        b.putByte(INTENT_PARAMS_BYTE, 1 as Byte)&#10;    //        b.putByteArray(INTENT_PARAMS_BYTE_ARRAY, ByteArray(1))&#10;    //        b.putBoolean(INTENT_PARAMS_BOOLEAN, true)&#10;    //        b.putBooleanArray(INTENT_PARAMS_BOOLEAN_ARRAY, BooleanArray(1))&#10;    //        b.putChar(INTENT_PARAMS_CHAR, 'c')&#10;    //        b.putCharArray(INTENT_PARAMS_CHAR_ARRAY, CharArray(1))&#10;    //        b.putCharSequence(INTENT_PARAMS_CHAR_SEQUENCE, &quot;&quot;)&#10;    //        b.putCharSequenceArray(INTENT_PARAMS_CHAR_SEQUENCE_ARRAY, Array&lt;CharSequence&gt;(1) { &quot;&quot; })&#10;    //        b.putCharSequenceArrayList(&#10;    //            INTENT_PARAMS_CHAR_SEQUENCE_ARRAY_LIST,&#10;    //            ArrayList&lt;CharSequence&gt;(1)&#10;    //        )&#10;    //        b.putDouble(INTENT_PARAMS_DOUBLE, 1 as Double)&#10;    //        b.putDoubleArray(INTENT_PARAMS_DOUBLE_ARRAY, DoubleArray(1))&#10;    //        b.putFloat(INTENT_PARAMS_FLOAT, 1 as Float)&#10;    //        b.putFloatArray(INTENT_PARAMS_FLOAT_ARRAY, FloatArray(1))&#10;    //        b.putInt(INTENT_PARAMS_INT, 1)&#10;    //        b.putIntArray(INTENT_PARAMS_INT_ARRAY, IntArray(1))&#10;    //        b.putIntegerArrayList(INTENT_PARAMS_INT_ARRAY_LIST, ArrayList&lt;Int&gt;(1))&#10;    //        b.putLong(INTENT_PARAMS_LONG, 1 as Long)&#10;    //        b.putLongArray(INTENT_PARAMS_LONG_ARRAY, LongArray(1))&#10;    //        b.putShort(INTENT_PARAMS_SHORT, 1 as Short)&#10;    //        b.putShortArray(INTENT_PARAMS_SHORT_ARRAY, ShortArray(1))&#10;    //        b.putString(INTENT_PARAMS_STRING, &quot;&quot;)&#10;    //        b.putStringArray(INTENT_PARAMS_STRING_ARRAY, Array&lt;String&gt;(1) { &quot;&quot; })&#10;    //        b.putStringArrayList(INTENT_PARAMS_STRING_ARRAY_LIST, ArrayList&lt;String&gt;(1))&#10;    //        intent.putExtras(b)&#10;    &#10;    ////        Second way to do : put anything you want&#10;    //        intent.putExtra(INTENT_PARAMS_EXTRA_VALUE, &quot;&quot;)&#10;    &#10;    $launchContext$startActivity(intent)&#10;$END$" description="Launch an intent to launch a news activity." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <variable name="target" expression="" defaultValue="&quot;TargetActivity&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_tag" value="companion object {&#10;    private const val TAG = &quot;$className$&quot;&#10;}" description="Define the TAG used in the Log method." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="groovyScript(&quot;_1.take(Math.min(23, _1.length()));&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_log_parameters" value="android.util.Log.d(TAG, $content$)" description="Log the parameters values of the method." toReformat="true" toShortenFQNames="true">
    <variable name="content" expression="groovyScript(&quot;def params = _2.collect {it + ' = [\$' + it + ']'}.join(', ');return '\&quot;' + _1 + '() called' + (params.empty  ? '' : ' with: ' + params) + '\&quot;'&quot;, kotlinFunctionName(), functionParameters())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_onCreate" value="var $var_name$ = savedInstanceState?.getString(Constants.INTENT_PARAM_$var_intent_name$) ?: intent.getStringExtra(Constants.INTENT_PARAM_$var_intent_name$)" description="Manage the Intent parameters." toReformat="true" toShortenFQNames="true">
    <variable name="var_name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="var_intent_name" expression="capitalizeAndUnderscore(var_name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_animation_images" value="        // TODO : Add images you want to animate in your drawable folder.&#10;&#10;        // TODO : Create a ressource file, in drawable :&#10;        //    image_animation.xml&#10;        //    &#10;        //    That will contain :&#10;        //    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;        //    &lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        //    &lt;item android:drawable=&quot;@drawable/image1&quot; android:duration=&quot;3000&quot;/&gt;&#10;        //    &lt;item android:drawable=&quot;@drawable/image2&quot; android:duration=&quot;3000&quot;/&gt;&#10;        //    &lt;item android:drawable=&quot;@drawable/image3&quot; android:duration=&quot;3000&quot;/&gt;&#10;        //    &lt;/animation-list&gt;&#10;&#10;        // TODO : add in your layout the following code :&#10;        //    &lt;ImageView&#10;        //    android:id=&quot;@+id/activity_main_imageView_image&quot;&#10;        //    android:layout_width=&quot;match_parent&quot;&#10;        //    android:layout_height=&quot;300dp&quot;&#10;        //    android:background=&quot;@drawable/image_animation&quot;&#10;        //    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        //    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        var myImageView = findViewById&lt;android.widget.ImageView&gt;(R.id.activity_main_imageView_image)&#10;        var animation = myImageView.background as android.graphics.drawable.AnimationDrawable?&#10;        animation?.setEnterFadeDuration(1000)&#10;        animation?.setExitFadeDuration(1000)&#10;        animation?.start()" description="Add an animations (gallery fading images)." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_animation_colors" value="        // TODO : Create the following ressources files in the drawable folder:&#10;        //    color_one.xml&#10;        //    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;        //    &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        //    &lt;gradient&#10;        //    android:angle=&quot;225&quot;&#10;        //    android:endColor=&quot;#0000FF&quot;&#10;        //    android:startColor=&quot;#FF0000&quot; /&gt;&#10;        //    &lt;/shape&gt;&#10;        //&#10;        //    color_two.xml&#10;        //    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;        //    &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        //    &lt;gradient&#10;        //    android:angle=&quot;225&quot;&#10;        //    android:endColor=&quot;#FF0000&quot;&#10;        //    android:startColor=&quot;#0000FF&quot; /&gt;&#10;        //    &lt;/shape&gt;&#10;        //&#10;        //    color_three.xml&#10;        //    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;        //    &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        //    &lt;gradient&#10;        //    android:angle=&quot;225&quot;&#10;        //    android:endColor=&quot;#4CAF50&quot;&#10;        //    android:startColor=&quot;#FFEB3B&quot; /&gt;&#10;        //    &lt;/shape&gt;&#10;        //&#10;        //    color_mix.xml&#10;        //    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;        //    &lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        //&#10;        //    &lt;item&#10;        //    android:drawable=&quot;@drawable/color_one&quot;&#10;        //    android:duration=&quot;2000&quot; /&gt;&#10;        //    &lt;item&#10;        //    android:drawable=&quot;@drawable/color_two&quot;&#10;        //    android:duration=&quot;2000&quot; /&gt;&#10;        //    &lt;item&#10;        //    android:drawable=&quot;@drawable/color_three&quot;&#10;        //    android:duration=&quot;2000&quot; /&gt;&#10;        //    &lt;/animation-list&gt;&#10;&#10;        // TODO : then update the main layout&#10;//        android:background=&quot;@drawable/color_mix&quot;&#10;//        android:id=&quot;@+id/activity_main_view_parent&quot;&#10;&#10;        var myView = findViewById&lt;android.view.View&gt;(R.id.activity_main_view_parent)&#10;        var animation = myView.background as android.graphics.drawable.AnimationDrawable?&#10;        animation?.setEnterFadeDuration(1000)&#10;        animation?.setExitFadeDuration(1000)&#10;        animation?.start()" description="Add an animations (gradient fading colors)." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_mediaplayer_play_ressource_sound" value="val sound = findViewById&lt;Button&gt;(R.id.activity_main_button_show_text)&#10;        val mediaPlayer = MediaPlayer.create(&#10;            this@MainActivity,&#10;            resources.getIdentifier(sound.tag as String, &quot;raw&quot;, packageName)&#10;        )&#10;        mediaPlayer.start()&#10;&#10;        if (mediaPlayer.isPlaying) {&#10;            sound.setBackgroundColor(Color.RED)&#10;        }&#10;        mediaPlayer.setOnCompletionListener {&#10;            sound.setBackgroundColor(Color.GREEN)&#10;        }" description="WIP : Play ressource id sound from tag name of button." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_play_video_ressources" value="val videoView = findViewById&lt;VideoView&gt;(R.id.activity_main_videoView_video)&#10;val videoURI = Uri.parse(&quot;android.resource://&quot; + packageName + &quot;/&quot; + R.raw.video)&#10;videoView.setVideoURI(videoURI)&#10;videoView.start()" description="WIP : Play a video from raw ressources." toReformat="true" toShortenFQNames="true" />
  <template name="and_menu" value="// TODO : create a menu folder in the ressources folder&#10;// Create the main_menu.xml file with the following content&#10;//    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;//    &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;//    &lt;item android:id=&quot;@+id/menu_run&quot; android:title=&quot;Run&quot; /&gt;&#10;//    &lt;item android:id=&quot;@+id/menu_add&quot; android:title=&quot;Add HTML code&quot; /&gt;&#10;//    &lt;item android:id=&quot;@+id/menu_clear&quot; android:title=&quot;Clear&quot; /&gt;&#10;//    &lt;item android:id=&quot;@+id/menu_close&quot; android:title=&quot;Close&quot; /&gt;&#10;//    &lt;/menu&gt;&#10;&#10;override fun onCreateOptionsMenu(menu: android.view.Menu?): Boolean {&#10;    menuInflater.inflate(R.menu.main_menu, menu)&#10;    return true&#10;}&#10;&#10;override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {&#10;    when (item.itemId) {&#10;        R.id.menu_run -&gt; {&#10;            return true&#10;        }&#10;        R.id.menu_add -&gt; {&#10;            return true&#10;        }&#10;        R.id.menu_clear -&gt; {&#10;            return true&#10;        }&#10;        R.id.menu_close -&gt; {&#10;            finish()&#10;            return true&#10;        }&#10;    }&#10;    return super.onOptionsItemSelected(item)&#10;}" description="Add a sample menu to the Activity/Fragment." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_take_picture" value="// TODO add this at the top, inside the class $className$&#10;// companion object {&#10;// &#9;private const val REQUEST_CODE_TAKE_PICTURE = 1234 // Arbitrary value&#10;// }&#10;&#10;val intentTakePicture = android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE)&#10;$launchContext$startActivityForResult(intentTakePicture, REQUEST_CODE_TAKE_PICTURE)&#10;&#10;// TODO : Run the &quot;android_intent_take_picture_result&quot; live template, outside of a method, but inside of the $className$ class." description="Launch the camera to take a picture." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_take_picture_result" value="override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;&#9;super.onActivityResult(requestCode, resultCode, data)&#10;&#10;&#9;if (requestCode == REQUEST_CODE_TAKE_PICTURE ){&#10;&#9;&#9;if(resultCode == android.app.Activity.RESULT_OK) {&#10;&#9;&#9;&#9;val image = data!!.extras?.get(&quot;data&quot;) as android.graphics.Bitmap&#10;&#9;&#9;&#9;imageView.setImageBitmap(image)&#10;&#9;&#9;}&#10;&#9;}&#10;}" description="Implement the onActivityResult to handle the taken picture." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_select_picture_in_gallery" value="// TODO add this at the top, inside the class $className$&#10;// companion object {&#10;// &#9;private const val REQUEST_CODE_SELECT_PICTURE = 2345 // Arbitrary value&#10;// }&#10;&#10;val intentSelectPicture = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)&#10;$launchContext$startActivityForResult(intentSelectPicture, REQUEST_CODE_SELECT_PICTURE)&#10;&#10;// TODO : Run the &quot;android_intent_select_picture_in_gallery_result&quot; live template, outside of a method, but inside of the $className$ class." description="Select a picture in the gallery." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_select_picture_in_gallery_result" value="override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;    super.onActivityResult(requestCode, resultCode, data)&#10;&#10;    if (requestCode == REQUEST_CODE_SELECT_PICTURE) {&#10;        if (resultCode == android.app.Activity.RESULT_OK) {&#10;            if (data != null) {&#10;                imageView.setImageURI(data.data)&#10;            }&#10;        }&#10;    }&#10;}" description="Implement the onActivityResult to handle the selected picture." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_open_play_store_market" value="try {&#10;    $launchContext$startActivity(android.content.Intent(Intent.ACTION_VIEW, android.net.Uri.parse(&quot;market://details?id=$packageName&quot;)))&#10;} catch (error: android.content.ActivityNotFoundException){&#10;    $launchContext$startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(&quot;https://play.google.com/store/apps/details?id=$packageName&quot;)))&#10;}" description="Launch an intent to Open the Google Play, Application Store." toReformat="true" toShortenFQNames="true">
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_play_video" value="// TODO : Add a VideoView in your layout&#10;&#10;val videoUrl = &quot;&quot; // TODO : fill with video URL.&#10;val video = findViewById&lt;android.widget.VideoView&gt;(R.id.videoView)&#10;video.setVideoURI(android.net.Uri.parse(videoUrl))&#10;video.start()&#10;" description="Play video Url to a VideoView." toReformat="true" toShortenFQNames="true" />
  <template name="and_launch_download_manager" value="var download = baseContext.getSystemService(android.content.Context.DOWNLOAD_SERVICE) as android.app.DownloadManager&#10;var urlToDownload = android.net.Uri.parse(&quot;$url$&quot;)&#10;var downloadRequest = DownloadManager.Request(urlToDownload)&#10;downloadRequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)&#10;download.enqueue(downloadRequest)" description="Use the DownloadManager to download a file from URL String." toReformat="true" toShortenFQNames="true">
    <variable name="url" expression="" defaultValue="&quot;http://&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert" value="val positiveButtonClick = { dialog: android.content.DialogInterface, which: Int -&gt;&#10;    android.widget.Toast.makeText(applicationContext, android.R.string.yes, Toast.LENGTH_LONG).show()&#10;}&#10;val negativeButtonClick = { dialog: DialogInterface, which: Int -&gt;&#10;    Toast.makeText(applicationContext, android.R.string.no, Toast.LENGTH_LONG).show()&#10;}&#10;val neutralButtonClick = { dialog: DialogInterface, which: Int -&gt;&#10;    Toast.makeText(applicationContext, &quot;Maybe&quot;, Toast.LENGTH_LONG).show()&#10;}&#10;&#10;val builder: android.app.AlertDialog.Builder = AlertDialog.Builder($context$)&#10;with(builder){&#10;    setTitle(&quot;Title&quot;)&#10;    setMessage(&quot;Alert dialog message&quot;)&#10;    setCancelable(false)&#10;    setPositiveButton(android.R.string.ok, positiveButtonClick)&#10;    setNegativeButton(android.R.string.cancel, negativeButtonClick)&#10;    setNeutralButton(&quot;Maybe&quot;, neutralButtonClick)&#10;    show()&#10;}" description="Display an alert Dialog." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert_custom_display" value="val builder: android.app.AlertDialog.Builder = AlertDialog.Builder($context$)&#10;with(builder) {&#10;    setTitle(&quot;Icon and Button Color&quot;)&#10;    setMessage(&quot;We have a message&quot;)&#10;    setPositiveButton(&quot;OK&quot;, null)&#10;    setNegativeButton(&quot;CANCEL&quot;, null)&#10;    setNeutralButton(&quot;NEUTRAL&quot;, null)&#10;}&#10;if (android.os.Build.VERSION.SDK_INT &gt; 21) { // resources.getDrawable need API 21+&#10;    with(builder) {&#10;        setIcon(resources.getDrawable(android.R.drawable.ic_dialog_alert, theme))&#10;    }&#10;}&#10;val alertDialog = builder.create()&#10;// MUST show the dialog before button customization&#10;// Else alertDialog.getButton will return null&#10;alertDialog.show()&#10;&#10;// Customize the button&#10;val button = alertDialog.getButton(android.content.DialogInterface.BUTTON_POSITIVE)&#10;with(button) {&#10;    setBackgroundColor(android.graphics.Color.BLACK)&#10;    setPadding(0, 0, 20, 0)&#10;    setTextColor(Color.WHITE)&#10;}" description="Display an alert Dialog with custom display." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert_list" value="val positiveButtonClick = { dialog: android.content.DialogInterface, which: Int -&gt;&#10;    android.widget.Toast.makeText(applicationContext, android.R.string.yes, Toast.LENGTH_LONG).show()&#10;}&#10;&#10;val items = arrayOf(&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Blue&quot;)&#10;val builder = android.app.AlertDialog.Builder($context$)&#10;with(builder) {&#10;    setTitle(&quot;List of Items&quot;)&#10;    setItems(items) { dialog, which -&gt;&#10;        Toast.makeText(applicationContext, &quot;${items[which]} is clicked&quot;, Toast.LENGTH_SHORT)&#10;            .show()&#10;    }&#10;    setPositiveButton(android.R.string.ok, positiveButtonClick)&#10;    show()&#10;}" description="Display an alert Dialog with list of items." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert_list_multi_check" value="val items = arrayOf(&quot;Microsoft&quot;, &quot;Apple&quot;, &quot;Amazon&quot;, &quot;Google&quot;)&#10;val selectedList = ArrayList&lt;Int&gt;()&#10;val builder = android.app.AlertDialog.Builder($context$)&#10;&#10;builder.setTitle(&quot;This is list choice dialog box&quot;)&#10;builder.setMultiChoiceItems(&#10;    items, null&#10;) { dialog, which, isChecked -&gt;&#10;    if (isChecked) {&#10;        selectedList.add(which)&#10;    } else if (selectedList.contains(which)) {&#10;        selectedList.remove(Integer.valueOf(which))&#10;    }&#10;}&#10;&#10;builder.setPositiveButton(&quot;DONE&quot;) { dialogInterface, i -&gt;&#10;    val selectedStrings = ArrayList&lt;String&gt;()&#10;&#10;    for (j in selectedList.indices) {&#10;        selectedStrings.add(items[selectedList[j]])&#10;    }&#10;&#10;    android.widget.Toast.makeText(&#10;        applicationContext,&#10;        &quot;Items selected are: &quot; + java.util.Arrays.toString(selectedStrings.toTypedArray()),&#10;        Toast.LENGTH_SHORT&#10;    ).show()&#10;}&#10;builder.show()" description="Display an alert Dialog with multiple item selectable." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert_themed" value="val positiveButtonClick = { dialog: android.content.DialogInterface, which: Int -&gt;&#10;    android.widget.Toast.makeText(applicationContext, android.R.string.yes, Toast.LENGTH_LONG).show()&#10;}&#10;val negativeButtonClick = { dialog: DialogInterface, which: Int -&gt;&#10;    Toast.makeText(applicationContext, android.R.string.no, Toast.LENGTH_LONG).show()&#10;}&#10;val neutralButtonClick = { dialog: DialogInterface, which: Int -&gt;&#10;    Toast.makeText(applicationContext, &quot;Maybe&quot;, Toast.LENGTH_LONG).show()&#10;}&#10;&#10;val builder = android.app.AlertDialog.Builder(android.view.ContextThemeWrapper($context$, android.R.style.Holo_SegmentedButton))&#10;with(builder) {&#10;    setTitle(&quot;Themed Alert Dialog&quot;)&#10;    setMessage(&quot;We have a message&quot;)&#10;    setPositiveButton(&quot;OK&quot;, android.content.DialogInterface.OnClickListener(function = positiveButtonClick))&#10;    setNegativeButton(android.R.string.no, negativeButtonClick)&#10;    setNeutralButton(&quot;Maybe&quot;, neutralButtonClick)&#10;    show()&#10;}" description="Display an alert Dialog with a theme." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_dialog_alert_with_edit_text" value="    // TODO: Put this in the layout resource file : alert_dialog_with_edittext.xml&#10;    //        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;    //        &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    //        android:orientation=&quot;vertical&quot;&#10;    //        android:layout_width=&quot;match_parent&quot;&#10;    //        android:layout_height=&quot;match_parent&quot;&gt;&#10;    //&#10;    //        &lt;EditText&#10;    //        android:id=&quot;@+id/editText&quot;&#10;    //        android:layout_width=&quot;match_parent&quot;&#10;    //        android:layout_height=&quot;wrap_content&quot;&#10;    //        android:hint=&quot;Enter the text here&quot;/&gt;&#10;    //&#10;    //        &lt;/LinearLayout&gt;&#10;    &#10;    val builder = android.app.AlertDialog.Builder($context$)&#10;    val inflater = layoutInflater&#10;    builder.setTitle(&quot;With EditText&quot;)&#10;    val dialogLayout = inflater.inflate(R.layout.alert_dialog_with_edittext, null)&#10;    val editText  = dialogLayout.findViewById&lt;android.widget.EditText&gt;(R.id.editText)&#10;    builder.setView(dialogLayout)&#10;    builder.setPositiveButton(&quot;OK&quot;) { dialogInterface, i -&gt; android.widget.Toast.makeText(applicationContext, &quot;EditText is &quot; + editText.text.toString(), Toast.LENGTH_SHORT).show() }&#10;    builder.show()&#10;$END$" description="Display an alert Dialog with an EditText." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_external_application" value="    var intent = android.content.Intent()&#10;    intent.setAction(&quot;$package$.$intent_filter$&quot;)&#10;    startActivity(intent)&#10;    &#10;    // TODO : In the other application, you have to add the following intent filter to the activity you would like to launch&#10;    // &lt;activity android:name=&quot;.MyActivity&quot;&gt;&#10;    //     &lt;intent-filter&gt;&#10;    //         &lt;action android:name=&quot;$package$.$intent_filter$&quot; /&gt;&#10;    //         &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;    //     &lt;/intent-filter&gt;&#10;    // &lt;/activity&gt;&#10;$END$" description="Launch an external application." toReformat="true" toShortenFQNames="true">
    <variable name="package" expression="kotlinPackageName()" defaultValue="" alwaysStopAt="false" />
    <variable name="intent_filter" expression="" defaultValue="&quot;ACTION_TO_LAUNCH&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_is_available" value="fun isIntentAvailable(ctx: android.content.Context, intent: android.content.Intent?): Boolean {&#10;    val mgr = ctx.packageManager&#10;    val list = mgr.queryIntentActivities(intent, android.content.pm.PackageManager.MATCH_DEFAULT_ONLY)&#10;    return list.size &gt; 0&#10;}" description="Function isIntentAvailable to check if the intent is available before using it." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_launch_application_with_package" value="var intentLaunchApplication = $context$.getPackageManager().getLaunchIntentForPackage(&quot;$packageName$&quot;)&#10;$launchContext$startActivity(intentLaunchApplication);&#10;$END$" description="Launch an intent to launch an application knowing it's package name." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <variable name="packageName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_mail" value="    val emailList = arrayOf(&quot;$emailReceiver$&quot;)&#10;    &#10;    val intentEmail = android.content.Intent(Intent.ACTION_SEND)&#10;    intentEmail.type = &quot;plain/text&quot;&#10;    intentEmail.putExtra(Intent.EXTRA_SUBJECT, &quot;$subject$&quot;)&#10;    intentEmail.putExtra(Intent.EXTRA_TEXT, &quot;$emailContent$&quot;)&#10;    intentEmail.putExtra(Intent.EXTRA_EMAIL, emailList)&#10;    // TODO : Choose what you want: comment the previous line, and uncomment on of the 2 following lines.&#10;    //        intentEmail.putExtra(Intent.EXTRA_CC, emailList);&#10;    //        intentEmail.putExtra(Intent.EXTRA_BCC, emailList);&#10;    try {&#10;        $launchContext$startActivity(Intent.createChooser(intentEmail, &quot;$chooserTitle$&quot;))&#10;    } catch (ex: android.content.ActivityNotFoundException) {&#10;        android.widget.Toast.makeText($context$, &quot;$errorNoChooser$&quot;, Toast.LENGTH_SHORT).show()&#10;    }&#10;$END$" description="Launch an intent to send a mail." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <variable name="emailReceiver" expression="" defaultValue="&quot;test@test.com&quot;" alwaysStopAt="true" />
    <variable name="subject" expression="" defaultValue="&quot;Content of the email&quot;" alwaysStopAt="true" />
    <variable name="emailContent" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true" />
    <variable name="chooserTitle" expression="" defaultValue="&quot;Send the mail using ...&quot;" alwaysStopAt="true" />
    <variable name="errorNoChooser" expression="" defaultValue="&quot;Error: no client found to sent the message&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_map" value="    // To display the marker&#10;    val latitude = &quot;$latitude$&quot;&#10;    val longitude = &quot;$longitude$&quot;&#10;    val description = &quot;$description$&quot;&#10;    val zoomValue = &quot;$zoomValue$&quot;&#10;    &#10;    // To display the marker&#10;    val uri = &quot;http://maps.google.com/maps?q=${latitude},${longitude}(${description})&amp;z=${zoomValue}&quot;&#10;    &#10;    val intentMaps = android.content.Intent(Intent.ACTION_VIEW, android.net.Uri.parse(uri))&#10;    intentMaps.setClassName(&quot;com.google.android.apps.maps&quot;, &quot;com.google.android.maps.MapsActivity&quot;)&#10;    $launchContext$startActivity(intentMaps)&#10;$END$" description="Launch an intent to open a goole map." toReformat="true" toShortenFQNames="true">
    <variable name="latitude" expression="" defaultValue="&quot;43.2803692&quot;" alwaysStopAt="true" />
    <variable name="longitude" expression="" defaultValue="&quot;5.310457&quot;" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="&quot;Marseille&quot;" alwaysStopAt="true" />
    <variable name="zoomValue" expression="" defaultValue="&quot;12&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_open_image" value="    val filePath = &quot;$filePath$&quot;&#10;    val intentOpenImage = Intent()&#10;    intentOpenImage.action = Intent.ACTION_VIEW&#10;    intentOpenImage.setDataAndType(Uri.parse(&quot;file://${filePath}&quot;), &quot;image/*&quot;)&#10;    $launchContext$startActivity(intentOpenImage)&#10;$END$" description="Launch an intent to open an image in the gallery." toReformat="true" toShortenFQNames="true">
    <variable name="filePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_phone_call_permissions" value="    // TODO : Add &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt; permission in the Manifest file.&#10;    val callIntent = android.content.Intent(Intent.ACTION_CALL, android.net.Uri.fromParts(&quot;tel&quot;, &quot;$phoneNumber$&quot;, null))&#10;    // TODO : Handle the permissions instead of this ugly try/catch.&#10;    try {&#10;        $launchContext$startActivity(callIntent)&#10;    } catch (e: java.lang.SecurityException){&#10;        // Handle error&#10;    }&#10;$END$" description="Launch an intent to make a phone call, require permissions." toReformat="true" toShortenFQNames="true">
    <variable name="phoneNumber" expression="" defaultValue="&quot;0612345678&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_phone_call" value="    val intentPhoneDial = android.content.Intent(Intent.ACTION_DIAL, android.net.Uri.fromParts(&quot;tel&quot;, &quot;$phoneNumber$&quot;, null))&#10;    $launchContext$startActivity(intentPhoneDial)&#10;$END$" description="Launch an intent to make a phone call." toReformat="true" toShortenFQNames="true">
    <variable name="phoneNumber" expression="" defaultValue="&quot;0612345678&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_returnValue" value="    var resultIntent = android.content.Intent()&#10;    // TODO Add extras or a data URI to this intent as appropriate.&#10;    resultIntent.putExtra(&quot;some_key&quot;, &quot;some_value&quot;)&#10;    setResult(android.app.Activity.RESULT_OK, resultIntent)&#10;    finish()&#10;$END$" description="Return value in intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_select_contact" value="// TODO add this at the top, inside the class $className$&#10;companion object {&#10;&#9;private const val REQUEST_CODE_PICK_CONTACT = 3456 // Arbitrary value&#10;}&#10;&#10;fun selectContact() {&#10;    val intent = android.content.Intent(Intent.ACTION_PICK, android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_URI)&#10;    if (intent.resolveActivity(packageManager) != null) {&#10;        $launchContext$startActivityForResult(intent, REQUEST_CODE_PICK_CONTACT)&#10;    }&#10;}&#10;// TODO : Run the &quot;android_intent_select_contact_result&quot; live template, outside of a method, but inside of the $className$ class.&#10;" description="Launch the contact picker." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_select_contact_result" value="override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;    super.onActivityResult(requestCode, resultCode, data)&#10;&#10;    if (requestCode == REQUEST_CODE_PICK_CONTACT) {&#10;        if (resultCode == android.app.Activity.RESULT_OK) {&#10;            if (data != null) {&#10;                val contactUri = data.data as android.net.Uri&#10;                var cursor = getContentResolver().query(contactUri, null, null, null, null)&#10;                cursor?.moveToFirst()&#10;                var column = cursor?.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER)&#10;                &#10;                // Remove the spaces in the phone numbers&#10;                var phoneNumber = cursor?.getString(column!!)?.replace(&quot; &quot;, &quot;&quot;);&#10;                android.util.Log.d(&quot;phone number&quot;, phoneNumber);&#10;                &#10;                // TODO : do what you want with the value.&#10;                $END$&#10;            }&#10;        }&#10;    }&#10;}" description="Implement the onActivityResult corresponding to the intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_share_sound" value="    val sharePath: String = &quot;$filePath$&quot;&#10;    val uri = android.net.Uri.parse(sharePath)&#10;    val intentShareSound = android.content.Intent(Intent.ACTION_SEND)&#10;    intentShareSound.type = &quot;audio/*&quot;&#10;    intentShareSound.putExtra(Intent.EXTRA_STREAM, uri)&#10;    $launchContext$startActivity(Intent.createChooser(intentShareSound, &quot;$label$&quot;))    &#10;$END$" description="WIP Launch an intent to share a sound." toReformat="true" toShortenFQNames="true">
    <variable name="filePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="label" expression="" defaultValue="&quot;Share using:&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_share_text" value="    val shareBody = &quot;$messageContent$&quot;&#10;    val intentShareText = android.content.Intent(Intent.ACTION_SEND)&#10;    intentShareText.type = &quot;text/plain&quot;&#10;    intentShareText.putExtra(Intent.EXTRA_SUBJECT, &quot;$messageTitle$&quot;)&#10;    intentShareText.putExtra(Intent.EXTRA_TEXT, shareBody)&#10;    $launchContext$startActivity(&#10;        Intent.createChooser(&#10;            intentShareText,&#10;            resources.getString(R.string.share_using)&#10;        )&#10;    )&#10;$END$" description="Launch an intent to share a text." toReformat="true" toShortenFQNames="true">
    <variable name="messageContent" expression="" defaultValue="&quot;Here is the share content body&quot;" alwaysStopAt="true" />
    <variable name="messageTitle" expression="" defaultValue="&quot;Subject Here&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_sms" value="    val smsSendToNumber = &quot;$phoneNumber$&quot;&#10;    val uri = android.net.Uri.parse(&quot;smsto:$smsSendToNumber&quot;)&#10;    val intentSendSMS = android.content.Intent(Intent.ACTION_SENDTO, uri)&#10;    intent.putExtra(&quot;sms_body&quot;, &quot;$messageToSend$&quot;)&#10;    $launchContext$startActivity(intentSendSMS)&#10;$END$" description="Launch an intent to send a sms." toReformat="true" toShortenFQNames="true">
    <variable name="phoneNumber" expression="" defaultValue="&quot;0612345678&quot;" alwaysStopAt="true" />
    <variable name="messageToSend" expression="" defaultValue="&quot;Message to send by SMS&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_voice_recognition" value="        // FIXME : Add at least the first line&#10;        //        &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#10;        //        &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;        //        &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;        // FIXME : Handle the permission to record&#10;&#10;        // TODO : move this line outside of a method, inside the class.&#10;        lateinit var recognizer: android.speech.SpeechRecognizer&#10;        &#10;        recognizer = SpeechRecognizer.createSpeechRecognizer(this@MainActivity)&#10;        val recognizerIntent = android.content.Intent(android.speech.RecognizerIntent.ACTION_RECOGNIZE_SPEECH)&#10;        recognizerIntent.putExtra(&#10;            RecognizerIntent.EXTRA_LANGUAGE_MODEL,&#10;            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM&#10;        )&#10;        recognizerIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, packageName)&#10;        recognizerIntent.putExtra(RecognizerIntent.EXTRA_PREFER_OFFLINE, true)&#10;&#10;        recognizer.setRecognitionListener(object : android.speech.RecognitionListener {&#10;            override fun onReadyForSpeech(params: Bundle) {&#10;                if (BuildConfig.DEBUG) {&#10;                    android.util.Log.d(TAG, &quot;onReadyForSpeech &quot;)&#10;                }&#10;            }&#10;&#10;            override fun onBeginningOfSpeech() {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onBeginningOfSpeech &quot;)&#10;                }&#10;            }&#10;&#10;            override fun onRmsChanged(rmsdB: Float) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onRmsChanged $rmsdB&quot;)&#10;                }&#10;            }&#10;&#10;            override fun onBufferReceived(buffer: ByteArray) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onBufferReceived &quot;)&#10;                }&#10;            }&#10;&#10;            override fun onEndOfSpeech() {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onEndOfSpeech &quot;)&#10;                }&#10;            }&#10;&#10;            override fun onError(error: Int) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onError ${error}&quot;)&#10;                    when (error) {&#10;                        SpeechRecognizer.ERROR_AUDIO -&gt; Log.d(TAG, &quot;Error audio&quot;)&#10;                        SpeechRecognizer.ERROR_CLIENT -&gt; Log.d(TAG, &quot;Error client&quot;)&#10;                        SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS -&gt; Log.d(&#10;                            TAG,&#10;                            &quot;Error insufficient permissions&quot;&#10;                        )&#10;                        SpeechRecognizer.ERROR_NETWORK -&gt; Log.d(TAG, &quot;Error network&quot;)&#10;                        SpeechRecognizer.ERROR_NETWORK_TIMEOUT -&gt; Log.d(&#10;                            TAG,&#10;                            &quot;Error network timeout&quot;&#10;                        )&#10;                        SpeechRecognizer.ERROR_NO_MATCH -&gt; Log.d(TAG, &quot;Error no match&quot;)&#10;                        SpeechRecognizer.ERROR_RECOGNIZER_BUSY -&gt; Log.d(&#10;                            TAG,&#10;                            &quot;Error recognizer busy&quot;&#10;                        )&#10;                        SpeechRecognizer.ERROR_SERVER -&gt; Log.d(TAG, &quot;Error server&quot;)&#10;                        SpeechRecognizer.ERROR_SPEECH_TIMEOUT -&gt; Log.d(TAG, &quot;Error speech timeout&quot;)&#10;                        else -&gt; Log.d(TAG, &quot;Error unknown&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            override fun onResults(results: Bundle) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onResults &quot;)&#10;                }&#10;                val resultString =&#10;                    results.getStringArrayList(&quot;results_recognition&quot;)&#10;                val resultConfidence =&#10;                    results.getFloatArray(&quot;confidence_scores&quot;)&#10;                for (i in resultString!!.indices) {&#10;                    if (BuildConfig.DEBUG) {&#10;                        Log.d(&#10;                            TAG,&#10;                            &quot;result &quot; + resultString!![i] + &quot; (&quot; + resultConfidence!![i] + &quot;)&quot;&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            override fun onPartialResults(partialResults: Bundle) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onPartialResults &quot;)&#10;                }&#10;            }&#10;&#10;            override fun onEvent(eventType: Int, params: Bundle) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onEvent &quot;)&#10;                }&#10;            }&#10;        })&#10;&#10;        // Start listening&#10;        recognizer.startListening(recognizerIntent)&#10;&#10;        // Stop listening after 10 seconds&#10;        android.os.Handler().postDelayed({ recognizer.stopListening() }, 10 * 1000.toLong())&#10;&#10;        // TODO : move this method outside, to cleanup the recognizer and avoid android.app.ServiceConnectionLeaked error&#10;//        override fun onDestroy() {&#10;//            recognizer.destroy()&#10;//            super.onDestroy()&#10;//        }" description="Launch a voice recognition intent." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_web" value="    val browserIntent = android.content.Intent(Intent.ACTION_VIEW, android.net.Uri.parse(&quot;http://$urlValue$&quot;))&#10;    $launchContext$startActivity(browserIntent)&#10;$END$" description="Launch an intent to browse a website." toReformat="true" toShortenFQNames="true">
    <variable name="urlValue" expression="" defaultValue="&quot;light4events.fr&quot;" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_lifecycle_activity" value="    // START PROCESS&#10;    override fun onStart() {&#10;        super.onStart()&#10;        if (BuildConfig.DEBUG) {&#10;            android.util.Log.d(TAG, &quot;onStart &quot;)&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onResume &quot;)&#10;        }&#10;    }&#10;&#10;    override fun onRestart() {&#10;        super.onRestart()&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onRestart &quot;)&#10;        }&#10;    }&#10;&#10;    // DESTROY PROCESS&#10;    override fun onPause() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onPause &quot;)&#10;        }&#10;        super.onPause()&#10;    }&#10;&#10;&#10;    override fun onStop() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onStop &quot;)&#10;        }&#10;        super.onStop()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onDestroy &quot;)&#10;        }&#10;        super.onDestroy()&#10;    }" description="Implement all the methods of the life cycle of an Activity." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_lifecycle_fragment" value="    // START PROCESS&#10;    override fun onAttach(context: android.content.Context) {&#10;        super.onAttach(context)&#10;        if (BuildConfig.DEBUG) {&#10;            android.util.Log.d(TAG, &quot;onAttach &quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onCreate &quot;)&#10;        }&#10;    }&#10;    &#10;    override fun onActivityCreated(savedInstanceState: Bundle?) {&#10;        super.onActivityCreated(savedInstanceState)&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onActivityCreated &quot;)&#10;        }&#10;    }&#10;    &#10;    override fun onStart() {&#10;        super.onStart()&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onStart &quot;)&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onResume &quot;)&#10;        }&#10;    }&#10;    &#10;    // DESTROY PROCESS&#10;    override fun onPause() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onPause &quot;)&#10;        }&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onStop() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onStop &quot;)&#10;        }&#10;        super.onStop()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onDestroyView &quot;)&#10;        }&#10;        super.onDestroyView()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onDestroy &quot;)&#10;        }&#10;        super.onDestroy()&#10;    }&#10;&#10;    override fun onDetach() {&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onDetach &quot;)&#10;        }&#10;        super.onDetach()&#10;    }" description="Implement all the methods of the life cycle of a Fragment." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_log" value="    if (BuildConfig.DEBUG) {&#10;        android.util.Log.d(TAG, &quot;$methodName$ $content$&quot;)&#10;    }&#10;$END$" description="Debug log." toReformat="true" toShortenFQNames="true">
    <variable name="methodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_onActivityResult" value="    override fun onActivityResult( requestCode: Int, resultCode: Int, data: android.content.Intent? ) {&#10;        when (requestCode) {&#10;            REQUEST_$action_name$ -&gt; if (resultCode == android.app.Activity.RESULT_OK) {&#10;                // TODO : implement the OK case&#10;            } else {&#10;                // TODO : implement the KO case&#10;            }&#10;            else -&gt; super.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;&#10;    // TODO add this at the top, inside the class $className$&#10;    // companion object {&#10;    // &#9;private const val REQUEST_CODE_$action_name$ = 1234 // Arbitrary value&#10;    // }&#10;    &#10;    // Call with :&#10;    // val intentToLaunch = Intent() // TODO : update the intent to launch, if needed&#10;    // $launchContext$startActivityForResult(intentToLaunch, REQUEST_$action_name$)&#10;$END$" description="Template for the onActivityResult method." toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="action_name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_only_me" value="    // TODO: Launch the application a first time with log filter : DEVICE ID, to get the device Id.&#10;    // Then you can delete the following bloc&#10;    if (BuildConfig.DEBUG) {&#10;        android.util.Log.d(&#10;            TAG,&#10;            &quot;DEVICE ID = &quot; + android.provider.Settings.Secure.getString($context$.getContentResolver(), Settings.Secure.ANDROID_ID))&#10;    }&#10;&#10;    // Code that is launched only for my device.&#10;    if (Settings.Secure.getString($context$.getContentResolver(), Settings.Secure.ANDROID_ID).equals(&quot;$deviceId$&quot;)){&#10;        $toBeImplemented$&#10;        $END$&#10;    }" description="Execute code only for me (debug mode)." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <variable name="deviceId" expression="" defaultValue="&quot;ffffffffffffffff&quot;" alwaysStopAt="true" />
    <variable name="toBeImplemented" expression="" defaultValue="&quot;// TODO: to be implemented&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_pip" value="private fun enterPIP() {&#10;&#10;// $END$TODO: In the manifest, in the class, add:&#10;// android:supportsPictureInPicture=&quot;true&quot;&#10;// More details : https://github.com/googlearchive/android-PictureInPicture&#10;if (android.os.Build.VERSION.SDK_INT &gt;= 24) {&#10;    if ($context$.getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_PICTURE_IN_PICTURE)) {&#10;        if (Build.VERSION.SDK_INT &gt;= 26) {&#10;            val display = windowManager.defaultDisplay&#10;            val size = android.graphics.Point()&#10;            display.getSize(size)&#10;            val aspectRatio = android.util.Rational(size.x, size.y)&#10;            val parameters = android.app.PictureInPictureParams.Builder()&#10;                .setAspectRatio(aspectRatio)&#10;                .build()&#10;            $context$.enterPictureInPictureMode(parameters)&#10;    } else {&#10;        $context$.enterPictureInPictureMode()&#10;    }&#10;    android.util.Log.d(TAG, &quot;Entering in PIP mode&quot;)&#10;    }&#10;}&#10;}&#10;&#10;override fun onPictureInPictureModeChanged(&#10;    isInPictureInPictureMode: Boolean,&#10;    newConfig: android.content.res.Configuration?&#10;) {&#10;    if (isInPictureInPictureMode) {&#10;        // Hide controls, ...&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onPictureInPictureModeChanged in PIP mode&quot;)&#10;        }&#10;    } else {&#10;        // Restore the controls, ...&#10;        if (BuildConfig.DEBUG) {&#10;            Log.d(TAG, &quot;onPictureInPictureModeChanged out of PIP mode&quot;)&#10;        }&#10;    }&#10;    super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)&#10;}" description="Launch Picture in Picture mode." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_SharedPreferences_load" value="    // TODO: Add to gradle : implementation 'androidx.preference:preference-ktx:1.2.0'&#10;    val sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(applicationContext)&#10;    val defaultValue = resources.getInteger(R.string.value_default)&#10;    sharedPref.getInt(SHARED_PREFS_VALUE, defaultValue)&#10;$END$" description="Load value from SharedPreferences." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_SharedPreferences_save" value="    // TODO: Add to gradle : implementation 'androidx.preference:preference-ktx:1.2.0'&#10;    val sharedPref = android.preference.PreferenceManager.getDefaultSharedPreferences(applicationContext)&#10;    val editor = sharedPref.edit()&#10;    editor.putString(SHARED_PREFS_VALUE, &quot;Value&quot;)&#10;    editor.commit()&#10;$END$" description="Save key-value into SharedPreferences." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_spinner_array" value="    /* TODO: In the layout: add:&#10;    &lt;Spinner&#10;    android:id=&quot;@+id/spinner&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;/&gt;&#10;     */&#10;    &#10;    val itemList = arrayOf(&quot;String 1&quot;, &quot;String 2&quot;, &quot;String 3&quot;)&#10;&#10;    val spinner = findViewById(R.id.spinner) as android.widget.Spinner&#10;    // Create an ArrayAdapter using the string array and a default spinner layout&#10;    val adapter = android.widget.ArrayAdapter&lt;CharSequence&gt;($context$, android.R.layout.simple_spinner_item, itemList)&#10;    // TODO : For custom layout : define layout : spinner_item_text&#10;    // adapter = ArrayAdapter&lt;CharSequence&gt;($context$, R.layout.spinner_item_text, itemList);&#10;    &#10;    // Specify the layout to use when the list of choices appears&#10;    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;    // TODO : For custom layout : define layout : spinner_dropdown_item&#10;    //adapter.setDropDownViewResource(R.layout.spinner_dropdown_item);&#10;    &#10;    // Apply the adapter to the spinner&#10;    spinner.adapter = adapter&#10;&#10;    spinner.onItemSelectedListener = object : android.widget.AdapterView.OnItemSelectedListener {&#10;        override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {&#10;            // Nothing to do here.&#10;        }&#10;        override fun onItemSelected(&#10;            parent: AdapterView&lt;*&gt;?,&#10;            view: android.view.View,&#10;            pos: Int,&#10;            id: Long&#10;        ) {&#10;            android.util.Log.v(TAG,&quot;onItemSelectedListener ${pos} =&gt; ${itemList[pos]}&quot;)&#10;        }&#10;    }&#10;$END$" description="Manage a spinner from a String[]." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_spinner_string_array" value="    /* TODO: In the layout: add:&#10;    &lt;Spinner&#10;    android:id=&quot;@+id/spinner&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;/&gt;&#10;     */&#10;    &#10;    /*&#10;    TODO: In ressources folder:&#10;    In string file:&#10;    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;    &lt;resources&gt;&#10;        &lt;string-array name=&quot;planets_array&quot;&gt;&#10;            &lt;item&gt;Mercury&lt;/item&gt;&#10;            &lt;item&gt;Venus&lt;/item&gt;&#10;            &lt;item&gt;Earth&lt;/item&gt;&#10;            &lt;item&gt;Mars&lt;/item&gt;&#10;            &lt;item&gt;Jupiter&lt;/item&gt;&#10;            &lt;item&gt;Saturn&lt;/item&gt;&#10;            &lt;item&gt;Uranus&lt;/item&gt;&#10;            &lt;item&gt;Neptune&lt;/item&gt;&#10;        &lt;/string-array&gt;&#10;    &lt;/resources&gt;&#10;    */&#10;&#10;    val spinner = findViewById(R.id.spinner) as android.widget.Spinner&#10;    // Create an ArrayAdapter using the string array and a default spinner layout&#10;    val adapter = android.widget.ArrayAdapter.createFromResource($context$, R.array.planets_array, android.R.layout.simple_spinner_item)&#10;    // TODO : For custom layout : define layout : spinner_item_text&#10;    // adapter = ArrayAdapter&lt;CharSequence&gt;($context$, R.layout.spinner_item_text, itemList);&#10;    &#10;    // Specify the layout to use when the list of choices appears&#10;    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;    // TODO : For custom layout : define layout : spinner_dropdown_item&#10;    //adapter.setDropDownViewResource(R.layout.spinner_dropdown_item);&#10;    &#10;    // Apply the adapter to the spinner&#10;    spinner.adapter = adapter&#10;&#10;    spinner.onItemSelectedListener = object : android.widget.AdapterView.OnItemSelectedListener {&#10;        override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {&#10;            // Nothing to do here.&#10;        }&#10;        override fun onItemSelected(&#10;            parent: AdapterView&lt;*&gt;?,&#10;            view: android.view.View,&#10;            pos: Int,&#10;            id: Long&#10;        ) {&#10;            android.util.Log.v(TAG,&quot;onItemSelectedListener ${pos}&quot;)&#10;        }&#10;    }&#10;$END$" description="Manage a spinner from a string array exemple." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_test_log" value="android.util.Log.v(TAG, &quot;$methodName$ $content$&quot;)&#10;Log.d(TAG, &quot;$methodName$ $content$&quot;)&#10;Log.i(TAG, &quot;$methodName$ $content$&quot;)&#10;Log.w(TAG, &quot;$methodName$ $content$&quot;)&#10;Log.e(TAG, &quot;$methodName$ $content$&quot;)&#10;Log.wtf(TAG, &quot;$methodName$ $content$&quot;)&#10;" description="Display the different kind of log levels." toReformat="true" toShortenFQNames="true">
    <variable name="methodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="&quot;Tristan&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_version" value="    android.util.Log.i(TAG, &quot;Build.VERSION.SDK_INT = &quot; + android.os.Build.VERSION.SDK_INT)&#10;    Log.i(TAG, &quot;Build.VERSION.CODENAME = &quot; + Build.VERSION.CODENAME)&#10;    Log.i(TAG, &quot;Build.VERSION.INCREMENTAL = &quot; + Build.VERSION.INCREMENTAL)&#10;    Log.i(TAG, &quot;Build.VERSION.RELEASE = &quot; + Build.VERSION.RELEASE)&#10;    if(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.M){&#10;        Log.i(TAG, &quot;Build.VERSION.BASE_OS = &quot; + Build.VERSION.BASE_OS)&#10;        Log.i(TAG, &quot;Build.VERSION.SECURITY_PATCH = &quot; + Build.VERSION.SECURITY_PATCH)&#10;    }&#10;    Log.i(TAG, &quot;Build.BOARD = &quot; + Build.BOARD)&#10;    Log.i(TAG, &quot;Build.BOOTLOADER = &quot; + Build.BOOTLOADER)&#10;    Log.i(TAG, &quot;Build.BRAND = &quot; + Build.BRAND)&#10;    Log.i(TAG, &quot;Build.DEVICE = &quot; + Build.DEVICE)&#10;    Log.i(TAG, &quot;Build.DISPLAY = &quot; + Build.DISPLAY)&#10;    Log.i(TAG, &quot;Build.VERSFINGERPRINTION = &quot; + Build.FINGERPRINT)&#10;    Log.i(TAG, &quot;Build.HARDWARE = &quot; + Build.HARDWARE)&#10;    Log.i(TAG, &quot;Build.HOST = &quot; + Build.HOST)&#10;    Log.i(TAG, &quot;Build.ID = &quot; + Build.ID)&#10;    Log.i(TAG, &quot;Build.MANUFACTURER = &quot; + Build.MANUFACTURER)&#10;    Log.i(TAG, &quot;Build.MODEL = &quot; + Build.MODEL)&#10;    Log.i(TAG, &quot;Build.PRODUCT = &quot; + Build.PRODUCT)&#10;    Log.i(TAG, &quot;Build.TYPE = &quot; + Build.TYPE)&#10;    Log.i(TAG, &quot;Build.TAGS = &quot; + Build.TAGS)&#10;    Log.i(TAG, &quot;Build.TIME = &quot; + Build.TIME)&#10;    Log.i(TAG, &quot;Build.UNKNOWN = &quot; + Build.UNKNOWN)&#10;    Log.i(TAG, &quot;Build.USER = &quot; + Build.USER)&#10;    Log.i(TAG, &quot;Build.VERSION.PREVIEW_SDK_INT = &quot; + Build.VERSION.PREVIEW_SDK_INT)&#10;    &#10;    if(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP){&#10;        Log.i(TAG, &quot;Build.SUPPORTED_32_BIT_ABIS = &quot; + java.util.Arrays.toString(Build.SUPPORTED_32_BIT_ABIS))&#10;        Log.i(TAG, &quot;Build.SUPPORTED_64_BIT_ABIS = &quot; + Arrays.toString(Build.SUPPORTED_64_BIT_ABIS))&#10;        Log.i(TAG, &quot;Build.SUPPORTED_ABIS = &quot; + Arrays.toString(Build.SUPPORTED_ABIS));&#10;    }&#10;    // FIXME: The following block need : &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&#10;    // AND permission from the user !!!&#10;    if(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.O) {&#10;        try {&#10;            Log.i(TAG, &quot;Build.getSerial = &quot; + Build.getSerial())&#10;        } catch (e: java.lang.SecurityException) {&#10;            Log.i(TAG, &quot;SecurityException when getting calling Build.getSerial()&quot;)&#10;        }&#10;    }&#10;$END$" description="Display the version of the android, brand, model, ..." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_webview" value="    // TODO: Add the bloc to the layout&#10;    /*&#10;    &lt;WebView&#10;    android:id=&quot;@+id/webview&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot; /&gt;&#10;    */&#10;    &#10;    // TODO: Put in class attribute&#10;    // private lateinit var webView: WebView&#10;    // TODO: remove this line&#10;    val webView: WebView&#10;    &#10;    webView = findViewById(R.id.webview)&#10;    &#10;    // Avoid the click on a link open an external browser&#10;    webView.webViewClient = android.webkit.WebViewClient()&#10;    &#10;            // Extra set the Web Chrome Client&#10;    //        webView.setWebChromeClient(android.webkit.WebChromeClient())&#10;    &#10;            // Optional settings&#10;    //        webView.getSettings().setBuiltInZoomControls(true)&#10;    //        webView.getSettings().setJavaScriptEnabled(true)&#10;    //        webView.getSettings().setDomStorageEnabled(true)&#10;    //        webView.getSettings().setDatabaseEnabled(true)&#10;    //        webView.getSettings().setCacheMode(android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK)&#10;    //        webView.getSettings().setAppCacheEnabled(true)&#10;    &#10;            // Exemple to handle the loading of the page&#10;    //        webView.webChromeClient = object : WebChromeClient() {&#10;    //            override fun onProgressChanged(view: WebView?, newProgress: Int) {&#10;    //                super.onProgressChanged(view, newProgress)&#10;    //&#10;    //                if (BuildConfig.DEBUG) {&#10;    //                    Log.d(TAG, &quot;onProgressChanged $newProgress&quot;)&#10;    //                }&#10;    //&#10;    //                // Example :&#10;    //                // activity.setTitle(&quot;Loading...&quot;);&#10;    //                // activity.setProgress(progress * 100); // Method that update a progressView for example.&#10;    //                // if(newProgress == 100) {&#10;    //                //     activity.setTitle(&quot;My title&quot;);&#10;    //                // }&#10;    //            }&#10;    //        }&#10;    &#10;    // Exemple to load Base64 encoded content&#10;    // https://developer.android.com/reference/android/webkit/WebView#loadData(java.lang.String,%20java.lang.String,%20java.lang.String)&#10;    //        val unencodedHtml = &quot;&lt;html&gt;&lt;body&gt;'%28' is the code for '('&lt;/body&gt;&lt;/html&gt;&quot;&#10;    //        val charset = Charsets.UTF_8&#10;    //        val encodedHtml = android.util.Base64.encodeToString(&#10;    //            unencodedHtml.toByteArray(charset),&#10;    //            android.util.Base64.NO_PADDING&#10;    //        )&#10;    //        webView.loadData(encodedHtml, &quot;text/html&quot;, &quot;base64&quot;)&#10;    &#10;    &#10;            /* Exemple to catch the alert default Javascript dialog. WebChromeClient must be set BEFORE calling loadUrl! */&#10;    //        webView.webChromeClient = object : WebChromeClient() {&#10;    //            override fun onJsAlert(&#10;    //                view: WebView?,&#10;    //                url: String?,&#10;    //                message: String?,&#10;    //                result: JsResult?&#10;    //            ): Boolean {&#10;    //                android.app.AlertDialog.Builder($context$)&#10;    //                    .setTitle(&quot;javaScript dialog&quot;)&#10;    //                    .setMessage(message)&#10;    //                    .setPositiveButton(android.R.string.ok, object : DialogInterface.OnClickListener{&#10;    //                        override fun onClick(dialog: DialogInterface?, which: Int) {&#10;    //                            result?.confirm()&#10;    //                        }&#10;    //                    })&#10;    //                    .setCancelable(false)&#10;    //                    .create()&#10;    //                    .show()&#10;    //                return true&#10;    //            }&#10;    //        }&#10;    &#10;    &#10;    // Exemple to handle java injection&#10;    // Doc : https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String)&#10;    // if (android.os.Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {&#10;    //     class JsObject {&#10;    //         @android.webkit.JavascriptInterface&#10;    //         fun getString() : String {&#10;    //             return &quot;injectedObject String value from $className$&quot;&#10;    //         }&#10;    //     }&#10;    //     webView.getSettings().setJavaScriptEnabled(true)&#10;    //     webView.addJavascriptInterface(JsObject(), &quot;injectedObject&quot;)&#10;    //     webView.loadData(&quot;&quot;, &quot;text/html&quot;, null)&#10;    //     webView.loadUrl(&quot;javascript:alert(injectedObject.getString())&quot;)&#10;    // }&#10;    &#10;    // TODO : see more on auto fill&#10;    // https://developer.android.com/reference/android/webkit/WebView#onProvideAutofillVirtualStructure(android.view.ViewStructure,%20int)&#10;    &#10;    // TODO : see more on post HTML5 messages&#10;    // https://developer.android.com/reference/android/webkit/WebView#postWebMessage(android.webkit.WebMessage,%20android.net.Uri)&#10;    &#10;    &#10;    // Load the URL in the WebView&#10;    webView.loadUrl(&quot;$url$&quot;);&#10;    &#10;    // Handle the back navigation button&#10;    // TODO: put outside of the method&#10;    //    override fun onBackPressed() {&#10;    //        if (webView.canGoBack()) {&#10;    //            webView.goBack()&#10;    //        } else {&#10;    //            super.onBackPressed()&#10;    //        }&#10;    //    }&#10;$END$" description="Add a webview to the application." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="groovyScript(&quot;_1.endsWith('Activity') ? 'this@'+_1 : 'getApplicationContext()'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="url" expression="" defaultValue="&quot;https://light4events.fr&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_timber_log_parameters" value="Timber.v($content$)" description="Log the parameters values of the method, using Timber." toReformat="true" toShortenFQNames="true">
    <variable name="content" expression="groovyScript(&quot;def params = _2.collect {it + ' = [\$' + it + ']'}.join(', ');return '\&quot;' + _1 + '() called' + (params.empty  ? '' : ' with: ' + params) + '\&quot;'&quot;, kotlinFunctionName(), functionParameters())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_fullScreen_noTitleBar" value="//Remove title bar&#10;requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;&#10;//Remove notification bar&#10;this.window.setFlags(&#10;    WindowManager.LayoutParams.FLAG_FULLSCREEN,&#10;    WindowManager.LayoutParams.FLAG_FULLSCREEN&#10;)" description="Full screen and title bar management." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_fullscreen_immersive" value="override fun onWindowFocusChanged(hasFocus: Boolean) {&#10;    super.onWindowFocusChanged(hasFocus)&#10;    if (hasFocus) hideSystemUI()&#10;}&#10;&#10;private fun hideSystemUI() {&#10;    // Enables regular immersive mode.&#10;    // For &quot;lean back&quot; mode, remove SYSTEM_UI_FLAG_IMMERSIVE.&#10;    // Or for &quot;sticky immersive,&quot; replace it with SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;    window.decorView.systemUiVisibility = (android.view.View.SYSTEM_UI_FLAG_IMMERSIVE&#10;            // Set the content to appear under the system bars so that the&#10;            // content doesn't resize when the system bars hide and show.&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;            // Hide the nav bar and status bar&#10;            or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;            or View.SYSTEM_UI_FLAG_FULLSCREEN)&#10;}&#10;&#10;// Shows the system bars by removing all the flags&#10;// except for the ones that make the content appear under the system bars.&#10;private fun showSystemUI() {&#10;    window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;            or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN)&#10;}" description="Full screen hide all menu." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_copy_to_clipboard" value="private fun copyContentToClipboard(label: String, content: String) {&#10;    val clipboard = getSystemService(android.content.Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager&#10;    val clip = android.content.ClipData.newPlainText(label, content)&#10;    clipboard.setPrimaryClip(clip)&#10;}" description="Write a function to copy content to clipboard." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_tts" value="// $END$TODO : move to the top of the class (instance variable)&#10;lateinit var myTTS: android.speech.tts.TextToSpeech&#10;myTTS = android.speech.tts.TextToSpeech($context$,&#10;TextToSpeech.OnInitListener { status -&gt;&#10;    if (status != TextToSpeech.ERROR) {&#10;&#10;        // #####################################&#10;        // # Get information on the TTS engine #&#10;        // #####################################&#10;        // Get the engines available on the device&#10;        val enginesAvailable = myTTS.engines&#10;        for (currentEngine in enginesAvailable) {&#10;            if (BuildConfig.DEBUG) {&#10;                android.util.Log.d(&#10;                        TAG,&#10;                        &quot;onInit engine available &quot; + currentEngine.name + &quot; &quot; + currentEngine.label&#10;                )&#10;            }&#10;        }&#10;        if (android.os.Build.VERSION.SDK_INT &gt; 21) {&#10;            val availableLanguagesList = myTTS.availableLanguages&#10;            for (currentLocale in availableLanguagesList) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(TAG, &quot;onInit locale available $currentLocale&quot;)&#10;                }&#10;            }&#10;            val availablesVoices = myTTS.voices&#10;            for (currentVoice in availablesVoices) {&#10;                if (BuildConfig.DEBUG) {&#10;                    Log.d(&#10;                            TAG,&#10;                            &quot;onInit voice available locale &quot; + currentVoice.locale&#10;                    )&#10;                    Log.d(TAG, &quot;onInit voice available name &quot; + currentVoice.name)&#10;                    Log.d(&#10;                            TAG,&#10;                            &quot;onInit voice available feature &quot; + currentVoice.features&#10;                    )&#10;                    Log.d(&#10;                            TAG,&#10;                            &quot;onInit voice available latency &quot; + currentVoice.latency&#10;                    )&#10;                    Log.d(&#10;                            TAG,&#10;                            &quot;onInit voice available quality &quot; + currentVoice.quality&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;        // Set the TTS language&#10;        if (myTTS.isLanguageAvailable(java.util.Locale.ENGLISH) &gt;= TextToSpeech.LANG_AVAILABLE) { // see TextToSpeech.LANG_AVAILABLE, ...&#10;            myTTS.language = Locale.ENGLISH&#10;        }&#10;        if (myTTS.isSpeaking) {&#10;            myTTS.stop()&#10;        }&#10;&#10;        // Optional&#10;        // myTTS.setPitch(0.2f); // 1.0 is normal&#10;        // myTTS.setSpeechRate(0.2f); // 1.0 is normal&#10;        val messageToBeTTS = &quot;Hello world&quot;&#10;        myTTS.speak(messageToBeTTS, TextToSpeech.QUEUE_FLUSH, null)&#10;    }&#10;})&#10;/// TODO put outside of the method.&#10;// override fun onPause() {&#10;//         myTTS.stop()&#10;//         myTTS.shutdown()&#10;//         super.onPause()&#10;//     }&#10;" description="Example of TTS." toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_web_search" value="val intent = android.content.Intent(Intent.ACTION_WEB_SEARCH)&#10;intent.putExtra(android.app.SearchManager.QUERY, &quot;what i'm looking for&quot;)&#10;startActivity(intent)" description="Search on web." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_direction" value="val intent = android.content.Intent(&#10;    Intent.ACTION_VIEW,&#10;    android.net.Uri.parse(&quot;http://maps.google.com/maps?&quot; + &quot;saddr=9.938083,-84.054430&amp;&quot; + &quot;daddr=9.926392,-84.055964&quot;)&#10;)&#10;startActivity(intent)" description="Look for direction on maps." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_streetview" value="val geoCode =&#10;    &quot;google.streetview:&quot; + &quot;cbll=41.5020952,-81.6789717&amp;&quot; + &quot;cbp=1,270,,45,1&amp;mz=7&quot;&#10;val intent = android.content.Intent(Intent.ACTION_VIEW, Uri.parse(geoCode))&#10;startActivity(intent)" description="Open StreetView." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_launch_music_player" value="val intent = android.content.Intent(&quot;android.intent.action.MUSIC_PLAYER&quot;)&#10;startActivity(intent)" description="Open the music player." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_set_task" value="// TODO: Add to the AndroidManifest.xml : &lt;uses-permission android:name=&quot;com.android.alarm.permission.SET_ALARM&quot; /&gt;&#10;val intent = android.content.Intent(android.provider.AlarmClock.ACTION_SET_ALARM).apply {&#10;    putExtra(android.provider.AlarmClock.EXTRA_MESSAGE, &quot;Lunch time.&quot;)&#10;    putExtra(AlarmClock.EXTRA_HOUR, 12)&#10;    putExtra(AlarmClock.EXTRA_MINUTES, 30)&#10;    putExtra(AlarmClock.EXTRA_DAYS, arrayOf(java.util.Calendar.MONDAY, Calendar.TUESDAY))&#10;    //putExtra(AlarmClock.EXTRA_RINGTONE, java.net.URI)&#10;    putExtra(AlarmClock.EXTRA_VIBRATE, true)&#10;    putExtra(AlarmClock.EXTRA_SKIP_UI, true)&#10;}&#10;if (intent.resolveActivity(packageManager) != null) {&#10;    startActivity(intent)&#10;}" description="Set task on the calendar." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_set_timer" value="// &lt;uses-permission android:name=&quot;com.android.alarm.permission.SET_ALARM&quot; /&gt;&#10;val intent = android.content.Intent(android.provider.AlarmClock.ACTION_SET_TIMER).apply {&#10;    putExtra(AlarmClock.EXTRA_MESSAGE, &quot;Running&quot;)&#10;    putExtra(AlarmClock.EXTRA_LENGTH, 30)&#10;    putExtra(AlarmClock.EXTRA_SKIP_UI, true)&#10;}&#10;if (intent.resolveActivity(packageManager) != null) {&#10;    startActivity(intent)&#10;}" description="Set timer (in 30 seconds)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_show_alarms" value="val intent = android.content.Intent(AlarmClock.ACTION_SHOW_ALARMS)&#10;startActivity(intent)" description="Show the alarms set." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_show_timers" value="val intent = android.content.Intent(android.provider.AlarmClock.ACTION_SHOW_TIMERS)&#10;startActivity(intent)" description="Show the timers ongoing." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_intent_create_calendar" value="// Example : addEvent(&quot;CalendarTest&quot;, &quot;Place&quot;, Date().time, Date().time+(60*15*1000))&#10;// Add an event of 15 minutes right now, taking place at &quot;Place&quot;, named &quot;CalendarTest&quot;&#10;fun addEvent(title: String, location: String, begin: Long, end: Long) {&#10;    val intent = android.content.Intent(Intent.ACTION_INSERT).apply {&#10;        data = android.provider.CalendarContract.Events.CONTENT_URI&#10;        putExtra(CalendarContract.Events.TITLE, title)&#10;        putExtra(CalendarContract.Events.EVENT_LOCATION, location)&#10;        putExtra(android.provider.CalendarContract.EXTRA_EVENT_BEGIN_TIME, begin)&#10;        putExtra(android.provider.CalendarContract.EXTRA_EVENT_END_TIME, end)&#10;    }&#10;    if (intent.resolveActivity(packageManager) != null) {&#10;        startActivity(intent)&#10;    }&#10;}" description="Write a method to setup calendar." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_create_contact" value="// Example : addContact(&quot;Tristan SALAUN&quot;, &quot;Light4Events&quot;, &quot;CEO&quot;, email = &quot;tristan@l4e.fr&quot;)&#10;fun addContact(name: String, company: String? = null, jobTitle: String? = null, notes: String? = null, postal: String? = null, email: String? = null, emailType: Int? = ContactsContract.CommonDataKinds.Email.TYPE_WORK, phone: String? = null, phoneType: Int? = ContactsContract.CommonDataKinds.Phone.TYPE_WORK) {&#10;    val intent = android.content.Intent(android.provider.ContactsContract.Intents.Insert.ACTION).apply {&#10;        type = ContactsContract.RawContacts.CONTENT_TYPE&#10;&#10;        putExtra(ContactsContract.Intents.Insert.NAME, name)&#10;        company?.let { putExtra(ContactsContract.Intents.Insert.COMPANY, company) }&#10;        jobTitle?.let { putExtra(ContactsContract.Intents.Insert.JOB_TITLE, jobTitle) }&#10;        notes?.let { putExtra(ContactsContract.Intents.Insert.NOTES, notes) }&#10;        postal?.let { putExtra(ContactsContract.Intents.Insert.POSTAL, postal) }&#10;        email?.let { putExtra(ContactsContract.Intents.Insert.EMAIL, email) }&#10;        emailType?.let { putExtra(ContactsContract.Intents.Insert.EMAIL_TYPE, emailType) }&#10;        phone?.let { putExtra(ContactsContract.Intents.Insert.PHONE, phone) }&#10;        phoneType?.let { putExtra(ContactsContract.Intents.Insert.PHONE_TYPE, phoneType) }&#10;&#10;    }&#10;    if (intent.resolveActivity(packageManager) != null) {&#10;        startActivity(intent)&#10;    }&#10;}" description="Create a contact in phonebook." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_take_picture_WIP" value="    // All informations : https://developer.android.com/training/camera/photobasics?authuser=1&#10;    // The same for videos : &#10;    companion object {&#10;        private const val REQUEST_IMAGE_CAPTURE = 1&#10;    }&#10;&#10;    fun capturePhoto(ctx: android.content.Context, targetFilename: String) {&#10;&#10;        // TODO : set this file in global scope&#10;        val locationForPhotos: android.net.Uri = android.net.Uri.fromFile(ctx.getExternalFilesDir(android.os.Environment.DIRECTORY_PICTURES))&#10;&#10;        val intent = android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE).apply {&#10;            putExtra(android.provider.MediaStore.EXTRA_OUTPUT, Uri.withAppendedPath(locationForPhotos, targetFilename))&#10;        }&#10;        if (intent.resolveActivity(packageManager) != null) {&#10;            startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)&#10;        }&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == android.app.Activity.RESULT_OK) {&#10;            val thumbnail: android.graphics.Bitmap? = data?.getParcelableExtra(&quot;data&quot;)&#10;            // Do other work with full size photo saved in locationForPhotos&#10;        }&#10;    }&#10;&#10;// TO CALL :&#10;//        // Use a FileProvider instead : https://stackoverflow.com/questions/38200282/android-os-fileuriexposedexception-file-storage-emulated-0-test-txt-exposed&#10;//        val builder = android.os.StrictMode.VmPolicy.Builder()&#10;//        android.os.StrictMode.setVmPolicy(builder.build())&#10;//        capturePhoto(this, &quot;test&quot;)" description="Take a picture." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_intent_open_settings" value="// full liste : https://developer.android.com/reference/android/provider/Settings?authuser=1&#10;//    ACTION_SETTINGS&#10;//    ACTION_WIRELESS_SETTINGS&#10;//    ACTION_AIRPLANE_MODE_SETTINGS&#10;//    ACTION_WIFI_SETTINGS&#10;//    ACTION_APN_SETTINGS&#10;//    ACTION_BLUETOOTH_SETTINGS&#10;//    ACTION_DATE_SETTINGS&#10;//    ACTION_LOCALE_SETTINGS&#10;//    ACTION_INPUT_METHOD_SETTINGS&#10;//    ACTION_DISPLAY_SETTINGS&#10;//    ACTION_SECURITY_SETTINGS&#10;//    ACTION_LOCATION_SOURCE_SETTINGS&#10;//    ACTION_INTERNAL_STORAGE_SETTINGS&#10;//    ACTION_MEMORY_CARD_SETTINGS&#10;fun openWifiSettings() {&#10;    val intent = android.content.Intent(android.provider.Settings.ACTION_WIFI_SETTINGS)&#10;    if (intent.resolveActivity(packageManager) != null) {&#10;        startActivity(intent)&#10;    }&#10;}" description="Open setting screen." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_wifi_connect" value="// TODO : Add the following to the AndroidManifest.xml&#10;    //  &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&#10;    //  &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;&#10;    enum class NetworkType {&#10;    &#9;WEP, WPA, OPEN&#10;    }&#10;&#10;    private fun connectToNetwork(networkType: NetworkType, networkSSID: String, networkPassword: String?) {&#10;        android.widget.Toast.makeText(this, &quot;Connecting to network: $networkSSID&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;        val wifiManager = $launchContext$getSystemService(android.content.Context.WIFI_SERVICE) as android.net.wifi.WifiManager&#10;&#10;        val wifiConfig = android.net.wifi.WifiConfiguration()&#10;    &#9;wifiConfig.SSID = &quot;\&quot;$networkSSID\&quot;&quot;&#10;    &#9;when (networkType) {&#10;    &#9;&#9;NetworkType.WEP -&gt; { // WEP Network.&#10;    &#9;&#9;&#9;Toast.makeText(this, &quot;WEP Network&quot;, Toast.LENGTH_SHORT).show()&#10;    &#9;&#9;&#9;wifiConfig.wepKeys[0] = &quot;\&quot;$networkPassword\&quot;&quot;&#10;    &#9;&#9;&#9;wifiConfig.wepTxKeyIndex = 0&#10;    &#9;&#9;&#9;wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE)&#10;    &#9;&#9;&#9;wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40)&#10;    &#9;&#9;}&#10;    &#9;&#9;NetworkType.WPA -&gt; { // WPA Network&#10;    &#9;&#9;&#9;Toast.makeText(this, &quot;WPA Network&quot;, Toast.LENGTH_SHORT).show()&#10;    &#9;&#9;&#9;wifiConfig.preSharedKey = &quot;\&quot;&quot; + networkPassword + &quot;\&quot;&quot;&#10;    &#9;&#9;}&#10;    &#9;&#9;NetworkType.OPEN -&gt; { // OPEN Network.&#10;    &#9;&#9;&#9;Toast.makeText(this, &quot;OPEN Network&quot;, Toast.LENGTH_SHORT).show()&#10;    &#9;&#9;&#9;wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE)&#10;    &#9;&#9;}&#10;    &#9;}&#10;    &#9;wifiManager.addNetwork(wifiConfig)&#10;    &#9;val list = wifiManager.configuredNetworks&#10;    &#9;for (config in list) {&#10;    &#9;&#9;if (config.SSID != null &amp;&amp; config.SSID == &quot;\&quot;$networkSSID\&quot;&quot;) {&#10;    &#9;&#9;&#9;wifiManager.disconnect()&#10;    &#9;&#9;&#9;wifiManager.enableNetwork(config.networkId, true)&#10;    &#9;&#9;&#9;wifiManager.reconnect()&#10;    &#9;&#9;&#9;break&#10;    &#9;&#9;}&#10;    &#9;}&#10;    }" description="Method to connect to WiFi." toReformat="false" toShortenFQNames="true">
    <variable name="launchContext" expression="groovyScript(&quot;_1.endsWith('Activity') ? '' : 'getApplicationContext().'&quot;, kotlinClassName())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_wifi_state" value="lateinit var btnWiFiManage: android.widget.Button&#10;&#10;// Listen WiFi state change&#10;// TODO : move to the onCreate method&#10;// btnWiFiManage = findViewById(R.id.btnWiFiManage)&#10;//registerReceiver(WifiStateChangedReceiver, android.content.IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION))&#10;&#10;// TODO : Add this to your layout.xml&#10;//    &lt;Button&#10;//    android:id=&quot;@+id/btnWiFiManage&quot;&#10;//    android:layout_width=&quot;wrap_content&quot;&#10;//    android:layout_height=&quot;wrap_content&quot;&#10;//    android:text=&quot;WiFi&quot;&#10;//    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;//    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;//    app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;//    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&#10;// TODO : Add this to res/values/strings.xml&#10;//    &lt;string name=&quot;wifi_enable_disabled&quot;&gt;Disabled&lt;/string&gt;&#10;//    &lt;string name=&quot;wifi_enable_disabling&quot;&gt;Disabling&lt;/string&gt;&#10;//    &lt;string name=&quot;wifi_enable_enabled&quot;&gt;Enabled&lt;/string&gt;&#10;//    &lt;string name=&quot;wifi_enable_enabling&quot;&gt;Enabling&lt;/string&gt;&#10;//    &lt;string name=&quot;wifi_enable_unknown&quot;&gt;Unknown&lt;/string&gt;&#10;&#10;private val WifiStateChangedReceiver: BroadcastReceiver = object : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        // TODO Auto-generated method stub&#10;        val extraWifiState = intent.getIntExtra(&#10;            WifiManager.EXTRA_WIFI_STATE,&#10;            WifiManager.WIFI_STATE_UNKNOWN&#10;        )&#10;        when (extraWifiState) {&#10;            WifiManager.WIFI_STATE_DISABLED -&gt; btnWiFiManage.text =&#10;                getText(R.string.wifi_enable_disabled)&#10;            WifiManager.WIFI_STATE_DISABLING -&gt; btnWiFiManage.text =&#10;                getText(R.string.wifi_enable_disabling)&#10;            WifiManager.WIFI_STATE_ENABLED -&gt; btnWiFiManage.text =&#10;                getText(R.string.wifi_enable_enabled)&#10;            WifiManager.WIFI_STATE_ENABLING -&gt; btnWiFiManage.text =&#10;                getText(R.string.wifi_enable_enabling)&#10;            WifiManager.WIFI_STATE_UNKNOWN -&gt; btnWiFiManage.text =&#10;                getText(R.string.wifi_enable_unknown)&#10;        }&#10;    }&#10;}" description="Listen to WiFi change state." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_convert_cases_camel_snake" value="// https://stackoverflow.com/questions/60010298/how-can-i-convert-a-camel-case-string-to-snake-case-and-back-in-idiomatic-kotlin&#10;val camelRegex = &quot;(?&lt;=[a-zA-Z])[A-Z]&quot;.toRegex()&#10;val snakeRegex = &quot;_[a-zA-Z]&quot;.toRegex()&#10;val wordsRegex = &quot; [a-zA-Z0-9]&quot;.toRegex()&#10;&#10;// String extensions&#10;fun String.camelToSnakeCase(): String {&#10;    return camelRegex.replace(this) {&#10;        &quot;_${it.value}&quot;&#10;    }.toLowerCase()&#10;}&#10;&#10;fun String.snakeToLowerCamelCase(): String {&#10;    return snakeRegex.replace(this) {&#10;        it.value.replace(&quot;_&quot;,&quot;&quot;)&#10;            .toUpperCase()&#10;    }&#10;}&#10;&#10;fun String.snakeToUpperCamelCase(): String {&#10;    return this.snakeToLowerCamelCase().capitalize()&#10;}&#10;&#10;fun String.wordsToSnakeCase(): String {&#10;    return wordsRegex.replace(this) {&#10;        &quot;_${it.value.replace(&quot; &quot;,&quot;&quot;)}&quot;&#10;    }.toLowerCase()&#10;}&#10;&#10;fun main() {&#10;    print(&quot;${&quot;TEST ME 1&quot;.wordsToSnakeCase()}\n&quot;)&#10;&#10;    print(&quot;${&quot;MyCamelCaseA&quot;.camelToSnakeCase()}\n&quot;)&#10;//    my_camel_case_a&#10;&#10;    print(&quot;${&quot;AMultiWordString&quot;.camelToSnakeCase()}\n&quot;)&#10;//    a_multi_word_string&#10;&#10;    print(&quot;${&quot;my_camel_case_a&quot;.snakeToLowerCamelCase()}\n&quot;)&#10;//    myCamelCaseA&#10;&#10;    print(&quot;${&quot;my_camel_case_a&quot;.snakeToUpperCamelCase()}\n&quot;)&#10;//    MyCamelCaseA&#10;}" description="Add methods to handle camelCase and snake_case." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_picker_time" value="val isSystem24Hour = android.text.format.DateFormat.is24HourFormat(this)&#10;val clockFormat = if (isSystem24Hour) com.google.android.material.timepicker.TimeFormat.CLOCK_24H else TimeFormat.CLOCK_12H&#10;&#10;val picker =&#10;&#9;com.google.android.material.timepicker.MaterialTimePicker.Builder()&#10;&#9;&#9;.setTimeFormat(clockFormat)&#10;&#9;&#9;.setHour(12)&#10;&#9;&#9;.setMinute(10)&#10;&#9;&#9;.setTitleText(&quot;Select Appointment time&quot;)&#10;&#9;&#9;.setInputMode(com.google.android.material.timepicker.MaterialTimePicker.INPUT_MODE_KEYBOARD) // Start the time picker in text input mode.&#10;&#9;&#9;.build()&#10;&#10; // Show the date picker.&#10;picker.showNow(supportFragmentManager, &quot;tag&quot;)&#10;&#10;picker.addOnPositiveButtonClickListener {&#10;&#9;// call back code&#10;&#9;android.util.Log.d(TAG, &quot;Date picker ${picker.hour}:${picker.minute} &quot;)&#10;}&#10;picker.addOnNegativeButtonClickListener {&#10;&#9;// call back code&#10;}&#10;picker.addOnCancelListener {&#10;&#9;// call back code&#10;}&#10;picker.addOnDismissListener {&#10;&#9;// call back code&#10;}" description="Display a Material Design time picker." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_picker_date" value="// **********************&#10;// * Create date picker *&#10;// **********************&#10;val datePicker =&#10;&#9;com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;&#9;&#9;.setTitleText(&quot;Select date&quot;)&#10;&#9;&#9;.setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;&#9;&#9;.setInputMode(MaterialDatePicker.INPUT_MODE_TEXT)&#10;&#9;&#9;.build()&#10;&#10;// *********************&#10;// * Handle user input *&#10;// *********************&#10;datePicker.addOnPositiveButtonClickListener {&#10;&#9;// Respond to positive button click.&#10;&#9;android.util.Log.d(TAG, &quot;onCreate ${datePicker.selection}&quot;)&#10;}&#10;datePicker.addOnNegativeButtonClickListener {&#10;&#9;// Respond to negative button click.&#10;}&#10;datePicker.addOnCancelListener {&#10;&#9;// Respond to cancel button click.&#10;}&#10;datePicker.addOnDismissListener {&#10;&#9;// Respond to dismiss events.&#10;}&#10;&#10;// ****************************&#10;// * Add calendar constraints *&#10;// ****************************&#10;val today = MaterialDatePicker.todayInUtcMilliseconds()&#10;val calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(&quot;UTC&quot;))&#10;&#10;calendar.timeInMillis = today&#10;calendar[Calendar.MONTH] = Calendar.JANUARY&#10;val janThisYear = calendar.timeInMillis&#10;&#10;calendar.timeInMillis = today&#10;calendar[Calendar.MONTH] = Calendar.DECEMBER&#10;val decThisYear = calendar.timeInMillis&#10;&#10;// Build constraints.&#10;val constraintsBuilder =&#10;&#9;com.google.android.material.datepicker.CalendarConstraints.Builder()&#10;&#9;&#9;.setStart(janThisYear)&#10;&#9;&#9;.setEnd(decThisYear)&#10;&#10;//        // To open picker at a default month:&#10;//        calendar[Calendar.MONTH] = Calendar.FEBRUARY&#10;//        val february = calendar.timeInMillis&#10;//&#10;//        val constraintsBuilder =&#10;//            CalendarConstraints.Builder()&#10;//                .setOpenAt(february)&#10;//&#10;//        // To set a validator:&#10;//        // Makes only dates from today forward selectable.&#10;//        val constraintsBuilder =&#10;//            CalendarConstraints.Builder()&#10;//                .setValidator(com.google.android.material.datepicker.DateValidatorPointForward.now())&#10;//&#10;//        // Makes only dates from February forward selectable.&#10;//        calendar[Calendar.MONTH] = Calendar.FEBRUARY&#10;//        val february = calendar.timeInMillis&#10;//        val constraintsBuilder =&#10;//            CalendarConstraints.Builder()&#10;//                .setValidator(DateValidatorPointForward.from(february))&#10;&#10;// Example of date validator for week days only&#10;// https://github.com/material-components/material-components-android/blob/master/catalog/java/io/material/catalog/datepicker/DateValidatorWeekdays.java&#10;&#10;// Apply date constraints to the builder previously defined.&#10;//        MaterialDatePicker.Builder().datePicker()&#10;//        ...&#10;//        .setCalendarConstraints(constraintsBuilder.build())&#10;&#10;// ************************&#10;// * Show the date picker *&#10;// ************************&#10;datePicker.show(supportFragmentManager, &quot;tag&quot;)&#10;&#10;&#10;// ****************************&#10;// * Create date range picker *&#10;// ****************************&#10;val dateRangePicker =&#10;&#9;MaterialDatePicker.Builder.dateRangePicker()&#10;&#9;&#9;.setTitleText(&quot;Select dates&quot;)&#10;&#9;&#9;.setSelection(&#10;&#9;&#9;&#9;androidx.core.util.Pair(&#10;&#9;&#9;&#9;&#9;MaterialDatePicker.thisMonthInUtcMilliseconds(),&#10;&#9;&#9;&#9;&#9;MaterialDatePicker.todayInUtcMilliseconds()&#10;&#9;&#9;&#9;)&#10;&#9;&#9;)&#10;&#9;&#9;.build()&#10;dateRangePicker.show(supportFragmentManager, &quot;tag&quot;)" description="Display a Material Design date picker." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_format_size" value="// https://stackoverflow.com/questions/3758606/how-can-i-convert-byte-size-into-a-human-readable-format-in-java&#10;    fun humanReadableByteCountBin(bytes: Long): String {&#10;        val absB = if (bytes == Long.MIN_VALUE) Long.MAX_VALUE else abs(bytes)&#10;        if (absB &lt; 1024) {&#10;            return &quot;$bytes B&quot;&#10;        }&#10;        var value = absB&#10;        val ci: CharacterIterator = StringCharacterIterator(&quot;KMGTPE&quot;)&#10;        var i = 40&#10;        while (i &gt;= 0 &amp;&amp; absB &gt; 0xfffccccccccccccL shr i) {&#10;            value = value shr 10&#10;            ci.next()&#10;            i -= 10&#10;        }&#10;        value *= java.lang.Long.signum(bytes).toLong()&#10;        return &quot;%.1f %ciB&quot;.format(value / 1024.0, ci.current())&#10;    }&#10;    fun humanReadableByteCountSI(bytes: Long): String {&#10;        var localBytes = bytes&#10;        if (-1000 &lt; localBytes &amp;&amp; localBytes &lt; 1000) {&#10;            return &quot;$localBytes B&quot;&#10;        }&#10;        val ci: CharacterIterator = StringCharacterIterator(&quot;kMGTPE&quot;)&#10;        while (localBytes &lt;= -999950 || localBytes &gt;= 999950) {&#10;            localBytes /= 1000&#10;            ci.next()&#10;        }&#10;        return &quot;%.1f %cB&quot;.format(localBytes / 1000.0, ci.current())&#10;    }" description="Format the size in human readable value 1000 or 1024 base." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_livedata_attribute_list" value="val $attributeName$: androidx.lifecycle.LiveData&lt;List&lt;$itemType$&gt;&gt;&#10;    get() = _$attributeName$&#10;private val _$attributeName$ = androidx.lifecycle.MutableLiveData&lt;List&lt;$itemType$&gt;&gt;(emptyList())" description="Declare a new attribute in LiveData object containing list items." toReformat="false" toShortenFQNames="true">
    <variable name="attributeName" expression="attributeName" defaultValue="" alwaysStopAt="true" />
    <variable name="itemType" expression="itemType" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_livedata_attribute" value="val $attributeName$: androidx.lifecycle.LiveData&lt;$itemType$&gt;&#10;    get() = _$attributeName$&#10;private val _$attributeName$ = androidx.lifecycle.MutableLiveData&lt;$itemType$&gt;()" description="Declare a new attribute in LiveData object." toReformat="false" toShortenFQNames="true">
    <variable name="attributeName" expression="attributeName" defaultValue="" alwaysStopAt="true" />
    <variable name="itemType" expression="itemType" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_livedata_attribute_two_ways" value="@get:Bindable&#10;var $varName$: $varType$ = $varDefautValue$&#10;&#9;set(value) {&#10;&#9;&#9;Timber.d(&quot;set$varNameCamel$() called with: value = [$value]&quot;)&#10;&#9;&#9;if (field != value) {&#10;&#9;&#9;&#9;field = value&#10;&#9;&#9;&#9;notifyPropertyChanged(BR.$varName$)&#10;&#9;&#9;}&#10;&#9;}" description="Declare a new attribute in LiveData object., for two ways usage" toReformat="false" toShortenFQNames="true">
    <variable name="varName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varType" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varDefautValue" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varNameCamel" expression="capitalize(camelCase(varName))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_livedata_attribute_two_ways_boolean" value="@Bindable&#10;var $varName$: $varType$ = $varDefautValue$&#10;fun get$varNameCamel$(): Boolean {&#10;    return $varName$&#10;}&#10;fun set$varNameCamel$(value: Boolean) {&#10;    Timber.d(&quot;set$varNameCamel$() called with: value = [$value]&quot;)&#10;    if ($varName$ != value) {&#10;        $varName$ = value&#10;    }&#10;    notifyPropertyChanged(BR.$varName$)&#10;}" description="Declare a new attribute in LiveData object., for two ways usage, handling the Boolean bug." toReformat="false" toShortenFQNames="true">
    <variable name="varName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varType" expression="" defaultValue="&quot;Boolean&quot;" alwaysStopAt="false" />
    <variable name="varDefautValue" expression="" defaultValue="&quot;false&quot;" alwaysStopAt="false" />
    <variable name="varNameCamel" expression="capitalize(camelCase(varName))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_ask_battery_optim" value="fun askPowerService(context: android.content.Context){&#10;&#9;val intent = android.content.Intent()&#10;&#9;val pm : android.os.PowerManager = androidx.core.content.ContextCompat.getSystemService(Context.POWER_SERVICE) as PowerManager&#10;&#9;if (pm.isIgnoringBatteryOptimizations(context.packageName)) {&#10;&#9;&#9;intent.action = android.provider.Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS&#10;&#9;} else {&#10;&#9;&#9;intent.action = Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&#10;&#9;&#9;intent.data = android.net.Uri.parse(&quot;package:${context.packageName}&quot;)&#10;&#9;}&#10;&#9;context.startActivity(intent)&#10;}" description="Ask to the system to disable the battery optimization for the package." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_timber_00_documentation" value="// Reference : https://github.com/JakeWharton/timber&#10;// Add the dependances in the build.gradle(:app) in dependencies { ... }&#10;// with : and_timber_01_dependencies&#10;//&#10;// In the Application class of the project (check that it's defined in the AndroidManifest.xml file, in &lt;manifest&gt;&lt;application ... &gt;)&#10;// In the onCreate() method, add the mandatory code&#10;// with : and_timber_02_application_on_create&#10;//&#10;// Now when you want to log something, juste use&#10;// and_timber_log_parameters&#10;//&#10;// Extra loggers:&#10;// - File logger : create a Kotlin class and inside the class use :&#10;// - ..." description="How to setup Timber Log library to a new project." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_timber_01_dependencies" value="&#10;// Logging system&#10;implementation 'com.jakewharton.timber:timber:5.0.1'" description="Add Timber to dependencies." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_timber_02_application_on_create" value="if (BuildConfig.DEBUG) {&#10;&#9;plant(Timber.DebugTree())&#10;}" description="Code to add to the &quot;MyApplication&quot; class to setup Timber." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_robolectric_00_documentation" value="// Reference : https://robolectric.org/getting-started/&#10;// Add the dependances in the build.gradle(:app) in dependencies { ... }&#10;// with : and_robolectric_01_dependencies&#10;// Annotate the test&#10;// with: and_robolectric_02_annotate&#10;// Example: &#10;// @RunWith(RobolectricTestRunner.class)&#10;// public class SandwichTest {&#10;// }" description="How to sertup Robolectric unit testing lib for Android." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_robolectric_01_dependencies" value="// Testing framework&#10;testImplementation 'org.robolectric:robolectric:4.9'" description="Add Robolectric to dependencies." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_robolectric_02_annotate" value="@RunWith(RobolectricTestRunner.class)" description="Anotation to add to JUnit tests to add Robolectric support." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_koin_00_documentation" value="// Reference : https://insert-koin.io/docs/setup/koin&#10;// Sample project : https://github.com/InsertKoinIO/koin-samples&#10;// Add the dependances in the build.gradle(:app) in dependencies { ... }&#10;// with : and_lib_koin_01_dependencies&#10;// Add the modules : create a Kotlin file, then add the sample code&#10;// with : and_lib_koin_02_module_sample&#10;// In the Application of the project (check that it's defined in the AndroidManifest.xml file, in &lt;manifest&gt;&lt;application ... &gt;)&#10;// In the onCreate() method, add the mandatory code&#10;// with : and_lib_koin_03_application" description="How to sertup Koin (Dependency Injection)." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_koin_01_dependencies" value="implementation &quot;io.insert-koin:koin-core:3.3.3&quot;&#10;implementation &quot;io.insert-koin:koin-android:3.3.3&quot;" description="Add Koin to dependencies." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_koin_02_module_sample" value="val appModule = module {&#10;    single  {MainViewModel()}&#10;}" description="Define how to create the objects, to inject them." toReformat="false" toShortenFQNames="true" />
  <template name="and_lib_koin_03_application_on_create" value="startKoin {&#10;&#9;// Log Koin into Android logger&#10;&#9;androidLogger()&#10;&#9;// Reference Android context&#10;&#9;androidContext(this@MyApp)&#10;&#9;// use Android logger - Level.INFO by default&#10;&#9;// androidLogger()&#10;&#9;// use properties from assets/koin.properties&#10;&#9;// androidFileProperties()&#10;&#9;// Load modules&#10;&#9;modules(appModule)&#10;}" description="Code to add to the &quot;MyApplication&quot; class to setup Koin." toReformat="false" toShortenFQNames="true" />
  <template name="and_ext_activity_turn_screen_on_or_off" value="fun android.app.Activity.turnScreenOnAndKeyguardOff() {&#10;    android.util.Log.d(&quot;ActivityExt&quot;, &quot;turnScreenOnAndKeyguardOff&quot;)&#10;    timber.log.Timber.v(&quot;turnScreenOnAndKeyguardOff()&quot;)&#10;    if (android.os.Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {&#10;        setShowWhenLocked(true)&#10;        setTurnScreenOn(true)&#10;    } else {&#10;        window.addFlags(&#10;            android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON&#10;                    or WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON&#10;        )&#10;    }&#10;&#10;    with(getSystemService(android.content.Context.KEYGUARD_SERVICE) as android.app.KeyguardManager) {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            requestDismissKeyguard(this@turnScreenOnAndKeyguardOff, null)&#10;        }&#10;    }&#10;}&#10;&#10;fun Activity.turnScreenOffAndKeyguardOn() {&#10;    Log.d(&quot;ActivityExt&quot;, &quot;turnScreenOnAndKeyguardOff&quot;)&#10;    Timber.v(&quot;turnScreenOffAndKeyguardOn()&quot;)&#10;    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {&#10;        setShowWhenLocked(false)&#10;        setTurnScreenOn(false)&#10;    } else {&#10;        window.clearFlags(&#10;            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON&#10;                    or WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON&#10;        )&#10;    }&#10;}&#10;&#10;// Example of usage, for an activity that is launched when the smartphone is in background (when receiving an event, for an alarm, for a phone call, ...) :&#10;// override fun onCreate(savedInstanceState: Bundle?) {&#10;//     super.onCreate(savedInstanceState)&#10;//     setContentView(R.layout.activity_main)&#10;//     turnScreenOnAndKeyguardOff()&#10;// }&#10;// &#10;// override fun onDestroy() {&#10;//     turnScreenOffAndKeyguardOn()&#10;//     super.onDestroy()&#10;// }" description="Write Activity extension to turn the screen ON, or OFF." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="and_mesure_time_code_execution" value="val time = kotlin.system.measureTimeMillis {&#10;    // Your code here&#10;}&#10;print(time) // Display the time elapsed between the braces (so the time for the code to run)" description="Mesure the time that it took to execute the code between the two braces." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="and_service_implementation" value="// TODO : Check that the class is extending Service() class.&#10;// TODO : Remove the duplicate onBind method.&#10;// TODO : Check that the service is declared in the AndroidManifest.&#10;// TODO : To call this service, use the coresponding and_service_call LiveTemplate in an Activity.&#10;&#10;// Template from: https://developer.android.com/guide/components/bound-services#Binder&#10;&#10;// Binder given to clients.&#10;private val binder = LocalBinder()&#10;&#10;// Random number generator.&#10;private val mGenerator = java.util.Random()&#10;&#10;/** Method for clients.  */&#10;val randomNumber: Int&#10;    get() = mGenerator.nextInt(100)&#10;&#10;/**&#10; * Class used for the client Binder. Because we know this service always&#10; * runs in the same process as its clients, we don't need to deal with IPC.&#10; */&#10;inner class LocalBinder : android.os.Binder() {&#10;    // Return this instance of LocalService so clients can call public methods.&#10;    fun getService(): $className$ = this@$className$&#10;}&#10;&#10;override fun onBind(intent: Intent): IBinder {&#10;    return binder&#10;}" description="Implementaton of a template service (in a Service Class)" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_service_calling" value="    // TODO: Move the attributes to the top of the class.&#10;    // TODO: Add a button to the xml user interface and wire it to the &quot;onButtonClick&quot; method.&#10;    // For example:&#10;    //     &lt;Button&#10;    //        android:layout_width=&quot;match_parent&quot;&#10;    //        android:layout_height=&quot;wrap_content&quot;&#10;    //        android:onClick=&quot;onButtonClick&quot;&#10;    //        android:text=&quot;call random&quot;&#10;    //        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;    //        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;    //        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;    //        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;    // Source: https://developer.android.com/guide/components/bound-services#Binder&#10;    &#10;    private lateinit var mService: $serviceName$&#10;    private var mBound: Boolean = false&#10;&#10;    /** Defines callbacks for service binding, passed to bindService().  */&#10;    private val connection = object : android.content.ServiceConnection {&#10;&#10;        override fun onServiceConnected(className: android.content.ComponentName, service: android.os.IBinder) {&#10;            // We've bound to LocalService, cast the IBinder and get LocalService instance.&#10;            val binder = service as $serviceName$.LocalBinder&#10;            mService = binder.getService()&#10;            mBound = true&#10;        }&#10;&#10;        override fun onServiceDisconnected(arg0: ComponentName) {&#10;            mBound = false&#10;        }&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        // Bind to LocalService.&#10;        android.content.Intent(this, $serviceName$::class.java).also { intent -&gt;&#10;            bindService(intent, connection, android.content.Context.BIND_AUTO_CREATE)&#10;        }&#10;    }&#10;&#10;    override fun onStop() {&#10;        super.onStop()&#10;        unbindService(connection)&#10;        mBound = false&#10;    }&#10;&#10;    /** Called when a button is clicked (the button in the layout file attaches to&#10;     * this method with the android:onClick attribute).  */&#10;    fun onButtonClick(v: android.view.View) {&#10;        if (mBound) {&#10;            // Call a method from the LocalService.&#10;            // However, if this call is something that might hang, then put this request&#10;            // in a separate thread to avoid slowing down the activity performance.&#10;            val num: Int = mService.randomNumber&#10;            android.widget.Toast.makeText(this, &quot;number: $num&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }" description="Calling service binded from Activity." toReformat="false" toShortenFQNames="true">
    <variable name="serviceName" expression="" defaultValue="&quot;Service&quot;" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>