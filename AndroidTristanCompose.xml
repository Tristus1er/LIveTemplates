<templateSet group="AndroidTristanCompose">
  <template name="and_compose_swipeable_tab_rows" value="// TODO: Add the following to the import section.&#10;// import androidx.compose.runtime.getValue&#10;// import androidx.compose.runtime.setValue&#10;// import androidx.compose.foundation.layout.fillMaxSize&#10;// import androidx.compose.material.icons.filled.AccountCircle&#10;// import androidx.compose.material.icons.filled.Home&#10;// import androidx.compose.material.icons.filled.ShoppingCart&#10;// import androidx.compose.material.icons.outlined.AccountCircle&#10;// import androidx.compose.material.icons.outlined.Home&#10;// import androidx.compose.material.icons.outlined.ShoppingCart&#10;&#10;data class TabItem(&#10;    val title: String,&#10;    val unselectedIcon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    val selectedIcon: ImageVector,&#10;)&#10;&#10;// Source: https://www.youtube.com/watch?v=9r4st6dmyNE&#10;@OptIn(androidx.compose.foundation.ExperimentalFoundationApi::class) // To be able to use: rememberPagerState&#10;@androidx.compose.runtime.Composable&#10;fun ScreenSwipeableTabRows(modifier: androidx.compose.ui.Modifier = Modifier) {&#10;&#10;    val tabItems = listOf(&#10;        TabItem(&#10;            title = &quot;Home&quot;,&#10;            unselectedIcon = androidx.compose.material.icons.Icons.Outlined.Home,&#10;            selectedIcon = Icons.Filled.Home,&#10;        ),&#10;        TabItem(&#10;            title = &quot;Browse&quot;,&#10;            unselectedIcon = Icons.Outlined.ShoppingCart,&#10;            selectedIcon = Icons.Filled.ShoppingCart,&#10;        ),&#10;        TabItem(&#10;            title = &quot;Account&quot;,&#10;            unselectedIcon = Icons.Outlined.AccountCircle,&#10;            selectedIcon = Icons.Filled.AccountCircle,&#10;        ),&#10;    )&#10;&#10;    // https://mvnrepository.com/artifact/androidx.compose.material/material-icons-extended-android&#10;    // implementation 'androidx.compose.material:material-icons-extended-android:1.5.4'&#10;&#10;    var selectedTabIndex by androidx.compose.runtime.saveable.rememberSaveable { androidx.compose.runtime.mutableIntStateOf(0) }&#10;    // Error: Type 'PagerState' has no method 'getValue(Nothing?, KProperty&lt;*&gt;)' and thus it cannot serve as a delegate&#10;    // Solution: do not use by, but simply the =&#10;    val pagerState = androidx.compose.foundation.pager.rememberPagerState(pageCount = {&#10;        tabItems.size&#10;    })&#10;&#10;    androidx.compose.runtime.LaunchedEffect(key1 = selectedTabIndex, block = {pagerState.animateScrollToPage(selectedTabIndex)})&#10;    LaunchedEffect(key1 = pagerState.currentPage, key2 = pagerState.isScrollInProgress, block = {&#10;        if( !pagerState.isScrollInProgress){&#10;            selectedTabIndex = pagerState.currentPage&#10;        }&#10;    })&#10;&#10;    androidx.compose.foundation.layout.Column(&#10;        modifier = modifier.fillMaxSize(1f)&#10;    ) {&#10;        // If more than 3 items int the list, then use ScrollableTabRow instead of TabRow&#10;        // ScrollableTabRow(selectedTabIndex = selectedTabIndex) {&#10;        androidx.compose.material3.TabRow(selectedTabIndex = selectedTabIndex) {&#10;            tabItems.forEachIndexed { index, item: TabItem -&gt;&#10;                androidx.compose.material3.Tab(selected = index == selectedTabIndex, onClick = { selectedTabIndex = index }, text = { androidx.compose.material3.Text(text = item.title) }, icon = {&#10;                    androidx.compose.material3.Icon(&#10;                        imageVector = if (index == selectedTabIndex) {&#10;                            item.selectedIcon&#10;                        } else {&#10;                            item.unselectedIcon&#10;                        }, contentDescription = item.title&#10;                    )&#10;                })&#10;            }&#10;        }&#10;        androidx.compose.foundation.pager.HorizontalPager(&#10;            state = pagerState, modifier = Modifier&#10;                .fillMaxSize(1f)&#10;                .weight(1f)&#10;        ) { index -&gt;&#10;            androidx.compose.foundation.layout.Box(modifier = Modifier.fillMaxSize(1f), contentAlignment = androidx.compose.ui.Alignment.Center) {&#10;                Text(text = tabItems[index].title)&#10;            }&#10;        }&#10;    }&#10;}" description="Write a composable that display a Tab Row that can be swiped." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_scaffold" value="// TODO : add to the imports :&#10;// import androidx.compose.foundation.layout.fillMaxWidth&#10;// import androidx.compose.foundation.layout.padding&#10;// import androidx.compose.material.icons.filled.Add&#10;// import androidx.compose.runtime.getValue&#10;// import androidx.compose.runtime.setValue&#10;// import androidx.compose.ui.unit.dp&#10;&#10;@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)&#10;@androidx.compose.runtime.Composable&#10;fun ScaffoldExample() {&#10;    var presses by androidx.compose.runtime.remember { androidx.compose.runtime.mutableStateOf(0) }&#10;&#10;    androidx.compose.material3.Scaffold(&#10;        topBar = {&#10;            androidx.compose.material3.TopAppBar(&#10;                colors = androidx.compose.material3.TopAppBarDefaults.mediumTopAppBarColors(&#10;                    containerColor = androidx.compose.material3.MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.primary,&#10;                ),&#10;                title = {&#10;                    androidx.compose.material3.Text(&quot;Top app bar&quot;)&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            androidx.compose.material3.BottomAppBar(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentColor = MaterialTheme.colorScheme.primary,&#10;            ) {&#10;                Text(&#10;                    modifier = androidx.compose.ui.Modifier&#10;                        .fillMaxWidth(),&#10;                    textAlign = androidx.compose.ui.text.style.TextAlign.Center,&#10;                    text = &quot;Bottom app bar&quot;,&#10;                )&#10;            }&#10;        },&#10;        floatingActionButton = {&#10;            androidx.compose.material3.FloatingActionButton(onClick = { presses++ }) {&#10;                androidx.compose.material3.Icon(androidx.compose.material.icons.Icons.Default.Add, contentDescription = &quot;Add&quot;)&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        androidx.compose.foundation.layout.Column(&#10;            modifier = Modifier&#10;                .padding(innerPadding),&#10;            verticalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(16.dp),&#10;        ) {&#10;            Text(&#10;                modifier = Modifier.padding(8.dp),&#10;                text =&#10;                &quot;&quot;&quot;&#10;                    This is an example of a scaffold. It uses the Scaffold composable's parameters to create a screen with a simple top app bar, bottom app bar, and floating action button.&#10;&#10;                    It also contains some basic inner content, such as this text.&#10;&#10;                    You have pressed the floating action button $presses times.&#10;                &quot;&quot;&quot;.trimIndent(),&#10;            )&#10;        }&#10;    }&#10;}" description="Example of scaffold structure." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_dialog" value="// TODO : add to the imports :&#10;// import androidx.compose.material.icons.filled.Info&#10;// import androidx.compose.foundation.layout.fillMaxWidth&#10;// import androidx.compose.runtime.getValue&#10;// import androidx.compose.runtime.setValue&#10;&#10;&#10;@androidx.compose.runtime.Composable&#10;fun AlertDialogExample(&#10;&#9;onDismissRequest: () -&gt; Unit,&#10;&#9;onConfirmation: () -&gt; Unit,&#10;&#9;dialogTitle: String,&#10;&#9;dialogText: String,&#10;&#9;icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;) {&#10;&#9;androidx.compose.material3.AlertDialog(&#10;&#9;&#9;icon = {&#10;&#9;&#9;&#9;androidx.compose.material3.Icon(icon, contentDescription = &quot;Example Icon&quot;)&#10;&#9;&#9;},&#10;&#9;&#9;title = {&#10;&#9;&#9;&#9;androidx.compose.material3.Text(text = dialogTitle)&#10;&#9;&#9;},&#10;&#9;&#9;text = {&#10;&#9;&#9;&#9;Text(text = dialogText)&#10;&#9;&#9;},&#10;&#9;&#9;onDismissRequest = {&#10;&#9;&#9;&#9;onDismissRequest()&#10;&#9;&#9;},&#10;&#9;&#9;confirmButton = {&#10;&#9;&#9;&#9;androidx.compose.material3.TextButton(&#10;&#9;&#9;&#9;&#9;onClick = {&#10;&#9;&#9;&#9;&#9;&#9;onConfirmation()&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;) {&#10;&#9;&#9;&#9;&#9;Text(&quot;Confirm&quot;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;dismissButton = {&#10;&#9;&#9;&#9;TextButton(&#10;&#9;&#9;&#9;&#9;onClick = {&#10;&#9;&#9;&#9;&#9;&#9;onDismissRequest()&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;) {&#10;&#9;&#9;&#9;&#9;Text(&quot;Dismiss&quot;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;)&#10;}&#10;&#10;@Composable&#10;fun DialogExamples() {&#10;    var openAlertDialog by androidx.compose.runtime.remember { androidx.compose.runtime.mutableStateOf(false) }&#10;&#10;    androidx.compose.foundation.layout.Column {&#10;        androidx.compose.material3.Button(&#10;            modifier = androidx.compose.ui.Modifier.fillMaxWidth(1f),&#10;            onClick = { openAlertDialog = true }) {&#10;            Text(text = &quot;Open Alert Dialog&quot;)&#10;        }&#10;    }&#10;&#10;    when {&#10;        // ...&#10;        openAlertDialog -&gt; {&#10;            AlertDialogExample(&#10;                onDismissRequest = { openAlertDialog = false },&#10;                onConfirmation = {&#10;                    openAlertDialog = false&#10;                    println(&quot;Confirmation registered&quot;) // Add logic here to handle confirmation.&#10;                },&#10;                dialogTitle = &quot;Alert dialog example&quot;,&#10;                dialogText = &quot;This is an example of an alert dialog with buttons.&quot;,&#10;                icon = androidx.compose.material.icons.Icons.Default.Info&#10;            )&#10;        }&#10;    }&#10;}" description="Example of AlertDialog usage." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_left_menu" value="// import androidx.compose.foundation.layout.padding&#10;// import androidx.compose.ui.unit.dp&#10;&#10;@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)&#10;@androidx.compose.runtime.Composable&#10;fun LeftMenuExample() {&#10;&#9;androidx.compose.material3.ModalNavigationDrawer(&#10;&#9;&#9;drawerContent = {&#10;&#9;&#9;&#9;androidx.compose.material3.ModalDrawerSheet {&#10;&#9;&#9;&#9;&#9;androidx.compose.material3.Text(&quot;Drawer title&quot;, modifier = androidx.compose.ui.Modifier.padding(16.dp))&#10;&#9;&#9;&#9;&#9;androidx.compose.material3.Divider()&#10;&#9;&#9;&#9;&#9;androidx.compose.material3.NavigationDrawerItem(&#10;&#9;&#9;&#9;&#9;&#9;label = { Text(text = &quot;Drawer Item&quot;) },&#10;&#9;&#9;&#9;&#9;&#9;selected = false,&#10;&#9;&#9;&#9;&#9;&#9;onClick = { /*TODO*/ }&#10;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;Divider()&#10;&#9;&#9;&#9;&#9;&#9;NavigationDrawerItem(&#10;&#9;&#9;&#9;&#9;&#9;&#9;label = { Text(text = &quot;Drawer Item&quot;) },&#10;&#9;&#9;&#9;&#9;&#9;&#9;selected = true,&#10;&#9;&#9;&#9;&#9;&#9;&#9;onClick = { /*TODO*/ }&#10;&#9;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;&#9;Divider()&#10;&#9;&#9;&#9;&#9;&#9;NavigationDrawerItem(&#10;&#9;&#9;&#9;&#9;&#9;&#9;label = { Text(text = &quot;Drawer Item&quot;) },&#10;&#9;&#9;&#9;&#9;&#9;&#9;selected = false,&#10;&#9;&#9;&#9;&#9;&#9;&#9;onClick = { /*TODO*/ }&#10;&#9;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;&#9;Divider()&#10;&#9;&#9;&#9;&#9;&#9;NavigationDrawerItem(&#10;&#9;&#9;&#9;&#9;&#9;&#9;label = { Text(text = &quot;Drawer Item&quot;) },&#10;&#9;&#9;&#9;&#9;&#9;&#9;selected = false,&#10;&#9;&#9;&#9;&#9;&#9;&#9;onClick = { /*TODO*/ }&#10;&#9;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;// ...other drawer items&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;) {&#10;&#9;&#9;// Screen content&#10;&#9;}&#10;}" description="Example of left menu." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_edit_text" value="// import androidx.compose.runtime.getValue&#10;// import androidx.compose.runtime.setValue&#10;&#10;@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)&#10;@androidx.compose.runtime.Composable&#10;fun SimpleOutlinedTextFieldSample() {&#10;    var text by androidx.compose.runtime.remember { androidx.compose.runtime.mutableStateOf(&quot;&quot;) }&#10;&#10;    androidx.compose.material3.OutlinedTextField(&#10;        value = text,&#10;        onValueChange = { text = it },&#10;        label = { androidx.compose.material3.Text(&quot;Label&quot;) },&#10;        visualTransformation = androidx.compose.ui.text.input.PasswordVisualTransformation(),&#10;        keyboardOptions = androidx.compose.foundation.text.KeyboardOptions( keyboardType = androidx.compose.ui.text.input.KeyboardType.Password),&#10;    )&#10;}" description="Example of an outlinedTextfield." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_settings_clickable" value="// import androidx.compose.foundation.layout.fillMaxWidth&#10;// import androidx.compose.foundation.layout.padding&#10;// import androidx.compose.foundation.layout.size&#10;// import androidx.compose.foundation.layout.width&#10;// import androidx.compose.ui.unit.dp&#10;&#10;@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)&#10;@androidx.compose.runtime.Composable&#10;fun SettingsClickableComp(&#10;    @androidx.annotation.DrawableRes icon: Int,&#10;    @androidx.annotation.StringRes iconDesc: Int,&#10;    @StringRes name: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    androidx.compose.material3.Surface(&#10;        color = androidx.compose.ui.graphics.Color.Transparent,&#10;        modifier = androidx.compose.ui.Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        onClick = onClick,&#10;    ) {&#10;        androidx.compose.foundation.layout.Column {&#10;            androidx.compose.foundation.layout.Row(&#10;                verticalAlignment = androidx.compose.ui.Alignment.CenterVertically,&#10;                horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceBetween&#10;            ) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    androidx.compose.material3.Icon(&#10;                        androidx.compose.ui.res.painterResource(id = icon),&#10;                        contentDescription = androidx.compose.ui.res.stringResource(id = iconDesc),&#10;                        modifier = Modifier&#10;                            .size(24.dp)&#10;                    )&#10;                    androidx.compose.foundation.layout.Spacer(modifier = Modifier.width(8.dp))&#10;                    androidx.compose.material3.Text(&#10;                        text = stringResource(id = name),&#10;                        style = androidx.compose.material3.MaterialTheme.typography.bodyMedium.copy(&#10;                            color = MaterialTheme.colorScheme.surfaceTint&#10;                        ),&#10;                        modifier = Modifier&#10;                            .padding(16.dp),&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Start,&#10;                        overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis,&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.weight(1.0f))&#10;                Icon(&#10;                    androidx.compose.material.icons.Icons.Rounded.KeyboardArrowRight,&#10;                    tint = MaterialTheme.colorScheme.surfaceTint,&#10;                    contentDescription = stringResource(id = R.string.ic_arrow_forward)&#10;                )&#10;            }&#10;            androidx.compose.material3.Divider()&#10;        }&#10;&#10;    }&#10;}" description="Settings component to handle clickable item." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_settings_switch" value="// import androidx.compose.foundation.layout.fillMaxWidth&#10;// import androidx.compose.foundation.layout.padding&#10;// import androidx.compose.foundation.layout.size&#10;// import androidx.compose.foundation.layout.width&#10;// import androidx.compose.ui.unit.dp&#10;&#10;@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)&#10;@androidx.compose.runtime.Composable&#10;fun SettingsSwitchComp(&#10;    @androidx.annotation.DrawableRes icon: Int,&#10;    @androidx.annotation.StringRes iconDesc: Int,&#10;    @StringRes name: Int,&#10;    state: androidx.compose.runtime.State&lt;Boolean&gt;,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    androidx.compose.material3.Surface(&#10;        color = androidx.compose.ui.graphics.Color.Transparent,&#10;        modifier = androidx.compose.ui.Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        onClick = onClick,&#10;    ) {&#10;        androidx.compose.foundation.layout.Column {&#10;            androidx.compose.foundation.layout.Row (&#10;                verticalAlignment = androidx.compose.ui.Alignment.CenterVertically,&#10;                horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceBetween&#10;            ) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    androidx.compose.material3.Icon(&#10;                        androidx.compose.ui.res.painterResource(id = icon),&#10;                        contentDescription = androidx.compose.ui.res.stringResource(id = iconDesc),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    androidx.compose.foundation.layout.Spacer(modifier = Modifier.width(8.dp))&#10;                    androidx.compose.material3.Text(&#10;                        text = stringResource(id = name),&#10;                        modifier = Modifier.padding(16.dp),&#10;                        style = androidx.compose.material3.MaterialTheme.typography.bodyMedium,&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Start,&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.weight(1f))&#10;                androidx.compose.material3.Switch(&#10;                    checked = state.value,&#10;                    onCheckedChange = { onClick() }&#10;                )&#10;            }&#10;            androidx.compose.material3.Divider()&#10;        }&#10;    }&#10;}" description="Settings component switch." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_compose_settings_todo" value="https://tomas-repcik.medium.com/making-extensible-settings-screen-in-jetpack-compose-from-scratch-2558170dd24d" description="" toReformat="false" toShortenFQNames="true" />
</templateSet>