<templateSet group="AndroidTristanTestUIAutomator">
  <template name="and_uia_search_by_id" value="val $objectname$: UiObject2 = device.wait(Until.findObject(By.res($packageName$, &quot;$resId$&quot;)), SEARCH_TIMEOUT)&#10;assertNotNull($objectname$)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="resId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="packageName" expression="" defaultValue="&quot;APP_PACKAGE_NAME&quot;" alwaysStopAt="false" />
    <variable name="objectname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="and_uia_setup_test_class" value="// TODO: To be able to run the tests in order, add the following class annotation.&#10;// @FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;&#10;// To define the contants:&#10;// - Create the object class Constants&#10;// - Inside the class, run the live template: and_uia_constants&#10;&#10;// To add some usefully extensions:&#10;// - Create the file UIAutomatorExtensions&#10;// - Replace the whole content with live template: and_uia_extensions&#10;&#10;// To add Timber logs:&#10;// - Create the class: TerminalColor&#10;// - Replace the whole content with live template: and_uia_log_terminal_color&#10;// - Then create class: UnitTestTree&#10;// - Replace the whole content with live template: and_uia_log_timber_tree&#10;&#10;// To trig screenshot when the test fail:&#10;// - Create the class: ScreenshotTakingRule&#10;// - Replace the whole content with live template: and_uia_screen_shot_taking_rule&#10;&#10;&#10;// region Setup uiAutomator test&#10;private lateinit var device: androidx.test.uiautomator.UiDevice&#10;@org.junit.Before&#10;fun setup() {&#10;&#9;// Initialize UiDevice instance&#10;&#9;device = UiDevice.getInstance(androidx.test.platform.app.InstrumentationRegistry.getInstrumentation())&#10;}&#10;&#10;@org.junit.After&#10;@Throws(Exception::class)&#10;fun tearDown() {&#10;   &#10;}&#10;// endregion" description="Write the bootstrap code to start an UI automator test." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_uia_write_tools" value="&#9;&#10;    const val APP_PACKAGE = &quot;write_your_app_package_here&quot;&#10;    const val LAUNCH_TIMEOUT = 5000L&#10;    const val UPDATE_DISPLAY_TIMEOUT = 1000L&#10;    const val SEARCH_TIMEOUT = 500L&#10;&#10;&#10;// Usage:&#10;// filepath = takeScreenshot(device, &quot;screen_onboarding_01_welcome&quot;)&#10;// println(&quot;Screenshot taken: $filepath&quot;)&#10;            &#10;fun takeScreenshot(device: androidx.test.uiautomator.UiDevice, screenShotName: String, scale: Float = 1.0f, quality: Int = 90): String? {&#10;//        val f = File(InstrumentationRegistry.getInstrumentation().targetContext.filesDir, screenShotName)&#10;&#9;val f = java.io.File(&quot;/sdcard/Download/&quot;, &quot;${screenShotName}.png&quot;)&#10;&#9;device.takeScreenshot(f, scale, quality)&#10;&#9;return if (f.exists()) f.absolutePath else null&#10;}&#10;&#9;&#10;fun unlockDevice(device: UiDevice) {&#10;&#9;if (!device.isScreenOn) {&#10;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_POWER)&#10;&#10;&#9;&#9;Thread.sleep(SLEEP_SMALL_TIME)&#10;&#9;&#9;val deviceMargin = 50&#10;&#9;&#9;val displayHeight = device.displayHeight&#10;&#9;&#9;val displayWidth = device.displayWidth&#10;&#10;&#9;&#9;device.swipe(displayWidth / 2, displayHeight - deviceMargin, displayWidth / 2, deviceMargin, 40)&#10;&#9;&#9;Thread.sleep(SLEEP_SMALL_TIME)&#10;&#10;&#9;&#9;// Start from the home screen&#10;&#9;&#9;device.pressHome()&#10;&#10;&#9;&#9;val pinEntryView = device.findObject(By.res(&quot;com.android.systemui:id/pinEntry&quot;))&#10;&#9;&#9;val fixedPinEntryView = device.findObject(By.res(&quot;com.android.systemui:id/fixedPinEntry&quot;))&#10;&#9;&#9;val homeScreenView = device.findObject(By.res(&quot;com.sec.android.app.launcher:id/launcher&quot;))&#10;&#9;&#9;val sonyHomeScreenView = device.findObject(By.res(&quot;android:id/content&quot;))&#10;&#10;&#9;&#9;if (pinEntryView != null) {&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_ENTER)&#10;&#9;&#9;} else if (fixedPinEntryView != null) {&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;} else if (homeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else if (sonyHomeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Assert.fail(&quot;Unlock screen not supported yet&quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;fun startMainActivityFromHomeScreen(device: UiDevice) {&#10;&#10;&#9;// Unlock device if needed.&#10;&#9;unlockDevice(device)&#10;&#10;&#9;// Start from the home screen&#10;&#9;device.pressHome()&#10;&#10;&#9;// Wait for launcher&#10;&#9;val launcherPackage: String = device.launcherPackageName&#10;&#9;assertNotNull(launcherPackage)&#10;&#9;device.wait(&#10;&#9;&#9;Until.hasObject(By.pkg(launcherPackage).depth(0)),&#10;&#9;&#9;LAUNCH_TIMEOUT&#10;&#9;)&#10;&#10;&#9;// Launch the app&#10;&#9;val context = ApplicationProvider.getApplicationContext&lt;Context&gt;()&#10;&#9;val intent = context.packageManager.getLaunchIntentForPackage(&#10;&#9;&#9;APP_PACKAGE&#10;&#9;)&#10;&#9;context.startActivity(intent)&#10;&#10;&#9;// Wait for the app to appear&#10;&#9;device.wait(&#10;&#9;&#9;Until.hasObject(By.pkg(APP_PACKAGE).depth(0)),&#10;&#9;&#9;LAUNCH_TIMEOUT&#10;&#9;)&#10;}&#10;&#10;fun genericWaitForID(device: UiDevice, resId: String, timeout: Long): UiObject2? {&#10;&#9;return device.wait(Until.findObject(By.res(resId)), LAUNCH_TIMEOUT)&#10;}&#10;&#10;&#10;fun genericButtonClick(device: UiDevice, resId: String) {&#10;&#9;val currentButton = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentButton)&#10;&#9;currentButton.click()&#10;}&#10;&#10;fun genericEditTextSetText(device: UiDevice, value: String, resId: String) {&#10;&#9;val currentEditText = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentEditText)&#10;&#9;currentEditText.text = value&#10;}&#10;&#10;fun genericCheckViewIsDisplayed(device: UiDevice, resId: String) {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;}&#10;&#10;fun genericCheckTextViewValue(device: UiDevice, resId: String, expectedValue: String) {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;// TODO: Check is textview&#10;&#9;assertEquals(&quot;$resId value mismatch&quot;, expectedValue, currentView.text)&#10;}&#10;&#10;fun genericGetListItemsNumber(device: UiDevice, resId: String): Int {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;return currentView.childCount&#10;}" description="Write UIAutomatorTools." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_uia_compose_setup_test_class" value="// Corresponding compose test class&#10;/*&#10;object Tags {&#10;&#9;const val TAG_GENERIC_DIALOG_BUTTON_DISMISS = &quot;dialog_button_dismiss&quot;&#10;}&#10;&#9;&#10;@Composable&#10;fun OnboardingWelcomeScreen(handleNextAction: () -&gt; Unit) {&#10;&#9;&#10;&#9;Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.testTag(Tags.TAG_ONBOARD_WELCOME_SCREEN)&#10;&#9;.semantics { testTagsAsResourceId = true }, // for UIAutomator to get the id.&#10;&#9;) {&#10;&#9;&#9;Spacer(modifier = Modifier.weight(0.5f))&#10;&#9;&#9;Icon(&#10;&#9;&#9;&#9;painterResource(id = R.drawable.ic_stid_mobile_id),&#10;&#9;&#9;&#9;contentDescription = &quot;Localized description&quot;,&#10;&#9;&#9;&#9;modifier = Modifier&#10;&#9;&#9;&#9;&#9;.padding(vertical = dimensions.spaceLarge)&#10;&#9;&#9;&#9;&#9;.fillMaxWidth(0.6f)&#10;&#9;&#9;)&#10;&#10;&#9;&#9;Text(&#10;&#9;&#9;&#9;modifier = Modifier.padding(horizontal = dimensions.spaceLarge),&#10;&#9;&#9;&#9;textAlign = TextAlign.Center,&#10;&#9;&#9;&#9;text = stringResource(id = R.string.onboarding_welcome_message),&#10;&#9;&#9;&#9;style = MaterialTheme.typography.bodyMedium&#10;&#9;&#9;)&#10;&#9;&#9;Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;&#9;&#9;ButtonPrimary(&#10;&#9;&#9;&#9;modifier = Modifier&#10;&#9;&#9;&#9;&#9;.fillMaxWidth(1f)&#10;&#9;&#9;&#9;&#9;.padding(horizontal = dimensions.spaceMedium, vertical = dimensions.onboardingButtonVerticalPadding)&#10;&#9;&#9;&#9;&#9;.testTag(Tags.TAG_ONBOARD_WELCOME_SCREEN_BUTTON_NEXT),&#10;&#9;&#9;&#9;text = stringResource(id = R.string.generic_continue)&#10;&#9;&#9;) {&#10;&#9;&#9;&#9;handleNextAction()&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;*/&#10;&#10;&#10;    @get:Rule&#10;    val composeTestRule = createComposeRule()&#10;&#9;&#10;&#9; @Test&#10;    fun myTest() {&#10;        // Start the app&#10;        composeTestRule.setContent {&#10;//            OnboardingScreen().OnboardScreen { }&#10;        }&#10;&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_WELCOME_SCREEN).assertIsDisplayed() // Check that first screen is displayed.&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_WELCOME_SCREEN_BUTTON_NEXT).performClick() // Go to next screen.&#10;&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN).assertIsDisplayed() // Check that the second screen is displayed.&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN_BUTTON_AGREE).performScrollTo()&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN_BUTTON_AGREE).performClick() // Go to next screen.&#10;    }" description="Write the bootstrap code to start an UI Automator test using Jetpack Compose code." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_uia_log_terminal_color" value="object TerminalColor {&#10;&#10;    // Source : https://github.com/ziggy42/kolor&#10;    private const val BG_JUMP = 10&#10;    private const val ESCAPE = '\u001B'&#10;&#10;    enum class Color(baseCode: Int) {&#10;        BLACK(30),&#10;        RED(31),&#10;        GREEN(32),&#10;        YELLOW(33),&#10;        BLUE(34),&#10;        MAGENTA(35),&#10;        CYAN(36),&#10;        LIGHT_GRAY(37),&#10;&#10;        DARK_GRAY(90),&#10;        LIGHT_RED(91),&#10;        LIGHT_GREEN(92),&#10;        LIGHT_YELLOW(93),&#10;        LIGHT_BLUE(94),&#10;        LIGHT_MAGENTA(95),&#10;        LIGHT_CYAN(96),&#10;        WHITE(97),&#10;        RESET(0);&#10;&#10;        /** ANSI modifier string to apply the color to the text itself */&#10;        val foreground: String = &quot;$ESCAPE[${baseCode}m&quot;&#10;&#10;        /** ANSI modifier string to apply the color the text's background */&#10;        val background: String = &quot;$ESCAPE[${baseCode + BG_JUMP}m&quot;&#10;    }&#10;}" description="TerminalColor: The class to color the terminal logs." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="and_uia_extensions" value="fun androidx.test.uiautomator.UiDevice.takeScreenshot(screenShotName: String, scale: Float = 1.0f, quality: Int = 90): String? {&#10;//        val f = File(InstrumentationRegistry.getInstrumentation().targetContext.filesDir, screenShotName)&#10;&#9;val f = java.io.File(&quot;/sdcard/Download/&quot;, &quot;${screenShotName}.png&quot;)&#10;&#9;this.takeScreenshot(f, scale, quality)&#10;&#9;return if (f.exists()) f.absolutePath else null&#10;}&#10;&#10;fun UiDevice.unlockDevice(smallSleepTime:Long) {&#10;&#9;if (!this.isScreenOn) {&#10;&#9;&#9;this.pressKeyCode(android.view.KeyEvent.KEYCODE_POWER)&#10;&#10;&#9;&#9;Thread.sleep(smallSleepTime)&#10;&#9;&#9;val deviceMargin = 50&#10;&#9;&#9;val displayHeight = this.displayHeight&#10;&#9;&#9;val displayWidth = this.displayWidth&#10;&#10;&#9;&#9;this.swipe(displayWidth / 2, displayHeight - deviceMargin, displayWidth / 2, deviceMargin, 40)&#10;&#9;&#9;Thread.sleep(smallSleepTime)&#10;&#10;&#9;&#9;// Start from the home screen&#10;&#9;&#9;this.pressHome()&#10;&#10;&#9;&#9;val pinEntryView = this.findObject(androidx.test.uiautomator.By.res(&quot;com.android.systemui:id/pinEntry&quot;))&#10;&#9;&#9;val fixedPinEntryView = this.findObject(By.res(&quot;com.android.systemui:id/fixedPinEntry&quot;))&#10;&#9;&#9;val homeScreenView = this.findObject(By.res(&quot;com.sec.android.app.launcher:id/launcher&quot;))&#10;&#9;&#9;val sonyHomeScreenView = this.findObject(By.res(&quot;android:id/content&quot;))&#10;&#10;&#9;&#9;if (pinEntryView != null) {&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_ENTER)&#10;&#9;&#9;} else if (fixedPinEntryView != null) {&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;this.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;} else if (homeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else if (sonyHomeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else {&#10;            org.junit.Assert.fail(&quot;Unlock screen not supported yet&quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;fun UiDevice.startMainActivityFromHomeScreen(launchTimeout: Long, smallSleepTime:Long, appPackage: String) {&#10;&#10;&#9;// Unlock device if needed.&#10;&#9;unlockDevice(smallSleepTime)&#10;&#10;&#9;// Start from the home screen&#10;&#9;this.pressHome()&#10;&#10;&#9;// Wait for launcher&#10;&#9;val launcherPackage: String = this.launcherPackageName&#10;    org.junit.Assert.assertNotNull(launcherPackage)&#10;&#9;this.wait(&#10;        androidx.test.uiautomator.Until.hasObject(By.pkg(launcherPackage).depth(0)),&#10;&#9;&#9;launchTimeout&#10;&#9;)&#10;&#10;&#9;// Launch the app&#10;&#9;val context = androidx.test.core.app.ApplicationProvider.getApplicationContext&lt;android.content.Context&gt;()&#10;&#9;val intent = context.packageManager.getLaunchIntentForPackage(&#10;&#9;&#9;appPackage&#10;&#9;)&#10;&#9;context.startActivity(intent)&#10;&#10;&#9;// Wait for the app to appear&#10;&#9;this.wait(&#10;&#9;&#9;Until.hasObject(By.pkg(appPackage).depth(0)),&#10;&#9;&#9;launchTimeout&#10;&#9;)&#10;}&#10;&#10;fun UiDevice.genericWaitForID(resId: String, timeout: Long): androidx.test.uiautomator.UiObject2? {&#10;&#9;return this.wait(Until.findObject(By.res(resId)), timeout)&#10;}&#10;&#10;fun UiDevice.genericButtonClick(resId: String) {&#10;&#9;val currentButton = this.findObject(By.res(resId))&#10;&#9;if(currentButton == null) {&#10;&#9;&#9;val currentButtonBis = this.findObject( androidx.test.uiautomator.UiSelector().resourceId(resId))&#10;&#9;&#9;assertNotNull(&quot;$resId BIS must not be null&quot;, currentButtonBis)&#10;&#9;&#9;currentButtonBis.click()&#10;&#9;} else {&#10;&#9;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentButton)&#10;&#9;&#9;currentButton.click()&#10;&#9;}&#10;}&#10;&#10;fun UiDevice.genericEditTextSetText(value: String, resId: String) {&#10;&#9;val currentEditText = this.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentEditText)&#10;&#9;currentEditText.text = value&#10;}&#10;&#10;fun UiDevice.genericCheckViewIsDisplayed(resId: String) {&#10;&#9;val currentView = this.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;}&#10;&#10;fun UiDevice.genericCheckTextViewValue(resId: String, expectedValue: String) {&#10;&#9;val currentView = this.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;// TODO: Check is textview&#10;    org.junit.Assert.assertEquals(&quot;$resId value mismatch&quot;, expectedValue, currentView.text)&#10;}&#10;&#10;fun UiDevice.genericGetListItemsNumber(resId: String): Int {&#10;&#9;val currentView = this.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;return currentView.childCount&#10;}" description="ExtensionClass" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="and_uia_screen_shot_taking_rule" value="/**&#10; * Junit rule that takes a screenshot when a test fails.&#10; * Source: https://medium.com/stepstone-tech/how-to-capture-screenshots-for-failed-ui-tests-9927eea6e1e4&#10; *&#10; * '''&#10; * @Rule&#10; *  @JvmField&#10; *  var rule = ScreenshotTakingRule()&#10; *  '''&#10; *     // @Rule&#10; *     // Error: The @Rule 'rule' must be public&#10; *     // Solution:&#10; *     // @get:Rule&#10; *     // Source:&#10; *     // https://stackoverflow.com/questions/29945087/kotlin-and-new-activitytestrule-the-rule-must-be-public&#10; *     //&#10; *     // Second solution :&#10; *     // https://www.maskaravivek.com/post/fix-kotlin-and-new-activitytestrule-the-rule-must-be-public/&#10; *     //    @get:Rule&#10; *     @Rule&#10; *     @JvmField&#10; *     var rule = ScreenshotTakingRule()&#10; *&#10; */&#10;class ScreenshotTakingRule : org.junit.rules.TestWatcher() {&#10;    companion object {&#10;        private const val TAG = &quot;ScreenshotTakingRule&quot;&#10;    }&#10;&#10;    override fun failed(e: Throwable?, description: org.junit.runner.Description) {&#10;        android.util.Log.d(TAG, &quot;taking screenshot... ${description.methodName}&quot;)&#10;        takeScreenshot(&#10;            device = androidx.test.uiautomator.UiDevice.getInstance(androidx.test.platform.app.InstrumentationRegistry.getInstrumentation()),&#10;            screenShotName = &quot;${description.methodName}&quot;&#10;        )&#10;    }&#10;}" description="ScreenshotTakingRule: Class to trigg screenshot when the test fail." toReformat="false" toShortenFQNames="true" />
  <template name="and_uia_log_timber_tree" value="/**&#10;* Class to logs in color when running unit tests.&#10;* Usage in the setup function:&#10;* if(!Timber.forest().any { it is UnitTestTree }) {&#10;* &#9;Timber.plant(UnitTestTree())&#10;* }&#10;*/&#10;&#10;&#10;class UnitTestTree : Timber.DebugTree() {&#10;&#10;    companion object {&#10;        private fun getStringFromLevelValue(priority: Int): String {&#10;            return when (priority) {&#10;                Log.ERROR -&gt;    &quot;${TerminalColor.Color.RED.background}${TerminalColor.Color.BLACK.foreground} E ${TerminalColor.Color.RESET.foreground}&quot;&#10;                Log.WARN -&gt;     &quot;${TerminalColor.Color.LIGHT_RED.background}${TerminalColor.Color.BLACK.foreground} W ${TerminalColor.Color.RESET.foreground}&quot;&#10;                Log.INFO -&gt;     &quot;${TerminalColor.Color.YELLOW.background}${TerminalColor.Color.BLACK.foreground} I ${TerminalColor.Color.RESET.foreground}&quot;&#10;                Log.DEBUG -&gt;    &quot;${TerminalColor.Color.BLUE.background}${TerminalColor.Color.BLACK.foreground} D ${TerminalColor.Color.RESET.foreground}&quot;&#10;                Log.VERBOSE -&gt;  &quot;${TerminalColor.Color.GREEN.background}${TerminalColor.Color.BLACK.foreground} V ${TerminalColor.Color.RESET.foreground}&quot;&#10;                Log.ASSERT -&gt;   &quot;${TerminalColor.Color.MAGENTA.background}${TerminalColor.Color.BLACK.foreground} A ${TerminalColor.Color.RESET.foreground}&quot;&#10;                else -&gt;         &quot;${TerminalColor.Color.WHITE.background}${TerminalColor.Color.BLACK.foreground} T ${TerminalColor.Color.RESET.foreground}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {&#10;        // TODO: Keep the tag value in a map and assign a color to display it.&#10;        val tagTruncated =  tag?.substring(0, (tag?.length ?: 0).coerceAtMost(23))&#10;        val tagPadded = &quot;[$tag] ${&quot;&quot;.padEnd(23 - (tagTruncated?.length ?: 0), ' ')}&quot;&#10;        println(&quot;${getStringFromLevelValue(priority)}: $tagPadded =&gt; [$message]&quot;) // , t = [$t]&#10;    }&#10;}" description="UnitTestTree: Timber log tree." toReformat="false" toShortenFQNames="true" />
  <template name="and_uia_test_content_sample" value="// Waiting for first screen.&#10;device.genericWaitForID(&quot;tag_value&quot;, Constants.LAUNCH_TIMEOUT)&#10;Thread.sleep(Constants.UPDATE_DISPLAY_TIMEOUT) // Wait for the screen to be displayed (navigation transition is 700ms).&#10;var filepath = device.takeScreenshot(&quot;screen_main&quot;)&#10;// Timber.v(&quot;Screenshot taken: $filepath&quot;)&#10;&#10;device.genericButtonClick(&quot;&quot;)&#10;&#10;androidx.test.uiautomator.UiScrollable(androidx.test.uiautomator.UiSelector().resourceId(&quot;uid_of_gui_to_scroll&quot;)).scrollToEnd(10)&#10;&#10;device.pressBack()" description="Some sample of test." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="and_uia_constants" value="const val APP_PACKAGE = &quot;com.example&quot;&#10;const val LAUNCH_TIMEOUT = 5000L&#10;const val UPDATE_DISPLAY_TIMEOUT = 2000L" description="object Constant: Class to store the constants." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>