<templateSet group="AndroidTristanTestUIAutomator">
  <template name="and_search_by_id" value="val $objectname$: UiObject2 = device.wait(Until.findObject(By.res($packageName$, &quot;$resId$&quot;)), SEARCH_TIMEOUT)&#10;assertNotNull($objectname$)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="resId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="packageName" expression="" defaultValue="&quot;APP_PACKAGE_NAME&quot;" alwaysStopAt="false" />
    <variable name="objectname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="and_uia_setup_test_class" value="// TODO: To be able to run the tests in order, add the following class annotation.&#10;// @FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;&#10;&#10;private lateinit var device: UiDevice&#10;@Before&#10;fun setup() {&#10;&#9;// Initialize UiDevice instance&#10;&#9;device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())&#10;&#10;&#9;// Launch the application.&#10;&#9;startMainActivityFromHomeScreen(device)&#10;&#10;&#9;// Wait for the screen to be displayed (GUI constraints).&#10;&#9;waitForOnboardingToBeDisplayed(device)&#10;}&#10;" description="Write the bootstrap code to start an UI automator test." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_uia_write_tools" value="&#9;&#10;    const val APP_PACKAGE = &quot;write_your_app_package_here&quot;&#10;    const val LAUNCH_TIMEOUT = 5000L&#10;    const val UPDATE_DISPLAY_TIMEOUT = 1000L&#10;    const val SEARCH_TIMEOUT = 500L&#10;&#10;&#10;// Usage:&#10;// filepath = takeScreenshot(device, &quot;screen_onboarding_01_welcome&quot;)&#10;// println(&quot;Screenshot taken: $filepath&quot;)&#10;            &#10;fun takeScreenshot(device: androidx.test.uiautomator.UiDevice, screenShotName: String, scale: Float = 1.0f, quality: Int = 90): String? {&#10;//        val f = File(InstrumentationRegistry.getInstrumentation().targetContext.filesDir, screenShotName)&#10;&#9;val f = java.io.File(&quot;/sdcard/Download/&quot;, &quot;${screenShotName}.png&quot;)&#10;&#9;device.takeScreenshot(f, scale, quality)&#10;&#9;return if (f.exists()) f.absolutePath else null&#10;}&#10;&#9;&#10;fun unlockDevice(device: UiDevice) {&#10;&#9;if (!device.isScreenOn) {&#10;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_POWER)&#10;&#10;&#9;&#9;Thread.sleep(SLEEP_SMALL_TIME)&#10;&#9;&#9;val deviceMargin = 50&#10;&#9;&#9;val displayHeight = device.displayHeight&#10;&#9;&#9;val displayWidth = device.displayWidth&#10;&#10;&#9;&#9;device.swipe(displayWidth / 2, displayHeight - deviceMargin, displayWidth / 2, deviceMargin, 40)&#10;&#9;&#9;Thread.sleep(SLEEP_SMALL_TIME)&#10;&#10;&#9;&#9;// Start from the home screen&#10;&#9;&#9;device.pressHome()&#10;&#10;&#9;&#9;val pinEntryView = device.findObject(By.res(&quot;com.android.systemui:id/pinEntry&quot;))&#10;&#9;&#9;val fixedPinEntryView = device.findObject(By.res(&quot;com.android.systemui:id/fixedPinEntry&quot;))&#10;&#9;&#9;val homeScreenView = device.findObject(By.res(&quot;com.sec.android.app.launcher:id/launcher&quot;))&#10;&#9;&#9;val sonyHomeScreenView = device.findObject(By.res(&quot;android:id/content&quot;))&#10;&#10;&#9;&#9;if (pinEntryView != null) {&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_ENTER)&#10;&#9;&#9;} else if (fixedPinEntryView != null) {&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;&#9;device.pressKeyCode(KeyEvent.KEYCODE_0)&#10;&#9;&#9;} else if (homeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else if (sonyHomeScreenView != null) {&#10;&#9;&#9;&#9;// Nothing to do: no pin code&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Assert.fail(&quot;Unlock screen not supported yet&quot;)&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;fun startMainActivityFromHomeScreen(device: UiDevice) {&#10;&#10;&#9;// Unlock device if needed.&#10;&#9;unlockDevice(device)&#10;&#10;&#9;// Start from the home screen&#10;&#9;device.pressHome()&#10;&#10;&#9;// Wait for launcher&#10;&#9;val launcherPackage: String = device.launcherPackageName&#10;&#9;assertNotNull(launcherPackage)&#10;&#9;device.wait(&#10;&#9;&#9;Until.hasObject(By.pkg(launcherPackage).depth(0)),&#10;&#9;&#9;LAUNCH_TIMEOUT&#10;&#9;)&#10;&#10;&#9;// Launch the app&#10;&#9;val context = ApplicationProvider.getApplicationContext&lt;Context&gt;()&#10;&#9;val intent = context.packageManager.getLaunchIntentForPackage(&#10;&#9;&#9;APP_PACKAGE&#10;&#9;)&#10;&#9;context.startActivity(intent)&#10;&#10;&#9;// Wait for the app to appear&#10;&#9;device.wait(&#10;&#9;&#9;Until.hasObject(By.pkg(APP_PACKAGE).depth(0)),&#10;&#9;&#9;LAUNCH_TIMEOUT&#10;&#9;)&#10;}&#10;&#10;fun genericWaitForID(device: UiDevice, resId: String, timeout: Long): UiObject2? {&#10;&#9;return device.wait(Until.findObject(By.res(resId)), LAUNCH_TIMEOUT)&#10;}&#10;&#10;&#10;fun genericButtonClick(device: UiDevice, resId: String) {&#10;&#9;val currentButton = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentButton)&#10;&#9;currentButton.click()&#10;}&#10;&#10;fun genericEditTextSetText(device: UiDevice, value: String, resId: String) {&#10;&#9;val currentEditText = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentEditText)&#10;&#9;currentEditText.text = value&#10;}&#10;&#10;fun genericCheckViewIsDisplayed(device: UiDevice, resId: String) {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;}&#10;&#10;fun genericCheckTextViewValue(device: UiDevice, resId: String, expectedValue: String) {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;// TODO: Check is textview&#10;&#9;assertEquals(&quot;$resId value mismatch&quot;, expectedValue, currentView.text)&#10;}&#10;&#10;fun genericGetListItemsNumber(device: UiDevice, resId: String): Int {&#10;&#9;val currentView = device.findObject(By.res(resId))&#10;&#9;assertNotNull(&quot;$resId must not be null&quot;, currentView)&#10;&#9;return currentView.childCount&#10;}" description="Write UIAutomatorTools." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="and_uia_compose_setup_test_class" value="// Corresponding compose test class&#10;/*&#10;object Tags {&#10;&#9;const val TAG_GENERIC_DIALOG_BUTTON_DISMISS = &quot;dialog_button_dismiss&quot;&#10;}&#10;&#9;&#10;@Composable&#10;fun OnboardingWelcomeScreen(handleNextAction: () -&gt; Unit) {&#10;&#9;&#10;&#9;Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.testTag(Tags.TAG_ONBOARD_WELCOME_SCREEN)&#10;&#9;.semantics { testTagsAsResourceId = true }, // for UIAutomator to get the id.&#10;&#9;) {&#10;&#9;&#9;Spacer(modifier = Modifier.weight(0.5f))&#10;&#9;&#9;Icon(&#10;&#9;&#9;&#9;painterResource(id = R.drawable.ic_stid_mobile_id),&#10;&#9;&#9;&#9;contentDescription = &quot;Localized description&quot;,&#10;&#9;&#9;&#9;modifier = Modifier&#10;&#9;&#9;&#9;&#9;.padding(vertical = dimensions.spaceLarge)&#10;&#9;&#9;&#9;&#9;.fillMaxWidth(0.6f)&#10;&#9;&#9;)&#10;&#10;&#9;&#9;Text(&#10;&#9;&#9;&#9;modifier = Modifier.padding(horizontal = dimensions.spaceLarge),&#10;&#9;&#9;&#9;textAlign = TextAlign.Center,&#10;&#9;&#9;&#9;text = stringResource(id = R.string.onboarding_welcome_message),&#10;&#9;&#9;&#9;style = MaterialTheme.typography.bodyMedium&#10;&#9;&#9;)&#10;&#9;&#9;Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;&#9;&#9;ButtonPrimary(&#10;&#9;&#9;&#9;modifier = Modifier&#10;&#9;&#9;&#9;&#9;.fillMaxWidth(1f)&#10;&#9;&#9;&#9;&#9;.padding(horizontal = dimensions.spaceMedium, vertical = dimensions.onboardingButtonVerticalPadding)&#10;&#9;&#9;&#9;&#9;.testTag(Tags.TAG_ONBOARD_WELCOME_SCREEN_BUTTON_NEXT),&#10;&#9;&#9;&#9;text = stringResource(id = R.string.generic_continue)&#10;&#9;&#9;) {&#10;&#9;&#9;&#9;handleNextAction()&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;*/&#10;&#10;&#10;    @get:Rule&#10;    val composeTestRule = createComposeRule()&#10;&#9;&#10;&#9; @Test&#10;    fun myTest() {&#10;        // Start the app&#10;        composeTestRule.setContent {&#10;//            OnboardingScreen().OnboardScreen { }&#10;        }&#10;&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_WELCOME_SCREEN).assertIsDisplayed() // Check that first screen is displayed.&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_WELCOME_SCREEN_BUTTON_NEXT).performClick() // Go to next screen.&#10;&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN).assertIsDisplayed() // Check that the second screen is displayed.&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN_BUTTON_AGREE).performScrollTo()&#10;        composeTestRule.onNodeWithTag(OnboardingScreen.Tags.TAG_ONBOARD_SECURITY_SCREEN_BUTTON_AGREE).performClick() // Go to next screen.&#10;    }" description="Write the bootstrap code to start an UI Automator test using Jetpack Compose code." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>